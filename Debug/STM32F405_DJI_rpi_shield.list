
STM32F405_DJI_rpi_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006428  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800661c  0800661c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800661c  0800661c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006624  08006624  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006624  08006624  00016624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800662c  0800662c  0001662c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000084  080066b4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000568  080066b4  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001418c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003338  00000000  00000000  00034240  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  00037578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  000385a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007b42  00000000  00000000  00039460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f412  00000000  00000000  00040fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb910  00000000  00000000  000503b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011bcc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047dc  00000000  00000000  0011bd40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006598 	.word	0x08006598

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08006598 	.word	0x08006598

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	ed93 7a00 	vldr	s14, [r3]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3304      	adds	r3, #4
 8000d20:	edd3 6a00 	vldr	s13, [r3]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3304      	adds	r3, #4
 8000d28:	edd3 7a00 	vldr	s15, [r3]
 8000d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3308      	adds	r3, #8
 8000d38:	edd3 6a00 	vldr	s13, [r3]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3308      	adds	r3, #8
 8000d40:	edd3 7a00 	vldr	s15, [r3]
 8000d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	330c      	adds	r3, #12
 8000d50:	edd3 6a00 	vldr	s13, [r3]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	330c      	adds	r3, #12
 8000d58:	edd3 7a00 	vldr	s15, [r3]
 8000d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d64:	eeb0 0a67 	vmov.f32	s0, s15
 8000d68:	f000 f91e 	bl	8000fa8 <invSqrt>
 8000d6c:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	edd3 7a00 	vldr	s15, [r3]
 8000d76:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d7e:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3304      	adds	r3, #4
 8000d86:	edd3 7a00 	vldr	s15, [r3]
 8000d8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d92:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3308      	adds	r3, #8
 8000d9a:	edd3 7a00 	vldr	s15, [r3]
 8000d9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da6:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	330c      	adds	r3, #12
 8000dae:	edd3 7a00 	vldr	s15, [r3]
 8000db2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dba:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8000dbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dca:	edd7 6a06 	vldr	s13, [r7, #24]
 8000dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dda:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000dde:	ed97 7a06 	vldr	s14, [r7, #24]
 8000de2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dea:	edd7 6a05 	vldr	s13, [r7, #20]
 8000dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dfa:	edd7 6a04 	vldr	s13, [r7, #16]
 8000dfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e0a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000e0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e1a:	eef0 0a67 	vmov.f32	s1, s15
 8000e1e:	eeb0 0a46 	vmov.f32	s0, s12
 8000e22:	f004 fb4b 	bl	80054bc <atan2f>
 8000e26:	eef0 7a40 	vmov.f32	s15, s0
 8000e2a:	4b59      	ldr	r3, [pc, #356]	; (8000f90 <Quaternion_Update+0x28c>)
 8000e2c:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8000e30:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e34:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e3c:	edd7 6a06 	vldr	s13, [r7, #24]
 8000e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e50:	eeb0 0a67 	vmov.f32	s0, s15
 8000e54:	f004 fada 	bl	800540c <asinf>
 8000e58:	eef0 7a40 	vmov.f32	s15, s0
 8000e5c:	eef1 7a67 	vneg.f32	s15, s15
 8000e60:	4b4c      	ldr	r3, [pc, #304]	; (8000f94 <Quaternion_Update+0x290>)
 8000e62:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8000e66:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e72:	edd7 6a04 	vldr	s13, [r7, #16]
 8000e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e82:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000e86:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e92:	edd7 6a05 	vldr	s13, [r7, #20]
 8000e96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ea2:	edd7 6a04 	vldr	s13, [r7, #16]
 8000ea6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eb2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000eb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec2:	eef0 0a67 	vmov.f32	s1, s15
 8000ec6:	eeb0 0a46 	vmov.f32	s0, s12
 8000eca:	f004 faf7 	bl	80054bc <atan2f>
 8000ece:	eef0 7a40 	vmov.f32	s15, s0
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <Quaternion_Update+0x294>)
 8000ed4:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <Quaternion_Update+0x28c>)
 8000eda:	edd3 7a00 	vldr	s15, [r3]
 8000ede:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000f9c <Quaternion_Update+0x298>
 8000ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <Quaternion_Update+0x28c>)
 8000ee8:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <Quaternion_Update+0x290>)
 8000eee:	edd3 7a00 	vldr	s15, [r3]
 8000ef2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000f9c <Quaternion_Update+0x298>
 8000ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <Quaternion_Update+0x290>)
 8000efc:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <Quaternion_Update+0x294>)
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000f9c <Quaternion_Update+0x298>
 8000f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <Quaternion_Update+0x294>)
 8000f10:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <Quaternion_Update+0x294>)
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f22:	db0a      	blt.n	8000f3a <Quaternion_Update+0x236>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <Quaternion_Update+0x294>)
 8000f26:	edd3 7a00 	vldr	s15, [r3]
 8000f2a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000fa0 <Quaternion_Update+0x29c>
 8000f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <Quaternion_Update+0x294>)
 8000f34:	edc3 7a00 	vstr	s15, [r3]
 8000f38:	e007      	b.n	8000f4a <Quaternion_Update+0x246>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <Quaternion_Update+0x294>)
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	eef1 7a67 	vneg.f32	s15, s15
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <Quaternion_Update+0x294>)
 8000f46:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <Quaternion_Update+0x28c>)
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	db0a      	blt.n	8000f70 <Quaternion_Update+0x26c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <Quaternion_Update+0x28c>)
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000fa4 <Quaternion_Update+0x2a0>
 8000f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <Quaternion_Update+0x28c>)
 8000f6a:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8000f6e:	e00b      	b.n	8000f88 <Quaternion_Update+0x284>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <Quaternion_Update+0x28c>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000fa4 <Quaternion_Update+0x2a0>
 8000f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f7e:	eef1 7a67 	vneg.f32	s15, s15
 8000f82:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <Quaternion_Update+0x28c>)
 8000f84:	edc3 7a00 	vstr	s15, [r3]
}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000214 	.word	0x20000214
 8000f94:	2000020c 	.word	0x2000020c
 8000f98:	20000210 	.word	0x20000210
 8000f9c:	42652ee1 	.word	0x42652ee1
 8000fa0:	43b40000 	.word	0x43b40000
 8000fa4:	43340000 	.word	0x43340000

08000fa8 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fbe:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	105a      	asrs	r2, r3, #1
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <invSqrt+0x74>)
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000fe0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fe4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fec:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000ff8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ffc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001004:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	ee07 3a90 	vmov	s15, r3
}
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	5f3759df 	.word	0x5f3759df

08001020 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b02      	cmp	r3, #2
 8001058:	d101      	bne.n	800105e <LL_SPI_IsActiveFlag_TXE+0x18>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107c:	2b80      	cmp	r3, #128	; 0x80
 800107e:	d101      	bne.n	8001084 <LL_SPI_IsActiveFlag_BSY+0x18>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	b2db      	uxtb	r3, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	330c      	adds	r3, #12
 80010bc:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	78fa      	ldrb	r2, [r7, #3]
 80010c2:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <bno080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float bno080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	ed2d 8b02 	vpush	{d8}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	80fb      	strh	r3, [r7, #6]
 80010e0:	4613      	mov	r3, r2
 80010e2:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 80010e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	425b      	negs	r3, r3
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	eef0 0a67 	vmov.f32	s1, s15
 8001100:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001104:	f004 f9dc 	bl	80054c0 <powf>
 8001108:	eef0 7a40 	vmov.f32	s15, s0
 800110c:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001110:	eeb0 0a67 	vmov.f32	s0, s15
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	ecbd 8b02 	vpop	{d8}
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void parseCommandReport(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <parseCommandReport+0x30>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2bf1      	cmp	r3, #241	; 0xf1
 800112c:	d109      	bne.n	8001142 <parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <parseCommandReport+0x30>)
 8001130:	789b      	ldrb	r3, [r3, #2]
 8001132:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b07      	cmp	r3, #7
 8001138:	d103      	bne.n	8001142 <parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <parseCommandReport+0x30>)
 800113c:	795a      	ldrb	r2, [r3, #5]
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <parseCommandReport+0x34>)
 8001140:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000268 	.word	0x20000268
 8001154:	200002eb 	.word	0x200002eb

08001158 <parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void parseInputReport(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800115e:	4b81      	ldr	r3, [pc, #516]	; (8001364 <parseInputReport+0x20c>)
 8001160:	785b      	ldrb	r3, [r3, #1]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b7f      	ldr	r3, [pc, #508]	; (8001364 <parseInputReport+0x20c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001170:	8a3b      	ldrh	r3, [r7, #16]
 8001172:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001176:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001178:	8a3b      	ldrh	r3, [r7, #16]
 800117a:	3b04      	subs	r3, #4
 800117c:	b29b      	uxth	r3, r3
 800117e:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8001180:	4b79      	ldr	r3, [pc, #484]	; (8001368 <parseInputReport+0x210>)
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	061b      	lsls	r3, r3, #24
 8001186:	4a78      	ldr	r2, [pc, #480]	; (8001368 <parseInputReport+0x210>)
 8001188:	78d2      	ldrb	r2, [r2, #3]
 800118a:	0412      	lsls	r2, r2, #16
 800118c:	4313      	orrs	r3, r2
 800118e:	4a76      	ldr	r2, [pc, #472]	; (8001368 <parseInputReport+0x210>)
 8001190:	7892      	ldrb	r2, [r2, #2]
 8001192:	0212      	lsls	r2, r2, #8
 8001194:	4313      	orrs	r3, r2
 8001196:	4a74      	ldr	r2, [pc, #464]	; (8001368 <parseInputReport+0x210>)
 8001198:	7852      	ldrb	r2, [r2, #1]
 800119a:	4313      	orrs	r3, r2
 800119c:	4a73      	ldr	r2, [pc, #460]	; (800136c <parseInputReport+0x214>)
 800119e:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80011a0:	4b71      	ldr	r3, [pc, #452]	; (8001368 <parseInputReport+0x210>)
 80011a2:	79db      	ldrb	r3, [r3, #7]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80011aa:	4b6f      	ldr	r3, [pc, #444]	; (8001368 <parseInputReport+0x210>)
 80011ac:	7a9b      	ldrb	r3, [r3, #10]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b6d      	ldr	r3, [pc, #436]	; (8001368 <parseInputReport+0x210>)
 80011b4:	7a5b      	ldrb	r3, [r3, #9]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80011be:	4b6a      	ldr	r3, [pc, #424]	; (8001368 <parseInputReport+0x210>)
 80011c0:	7b1b      	ldrb	r3, [r3, #12]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	4b68      	ldr	r3, [pc, #416]	; (8001368 <parseInputReport+0x210>)
 80011c8:	7adb      	ldrb	r3, [r3, #11]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80011d2:	4b65      	ldr	r3, [pc, #404]	; (8001368 <parseInputReport+0x210>)
 80011d4:	7b9b      	ldrb	r3, [r3, #14]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	4b63      	ldr	r3, [pc, #396]	; (8001368 <parseInputReport+0x210>)
 80011dc:	7b5b      	ldrb	r3, [r3, #13]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80011ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011f2:	2b0e      	cmp	r3, #14
 80011f4:	dd09      	ble.n	800120a <parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 80011f6:	4b5c      	ldr	r3, [pc, #368]	; (8001368 <parseInputReport+0x210>)
 80011f8:	7c1b      	ldrb	r3, [r3, #16]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b5a      	ldr	r3, [pc, #360]	; (8001368 <parseInputReport+0x210>)
 8001200:	7bdb      	ldrb	r3, [r3, #15]
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800120a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800120e:	2b10      	cmp	r3, #16
 8001210:	dd09      	ble.n	8001226 <parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001212:	4b55      	ldr	r3, [pc, #340]	; (8001368 <parseInputReport+0x210>)
 8001214:	7c9b      	ldrb	r3, [r3, #18]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b53      	ldr	r3, [pc, #332]	; (8001368 <parseInputReport+0x210>)
 800121c:	7c5b      	ldrb	r3, [r3, #17]
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b21b      	sxth	r3, r3
 8001224:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001226:	4b50      	ldr	r3, [pc, #320]	; (8001368 <parseInputReport+0x210>)
 8001228:	795b      	ldrb	r3, [r3, #5]
 800122a:	2b05      	cmp	r3, #5
 800122c:	d053      	beq.n	80012d6 <parseInputReport+0x17e>
 800122e:	2b05      	cmp	r3, #5
 8001230:	dc0b      	bgt.n	800124a <parseInputReport+0xf2>
 8001232:	2b02      	cmp	r3, #2
 8001234:	d033      	beq.n	800129e <parseInputReport+0x146>
 8001236:	2b02      	cmp	r3, #2
 8001238:	dc02      	bgt.n	8001240 <parseInputReport+0xe8>
 800123a:	2b01      	cmp	r3, #1
 800123c:	d013      	beq.n	8001266 <parseInputReport+0x10e>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800123e:	e08a      	b.n	8001356 <parseInputReport+0x1fe>
	switch(shtpData[5])
 8001240:	2b03      	cmp	r3, #3
 8001242:	d03a      	beq.n	80012ba <parseInputReport+0x162>
 8001244:	2b04      	cmp	r3, #4
 8001246:	d01c      	beq.n	8001282 <parseInputReport+0x12a>
}
 8001248:	e085      	b.n	8001356 <parseInputReport+0x1fe>
	switch(shtpData[5])
 800124a:	2b13      	cmp	r3, #19
 800124c:	d05b      	beq.n	8001306 <parseInputReport+0x1ae>
 800124e:	2b13      	cmp	r3, #19
 8001250:	dc04      	bgt.n	800125c <parseInputReport+0x104>
 8001252:	2b08      	cmp	r3, #8
 8001254:	d03f      	beq.n	80012d6 <parseInputReport+0x17e>
 8001256:	2b11      	cmp	r3, #17
 8001258:	d051      	beq.n	80012fe <parseInputReport+0x1a6>
}
 800125a:	e07c      	b.n	8001356 <parseInputReport+0x1fe>
	switch(shtpData[5])
 800125c:	2b1e      	cmp	r3, #30
 800125e:	d057      	beq.n	8001310 <parseInputReport+0x1b8>
 8001260:	2bf1      	cmp	r3, #241	; 0xf1
 8001262:	d06d      	beq.n	8001340 <parseInputReport+0x1e8>
}
 8001264:	e077      	b.n	8001356 <parseInputReport+0x1fe>
			accelAccuracy = status;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b41      	ldr	r3, [pc, #260]	; (8001370 <parseInputReport+0x218>)
 800126c:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 800126e:	4a41      	ldr	r2, [pc, #260]	; (8001374 <parseInputReport+0x21c>)
 8001270:	89bb      	ldrh	r3, [r7, #12]
 8001272:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001274:	4a40      	ldr	r2, [pc, #256]	; (8001378 <parseInputReport+0x220>)
 8001276:	897b      	ldrh	r3, [r7, #10]
 8001278:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 800127a:	4a40      	ldr	r2, [pc, #256]	; (800137c <parseInputReport+0x224>)
 800127c:	893b      	ldrh	r3, [r7, #8]
 800127e:	8013      	strh	r3, [r2, #0]
			break;
 8001280:	e069      	b.n	8001356 <parseInputReport+0x1fe>
			accelLinAccuracy = status;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <parseInputReport+0x228>)
 8001288:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800128a:	4a3e      	ldr	r2, [pc, #248]	; (8001384 <parseInputReport+0x22c>)
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001290:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <parseInputReport+0x230>)
 8001292:	897b      	ldrh	r3, [r7, #10]
 8001294:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8001296:	4a3d      	ldr	r2, [pc, #244]	; (800138c <parseInputReport+0x234>)
 8001298:	893b      	ldrh	r3, [r7, #8]
 800129a:	8013      	strh	r3, [r2, #0]
			break;
 800129c:	e05b      	b.n	8001356 <parseInputReport+0x1fe>
			gyroAccuracy = status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <parseInputReport+0x238>)
 80012a4:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 80012a6:	4a3b      	ldr	r2, [pc, #236]	; (8001394 <parseInputReport+0x23c>)
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 80012ac:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <parseInputReport+0x240>)
 80012ae:	897b      	ldrh	r3, [r7, #10]
 80012b0:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 80012b2:	4a3a      	ldr	r2, [pc, #232]	; (800139c <parseInputReport+0x244>)
 80012b4:	893b      	ldrh	r3, [r7, #8]
 80012b6:	8013      	strh	r3, [r2, #0]
			break;
 80012b8:	e04d      	b.n	8001356 <parseInputReport+0x1fe>
			magAccuracy = status;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <parseInputReport+0x248>)
 80012c0:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 80012c2:	4a38      	ldr	r2, [pc, #224]	; (80013a4 <parseInputReport+0x24c>)
 80012c4:	89bb      	ldrh	r3, [r7, #12]
 80012c6:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 80012c8:	4a37      	ldr	r2, [pc, #220]	; (80013a8 <parseInputReport+0x250>)
 80012ca:	897b      	ldrh	r3, [r7, #10]
 80012cc:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 80012ce:	4a37      	ldr	r2, [pc, #220]	; (80013ac <parseInputReport+0x254>)
 80012d0:	893b      	ldrh	r3, [r7, #8]
 80012d2:	8013      	strh	r3, [r2, #0]
			break;
 80012d4:	e03f      	b.n	8001356 <parseInputReport+0x1fe>
			quatAccuracy = status;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <parseInputReport+0x258>)
 80012dc:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 80012de:	4a35      	ldr	r2, [pc, #212]	; (80013b4 <parseInputReport+0x25c>)
 80012e0:	89bb      	ldrh	r3, [r7, #12]
 80012e2:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 80012e4:	4a34      	ldr	r2, [pc, #208]	; (80013b8 <parseInputReport+0x260>)
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80012ea:	4a34      	ldr	r2, [pc, #208]	; (80013bc <parseInputReport+0x264>)
 80012ec:	893b      	ldrh	r3, [r7, #8]
 80012ee:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80012f0:	4a33      	ldr	r2, [pc, #204]	; (80013c0 <parseInputReport+0x268>)
 80012f2:	8afb      	ldrh	r3, [r7, #22]
 80012f4:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <parseInputReport+0x26c>)
 80012f8:	8abb      	ldrh	r3, [r7, #20]
 80012fa:	8013      	strh	r3, [r2, #0]
			break;
 80012fc:	e02b      	b.n	8001356 <parseInputReport+0x1fe>
			stepCount = data3; //Bytes 8/9
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <parseInputReport+0x270>)
 8001300:	893b      	ldrh	r3, [r7, #8]
 8001302:	8013      	strh	r3, [r2, #0]
			break;
 8001304:	e027      	b.n	8001356 <parseInputReport+0x1fe>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <parseInputReport+0x210>)
 8001308:	7a5a      	ldrb	r2, [r3, #9]
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <parseInputReport+0x274>)
 800130c:	701a      	strb	r2, [r3, #0]
			break;
 800130e:	e022      	b.n	8001356 <parseInputReport+0x1fe>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <parseInputReport+0x210>)
 8001312:	7a9a      	ldrb	r2, [r3, #10]
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <parseInputReport+0x278>)
 8001316:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001318:	2300      	movs	r3, #0
 800131a:	74fb      	strb	r3, [r7, #19]
 800131c:	e00c      	b.n	8001338 <parseInputReport+0x1e0>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 800131e:	7cfb      	ldrb	r3, [r7, #19]
 8001320:	f103 020b 	add.w	r2, r3, #11
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <parseInputReport+0x27c>)
 8001326:	6819      	ldr	r1, [r3, #0]
 8001328:	7cfb      	ldrb	r3, [r7, #19]
 800132a:	440b      	add	r3, r1
 800132c:	490e      	ldr	r1, [pc, #56]	; (8001368 <parseInputReport+0x210>)
 800132e:	5c8a      	ldrb	r2, [r1, r2]
 8001330:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	3301      	adds	r3, #1
 8001336:	74fb      	strb	r3, [r7, #19]
 8001338:	7cfb      	ldrb	r3, [r7, #19]
 800133a:	2b08      	cmp	r3, #8
 800133c:	d9ef      	bls.n	800131e <parseInputReport+0x1c6>
			break;
 800133e:	e00a      	b.n	8001356 <parseInputReport+0x1fe>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <parseInputReport+0x210>)
 8001342:	79db      	ldrb	r3, [r3, #7]
 8001344:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b07      	cmp	r3, #7
 800134a:	d103      	bne.n	8001354 <parseInputReport+0x1fc>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <parseInputReport+0x210>)
 800134e:	7a9a      	ldrb	r2, [r3, #10]
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <parseInputReport+0x280>)
 8001352:	701a      	strb	r2, [r3, #0]
			break;
 8001354:	bf00      	nop
}
 8001356:	bf00      	nop
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000218 	.word	0x20000218
 8001368:	20000268 	.word	0x20000268
 800136c:	20000224 	.word	0x20000224
 8001370:	200002f0 	.word	0x200002f0
 8001374:	200002e8 	.word	0x200002e8
 8001378:	200002f2 	.word	0x200002f2
 800137c:	2000025a 	.word	0x2000025a
 8001380:	20000256 	.word	0x20000256
 8001384:	20000228 	.word	0x20000228
 8001388:	200002ec 	.word	0x200002ec
 800138c:	20000260 	.word	0x20000260
 8001390:	20000262 	.word	0x20000262
 8001394:	20000264 	.word	0x20000264
 8001398:	20000252 	.word	0x20000252
 800139c:	20000250 	.word	0x20000250
 80013a0:	2000021c 	.word	0x2000021c
 80013a4:	20000254 	.word	0x20000254
 80013a8:	200002ee 	.word	0x200002ee
 80013ac:	20000258 	.word	0x20000258
 80013b0:	200000aa 	.word	0x200000aa
 80013b4:	200000a0 	.word	0x200000a0
 80013b8:	200000a2 	.word	0x200000a2
 80013bc:	200000a4 	.word	0x200000a4
 80013c0:	200000a6 	.word	0x200000a6
 80013c4:	200000a8 	.word	0x200000a8
 80013c8:	200002f4 	.word	0x200002f4
 80013cc:	20000266 	.word	0x20000266
 80013d0:	200002ea 	.word	0x200002ea
 80013d4:	2000025c 	.word	0x2000025c
 80013d8:	200002eb 	.word	0x200002eb

080013dc <bno080_getQuatI>:

//Return the rotation vector quaternion I
float bno080_getQuatI(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatI, rotationVector_Q1);
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <bno080_getQuatI+0x24>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <bno080_getQuatI+0x28>)
 80013e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	4610      	mov	r0, r2
 80013f2:	f7ff fe6d 	bl	80010d0 <bno080_qToFloat>
 80013f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200000a0 	.word	0x200000a0
 8001404:	20000000 	.word	0x20000000

08001408 <bno080_getQuatJ>:

//Return the rotation vector quaternion J
float bno080_getQuatJ(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatJ, rotationVector_Q1);
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <bno080_getQuatJ+0x24>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <bno080_getQuatJ+0x28>)
 8001414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f7ff fe57 	bl	80010d0 <bno080_qToFloat>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
}
 8001426:	eeb0 0a67 	vmov.f32	s0, s15
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200000a2 	.word	0x200000a2
 8001430:	20000000 	.word	0x20000000

08001434 <bno080_getQuatK>:

//Return the rotation vector quaternion K
float bno080_getQuatK(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatK, rotationVector_Q1);
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <bno080_getQuatK+0x24>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b21a      	sxth	r2, r3
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <bno080_getQuatK+0x28>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4619      	mov	r1, r3
 8001448:	4610      	mov	r0, r2
 800144a:	f7ff fe41 	bl	80010d0 <bno080_qToFloat>
 800144e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001452:	eeb0 0a67 	vmov.f32	s0, s15
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200000a4 	.word	0x200000a4
 800145c:	20000000 	.word	0x20000000

08001460 <bno080_getQuatReal>:

//Return the rotation vector quaternion Real
float bno080_getQuatReal(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <bno080_getQuatReal+0x24>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <bno080_getQuatReal+0x28>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4619      	mov	r1, r3
 8001474:	4610      	mov	r0, r2
 8001476:	f7ff fe2b 	bl	80010d0 <bno080_qToFloat>
 800147a:	eef0 7a40 	vmov.f32	s15, s0
}
 800147e:	eeb0 0a67 	vmov.f32	s0, s15
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200000a6 	.word	0x200000a6
 8001488:	20000000 	.word	0x20000000

0800148c <bno080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float bno080_getQuatRadianAccuracy(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <bno080_getQuatRadianAccuracy+0x24>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	b21a      	sxth	r2, r3
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <bno080_getQuatRadianAccuracy+0x28>)
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	4610      	mov	r0, r2
 80014a2:	f7ff fe15 	bl	80010d0 <bno080_qToFloat>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80014aa:	eeb0 0a67 	vmov.f32	s0, s15
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200000a8 	.word	0x200000a8
 80014b4:	20000000 	.word	0x20000000

080014b8 <receivePacket_IT>:

	return 1;
}

uint8_t receivePacket_IT(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
	uint8_t incoming;

	BNO_SELECT;
 80014be:	2200      	movs	r2, #0
 80014c0:	2110      	movs	r1, #16
 80014c2:	483a      	ldr	r0, [pc, #232]	; (80015ac <receivePacket_IT+0xf4>)
 80014c4:	f002 f96a 	bl	800379c <HAL_GPIO_WritePin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = LL_SPI_SendByte(0);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f000 f875 	bl	80015b8 <LL_SPI_SendByte>
 80014ce:	4603      	mov	r3, r0
 80014d0:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = LL_SPI_SendByte(0);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 f870 	bl	80015b8 <LL_SPI_SendByte>
 80014d8:	4603      	mov	r3, r0
 80014da:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = LL_SPI_SendByte(0);
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 f86b 	bl	80015b8 <LL_SPI_SendByte>
 80014e2:	4603      	mov	r3, r0
 80014e4:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = LL_SPI_SendByte(0); //Not sure if we need to store this or not
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f866 	bl	80015b8 <LL_SPI_SendByte>
 80014ec:	4603      	mov	r3, r0
 80014ee:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80014f0:	4a2f      	ldr	r2, [pc, #188]	; (80015b0 <receivePacket_IT+0xf8>)
 80014f2:	7b7b      	ldrb	r3, [r7, #13]
 80014f4:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80014f6:	4a2e      	ldr	r2, [pc, #184]	; (80015b0 <receivePacket_IT+0xf8>)
 80014f8:	7b3b      	ldrb	r3, [r7, #12]
 80014fa:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80014fc:	4a2c      	ldr	r2, [pc, #176]	; (80015b0 <receivePacket_IT+0xf8>)
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001502:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <receivePacket_IT+0xf8>)
 8001504:	7abb      	ldrb	r3, [r7, #10]
 8001506:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001508:	7b3b      	ldrb	r3, [r7, #12]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	7b7b      	ldrb	r3, [r7, #13]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001516:	893b      	ldrh	r3, [r7, #8]
 8001518:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800151c:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 800151e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <receivePacket_IT+0x72>
	{
		//Packet is empty
		return 0; //All done
 8001526:	2300      	movs	r3, #0
 8001528:	e03c      	b.n	80015a4 <receivePacket_IT+0xec>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800152a:	893b      	ldrh	r3, [r7, #8]
 800152c:	3b04      	subs	r3, #4
 800152e:	b29b      	uxth	r3, r3
 8001530:	813b      	strh	r3, [r7, #8]
	//dataLength = 210;
	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001532:	2300      	movs	r3, #0
 8001534:	81fb      	strh	r3, [r7, #14]
 8001536:	e00e      	b.n	8001556 <receivePacket_IT+0x9e>
	{
		incoming = LL_SPI_SendByte(0xFF);
 8001538:	20ff      	movs	r0, #255	; 0xff
 800153a:	f000 f83d 	bl	80015b8 <LL_SPI_SendByte>
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	2b7f      	cmp	r3, #127	; 0x7f
 8001546:	d803      	bhi.n	8001550 <receivePacket_IT+0x98>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	491a      	ldr	r1, [pc, #104]	; (80015b4 <receivePacket_IT+0xfc>)
 800154c:	79fa      	ldrb	r2, [r7, #7]
 800154e:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	3301      	adds	r3, #1
 8001554:	81fb      	strh	r3, [r7, #14]
 8001556:	89fa      	ldrh	r2, [r7, #14]
 8001558:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbeb      	blt.n	8001538 <receivePacket_IT+0x80>
	}

	BNO_DESELECT;
 8001560:	2201      	movs	r2, #1
 8001562:	2110      	movs	r1, #16
 8001564:	4811      	ldr	r0, [pc, #68]	; (80015ac <receivePacket_IT+0xf4>)
 8001566:	f002 f919 	bl	800379c <HAL_GPIO_WritePin>

	//Check to see if this packet is a sensor reporting its data to us
	if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <receivePacket_IT+0xf8>)
 800156c:	789b      	ldrb	r3, [r3, #2]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d107      	bne.n	8001582 <receivePacket_IT+0xca>
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <receivePacket_IT+0xfc>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2bfb      	cmp	r3, #251	; 0xfb
 8001578:	d103      	bne.n	8001582 <receivePacket_IT+0xca>
	{
		parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800157a:	f7ff fded 	bl	8001158 <parseInputReport>
		return 1;
 800157e:	2301      	movs	r3, #1
 8001580:	e010      	b.n	80015a4 <receivePacket_IT+0xec>
	}
	else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <receivePacket_IT+0xf8>)
 8001584:	789b      	ldrb	r3, [r3, #2]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d103      	bne.n	8001592 <receivePacket_IT+0xda>
	{
		parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 800158a:	f7ff fdc9 	bl	8001120 <parseCommandReport>
		return 1;
 800158e:	2301      	movs	r3, #1
 8001590:	e008      	b.n	80015a4 <receivePacket_IT+0xec>
	}
	else if(shtpHeader[2] == CHANNEL_GYRO)
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <receivePacket_IT+0xf8>)
 8001594:	789b      	ldrb	r3, [r3, #2]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d103      	bne.n	80015a2 <receivePacket_IT+0xea>
	{
		parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800159a:	f7ff fddd 	bl	8001158 <parseInputReport>
		return 1;
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <receivePacket_IT+0xec>
	}


	return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020400 	.word	0x40020400
 80015b0:	20000218 	.word	0x20000218
 80015b4:	20000268 	.word	0x20000268

080015b8 <LL_SPI_SendByte>:

/*
 * SPI Send/Receive Byte
 * */
uint8_t LL_SPI_SendByte(uint8_t data)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO_SPI_CHANNEL)==RESET);
 80015c2:	bf00      	nop
 80015c4:	4810      	ldr	r0, [pc, #64]	; (8001608 <LL_SPI_SendByte+0x50>)
 80015c6:	f7ff fd3e 	bl	8001046 <LL_SPI_IsActiveFlag_TXE>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f9      	beq.n	80015c4 <LL_SPI_SendByte+0xc>
	LL_SPI_TransmitData8(BNO_SPI_CHANNEL, data);
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <LL_SPI_SendByte+0x50>)
 80015d6:	f7ff fd69 	bl	80010ac <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_BSY(BNO_SPI_CHANNEL) == SET);
 80015da:	bf00      	nop
 80015dc:	480a      	ldr	r0, [pc, #40]	; (8001608 <LL_SPI_SendByte+0x50>)
 80015de:	f7ff fd45 	bl	800106c <LL_SPI_IsActiveFlag_BSY>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d0f9      	beq.n	80015dc <LL_SPI_SendByte+0x24>

	while(LL_SPI_IsActiveFlag_RXNE(BNO_SPI_CHANNEL)==RESET);
 80015e8:	bf00      	nop
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <LL_SPI_SendByte+0x50>)
 80015ec:	f7ff fd18 	bl	8001020 <LL_SPI_IsActiveFlag_RXNE>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f9      	beq.n	80015ea <LL_SPI_SendByte+0x32>
	return LL_SPI_ReceiveData8(BNO_SPI_CHANNEL);
 80015f6:	4804      	ldr	r0, [pc, #16]	; (8001608 <LL_SPI_SendByte+0x50>)
 80015f8:	f7ff fd4b 	bl	8001092 <LL_SPI_ReceiveData8>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40003c00 	.word	0x40003c00

0800160c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BNO_INT_PIN_F){
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161c:	d127      	bne.n	800166e <HAL_GPIO_EXTI_Callback+0x62>
		receivePacket_IT();
 800161e:	f7ff ff4b 	bl	80014b8 <receivePacket_IT>
		q[0] = bno080_getQuatI();
 8001622:	f7ff fedb 	bl	80013dc <bno080_getQuatI>
 8001626:	eef0 7a40 	vmov.f32	s15, s0
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_GPIO_EXTI_Callback+0x6c>)
 800162c:	edc3 7a00 	vstr	s15, [r3]
		q[1] = bno080_getQuatJ();
 8001630:	f7ff feea 	bl	8001408 <bno080_getQuatJ>
 8001634:	eef0 7a40 	vmov.f32	s15, s0
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_GPIO_EXTI_Callback+0x6c>)
 800163a:	edc3 7a01 	vstr	s15, [r3, #4]
		q[2] = bno080_getQuatK();
 800163e:	f7ff fef9 	bl	8001434 <bno080_getQuatK>
 8001642:	eef0 7a40 	vmov.f32	s15, s0
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001648:	edc3 7a02 	vstr	s15, [r3, #8]
		q[3] = bno080_getQuatReal();
 800164c:	f7ff ff08 	bl	8001460 <bno080_getQuatReal>
 8001650:	eef0 7a40 	vmov.f32	s15, s0
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001656:	edc3 7a03 	vstr	s15, [r3, #12]
		quatRadianAccuracy = bno080_getQuatRadianAccuracy();
 800165a:	f7ff ff17 	bl	800148c <bno080_getQuatRadianAccuracy>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_GPIO_EXTI_Callback+0x70>)
 8001664:	edc3 7a00 	vstr	s15, [r3]
		Quaternion_Update(&q[0]);
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <HAL_GPIO_EXTI_Callback+0x6c>)
 800166a:	f7ff fb4b 	bl	8000d04 <Quaternion_Update>
	}
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000004 	.word	0x20000004
 800167c:	20000220 	.word	0x20000220

08001680 <_ZN5CGNSSC1Ev>:


class CGNSS
{
  public:
    CGNSS(){}
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_ZN8CSensorsC1Ev>:
};

class CSensors
{
public:
      CSensors() {}
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ffed 	bl	8001680 <_ZN5CGNSSC1Ev>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_Z10handleGNSSv>:
CSensors gnss_sensor;



void handleGNSS(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0c2      	sub	sp, #264	; 0x108
 80016b4:	af00      	add	r7, sp, #0
  uint8_t msgbuf[MAX_GNSS];
  int32_t msgcnt;
  msgcnt=readUBXpkt(msgbuf);
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f829 	bl	8001710 <_Z10readUBXpktPh>
 80016be:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

  if(msgcnt>0)
 80016c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	dd06      	ble.n	80016d8 <_Z10handleGNSSv+0x28>
  {
	EventsCommGNSS(msgbuf,msgcnt);
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 f80d 	bl	80016f0 <_Z14EventsCommGNSSPhl>
  }
  else if(msgcnt==-1)
  {
	initGNSSrx();
  }
}
 80016d6:	e006      	b.n	80016e6 <_Z10handleGNSSv+0x36>
  else if(msgcnt==-1)
 80016d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d101      	bne.n	80016e6 <_Z10handleGNSSv+0x36>
	initGNSSrx();
 80016e2:	f000 f86b 	bl	80017bc <_Z10initGNSSrxv>
}
 80016e6:	bf00      	nop
 80016e8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_Z14EventsCommGNSSPhl>:

void EventsCommGNSS(uint8_t *msgbuf, int32_t cnt)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	gnss_sensor.gnss.parseUBX(msgbuf,cnt);
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <_Z14EventsCommGNSSPhl+0x1c>)
 8001700:	f000 f996 	bl	8001a30 <_ZN5CGNSS8parseUBXEPhi>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200001b8 	.word	0x200001b8

08001710 <_Z10readUBXpktPh>:

int readUBXpkt(byte *retbuf)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	int i=0;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
	  if(GNSSrx.ctr<MAX_GNSS)
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <_Z10readUBXpktPh+0xa4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2bff      	cmp	r3, #255	; 0xff
 8001722:	dc38      	bgt.n	8001796 <_Z10readUBXpktPh+0x86>
	  {
	    if(addUBXpktByte(rxx,&(GNSSrx))>0)
 8001724:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <_Z10readUBXpktPh+0xa8>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4922      	ldr	r1, [pc, #136]	; (80017b4 <_Z10readUBXpktPh+0xa4>)
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f856 	bl	80017dc <_Z13addUBXpktBytehP7tGNSSrx>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfcc      	ite	gt
 8001736:	2301      	movgt	r3, #1
 8001738:	2300      	movle	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d02a      	beq.n	8001796 <_Z10readUBXpktPh+0x86>
	    {
	      GNSSrx.state=SM_UBX_BEFORE;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <_Z10readUBXpktPh+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
	      for(i=0;i<GNSSrx.ctr;i++) retbuf[i]=GNSSrx.buf[i];
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <_Z10readUBXpktPh+0xa4>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	da0c      	bge.n	800176e <_Z10readUBXpktPh+0x5e>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4916      	ldr	r1, [pc, #88]	; (80017b4 <_Z10readUBXpktPh+0xa4>)
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	440a      	add	r2, r1
 8001760:	3208      	adds	r2, #8
 8001762:	7812      	ldrb	r2, [r2, #0]
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3301      	adds	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e7ed      	b.n	800174a <_Z10readUBXpktPh+0x3a>
	      GNSSrx.ctr=0;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_Z10readUBXpktPh+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
	      if(checkUBX(retbuf,i)==0)
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f8fe 	bl	8001978 <_Z8checkUBXPhi>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf0c      	ite	eq
 8001782:	2301      	moveq	r3, #1
 8001784:	2300      	movne	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <_Z10readUBXpktPh+0x82>
	      {
	        return(i-2);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3b02      	subs	r3, #2
 8001790:	e00c      	b.n	80017ac <_Z10readUBXpktPh+0x9c>
	      }
	      else
	      {
	        return(0);
 8001792:	2300      	movs	r3, #0
 8001794:	e00a      	b.n	80017ac <_Z10readUBXpktPh+0x9c>
	      }
	    }
	  }
	  if(GNSSrx.ctr>=MAX_GNSS)
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <_Z10readUBXpktPh+0xa4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	dd05      	ble.n	80017aa <_Z10readUBXpktPh+0x9a>
	  {
	    GNSSrx.ctr=0;
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <_Z10readUBXpktPh+0xa4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
	    GNSSrx.state=SM_UBX_BEFORE;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <_Z10readUBXpktPh+0xa4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
	  }
	  return(0);
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200000b0 	.word	0x200000b0
 80017b8:	200000ac 	.word	0x200000ac

080017bc <_Z10initGNSSrxv>:

void initGNSSrx(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  GNSSrx.state = SM_UBX_BEFORE;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <_Z10initGNSSrxv+0x1c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
  GNSSrx.ctr = 0;
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <_Z10initGNSSrxv+0x1c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200000b0 	.word	0x200000b0

080017dc <_Z13addUBXpktBytehP7tGNSSrx>:

int addUBXpktByte(byte ch, tGNSSrx *pr)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
	switch(pr->state)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b09      	cmp	r3, #9
 80017ee:	f200 80a1 	bhi.w	8001934 <_Z13addUBXpktBytehP7tGNSSrx+0x158>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <_Z13addUBXpktBytehP7tGNSSrx+0x1c>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001821 	.word	0x08001821
 80017fc:	08001831 	.word	0x08001831
 8001800:	08001847 	.word	0x08001847
 8001804:	08001861 	.word	0x08001861
 8001808:	0800187b 	.word	0x0800187b
 800180c:	08001895 	.word	0x08001895
 8001810:	080018af 	.word	0x080018af
 8001814:	080018f9 	.word	0x080018f9
 8001818:	08001913 	.word	0x08001913
 800181c:	0800192d 	.word	0x0800192d
		{
		case SM_UBX_BEFORE:
			if(ch==UBX_SYN_CHAR1) pr->state=SM_UBX_SYN2;     //SYNCHAR1
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2bb5      	cmp	r3, #181	; 0xb5
 8001824:	f040 808a 	bne.w	800193c <_Z13addUBXpktBytehP7tGNSSrx+0x160>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
			break;
 800182e:	e085      	b.n	800193c <_Z13addUBXpktBytehP7tGNSSrx+0x160>
		case SM_UBX_SYN2:
			if(ch==UBX_SYN_CHAR2) pr->state=SM_UBX_CLASS;     //SYNCHAR2
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b62      	cmp	r3, #98	; 0x62
 8001834:	d103      	bne.n	800183e <_Z13addUBXpktBytehP7tGNSSrx+0x62>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2202      	movs	r2, #2
 800183a:	601a      	str	r2, [r3, #0]
			else pr->state=SM_UBX_BEFORE;
			break;
 800183c:	e081      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
			else pr->state=SM_UBX_BEFORE;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
			break;
 8001844:	e07d      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
		case SM_UBX_CLASS:
			pr->buf[pr->ctr++]=ch;          //CLASS
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	1c59      	adds	r1, r3, #1
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	6051      	str	r1, [r2, #4]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	79fa      	ldrb	r2, [r7, #7]
 8001856:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_ID;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2203      	movs	r2, #3
 800185c:	601a      	str	r2, [r3, #0]
			break;
 800185e:	e070      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
		case SM_UBX_ID:
			pr->buf[pr->ctr++]=ch;          //ID
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	1c59      	adds	r1, r3, #1
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	6051      	str	r1, [r2, #4]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	4413      	add	r3, r2
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_PAYLEN1;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2204      	movs	r2, #4
 8001876:	601a      	str	r2, [r3, #0]
			break;
 8001878:	e063      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
		case SM_UBX_PAYLEN1:
			pr->buf[pr->ctr++]=ch;          //PAYLOAD LENGTH1
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	1c59      	adds	r1, r3, #1
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	6051      	str	r1, [r2, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	79fa      	ldrb	r2, [r7, #7]
 800188a:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_PAYLEN2;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2205      	movs	r2, #5
 8001890:	601a      	str	r2, [r3, #0]
			break;
 8001892:	e056      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
		case SM_UBX_PAYLEN2:
			pr->buf[pr->ctr++]=ch;          //PAYLOAD LENGTH2
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	1c59      	adds	r1, r3, #1
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	6051      	str	r1, [r2, #4]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	79fa      	ldrb	r2, [r7, #7]
 80018a4:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_PAYLOAD;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2206      	movs	r2, #6
 80018aa:	601a      	str	r2, [r3, #0]
			break;
 80018ac:	e049      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
		case SM_UBX_PAYLOAD:
			pr->buf[pr->ctr++]=ch;          //PAYLOAD
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	1c59      	adds	r1, r3, #1
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	6051      	str	r1, [r2, #4]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	79fa      	ldrb	r2, [r7, #7]
 80018be:	721a      	strb	r2, [r3, #8]
			if(pr->ctr >= (bytesToShort((byte *)&(pr->buf[2])) + 4)) pr->state=SM_UBX_CHK1;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685c      	ldr	r4, [r3, #4]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	330a      	adds	r3, #10
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f9f7 	bl	8001cbc <_Z12bytesToShortPh>
 80018ce:	4603      	mov	r3, r0
 80018d0:	3304      	adds	r3, #4
 80018d2:	429c      	cmp	r4, r3
 80018d4:	bfac      	ite	ge
 80018d6:	2301      	movge	r3, #1
 80018d8:	2300      	movlt	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <_Z13addUBXpktBytehP7tGNSSrx+0x10c>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2207      	movs	r2, #7
 80018e4:	601a      	str	r2, [r3, #0]
			else if(pr->ctr >= (UART_BUF_SIZE-10)) pr->state=SM_UBX_ERR;
			break;
 80018e6:	e02b      	b.n	8001940 <_Z13addUBXpktBytehP7tGNSSrx+0x164>
			else if(pr->ctr >= (UART_BUF_SIZE-10)) pr->state=SM_UBX_ERR;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2bf5      	cmp	r3, #245	; 0xf5
 80018ee:	dd27      	ble.n	8001940 <_Z13addUBXpktBytehP7tGNSSrx+0x164>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2209      	movs	r2, #9
 80018f4:	601a      	str	r2, [r3, #0]
			break;
 80018f6:	e023      	b.n	8001940 <_Z13addUBXpktBytehP7tGNSSrx+0x164>
		case SM_UBX_CHK1:
			pr->buf[pr->ctr++]=ch;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	1c59      	adds	r1, r3, #1
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	6051      	str	r1, [r2, #4]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	79fa      	ldrb	r2, [r7, #7]
 8001908:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_CHK2;			//CHECKSUM1
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2208      	movs	r2, #8
 800190e:	601a      	str	r2, [r3, #0]
			break;
 8001910:	e017      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
		case SM_UBX_CHK2:
			pr->buf[pr->ctr++]=ch;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	1c59      	adds	r1, r3, #1
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	6051      	str	r1, [r2, #4]
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	4413      	add	r3, r2
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_END;			//CHECKSUM1
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	220a      	movs	r2, #10
 8001928:	601a      	str	r2, [r3, #0]
			break;
 800192a:	e00a      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
		case SM_UBX_ERR:
			pr->state=SM_UBX_BEFORE;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
			break;
 8001932:	e006      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
		default:
			pr->state=SM_UBX_ERR;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2209      	movs	r2, #9
 8001938:	601a      	str	r2, [r3, #0]
			break;
 800193a:	e002      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
			break;
 800193c:	bf00      	nop
 800193e:	e000      	b.n	8001942 <_Z13addUBXpktBytehP7tGNSSrx+0x166>
			break;
 8001940:	bf00      	nop
		}
		if(pr->state==SM_UBX_ERR || pr->state==SM_UBX_BEFORE)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b09      	cmp	r3, #9
 8001948:	d003      	beq.n	8001952 <_Z13addUBXpktBytehP7tGNSSrx+0x176>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <_Z13addUBXpktBytehP7tGNSSrx+0x17c>
		{
			return(-1);
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e00a      	b.n	800196e <_Z13addUBXpktBytehP7tGNSSrx+0x192>
		}
		else if(pr->state==SM_UBX_END)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b0a      	cmp	r3, #10
 800195e:	d105      	bne.n	800196c <_Z13addUBXpktBytehP7tGNSSrx+0x190>
		{
			pr->state=SM_UBX_BEFORE;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
			return(pr->ctr);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	e000      	b.n	800196e <_Z13addUBXpktBytehP7tGNSSrx+0x192>
		}
		else return(0);
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bd90      	pop	{r4, r7, pc}
 8001976:	bf00      	nop

08001978 <_Z8checkUBXPhi>:

int checkUBX(byte *buf, int cnt)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	byte cha=0, chb=0;
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	2300      	movs	r3, #0
 8001988:	73bb      	strb	r3, [r7, #14]

	crcUBX(buf,cnt-2,&cha,&chb);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	1e99      	subs	r1, r3, #2
 800198e:	f107 030e 	add.w	r3, r7, #14
 8001992:	f107 020f 	add.w	r2, r7, #15
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f818 	bl	80019cc <_Z6crcUBXPhiS_S_>
	if((cha == buf[cnt-2]) && (chb == buf[cnt-1])) return(0);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	3b02      	subs	r3, #2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d109      	bne.n	80019c0 <_Z8checkUBXPhi+0x48>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d101      	bne.n	80019c0 <_Z8checkUBXPhi+0x48>
 80019bc:	2300      	movs	r3, #0
 80019be:	e001      	b.n	80019c4 <_Z8checkUBXPhi+0x4c>
	return(-1);
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_Z6crcUBXPhiS_S_>:

void crcUBX(byte *buf, int cnt, byte *pcha, byte *pchb)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
	int i=0;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
	*pcha=0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
	*pchb=0;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
	for(i=0 ; i<cnt ; i++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	da15      	bge.n	8001a22 <_Z6crcUBXPhiS_S_+0x56>
	{
		(*pcha) = (byte)((*pcha) + buf[i]);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	440b      	add	r3, r1
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	701a      	strb	r2, [r3, #0]
		(*pchb) = (byte)((*pchb) + (*pcha));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	701a      	strb	r2, [r3, #0]
	for(i=0 ; i<cnt ; i++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e7e5      	b.n	80019ee <_Z6crcUBXPhiS_S_+0x22>
	}
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <_ZN5CGNSS8parseUBXEPhi>:

bool CGNSS::parseUBX(byte *buf, int cnt)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  bool ok = false;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	75fb      	strb	r3, [r7, #23]

  if(buf[0]==UBX_NAV)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	f040 80f5 	bne.w	8001c34 <_ZN5CGNSS8parseUBXEPhi+0x204>
  {
    if(buf[1]==UBX_NAV_PVT && cnt>=92)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	f040 809b 	bne.w	8001b8c <_ZN5CGNSS8parseUBXEPhi+0x15c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b5b      	cmp	r3, #91	; 0x5b
 8001a5a:	f340 8097 	ble.w	8001b8c <_ZN5CGNSS8parseUBXEPhi+0x15c>
    {
	  iTOW = bytesToLong(&(buf[4]));
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3304      	adds	r3, #4
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f906 	bl	8001c74 <_Z11bytesToLongPh>
 8001a68:	ee07 0a90 	vmov	s15, r0
 8001a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	  UTCyear = bytesToShort(&(buf[8]));
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3308      	adds	r3, #8
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f91e 	bl	8001cbc <_Z12bytesToShortPh>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
      UTCmonth = (int)buf[10];
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	330a      	adds	r3, #10
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
      UTCday = (int)buf[11];
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	330b      	adds	r3, #11
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
      UTChour = (int)buf[12];
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	330c      	adds	r3, #12
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	635a      	str	r2, [r3, #52]	; 0x34
      UTCminute = (int)buf[13];
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	330d      	adds	r3, #13
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	639a      	str	r2, [r3, #56]	; 0x38
      UTCsecond = (int)buf[14];
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	330e      	adds	r3, #14
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	63da      	str	r2, [r3, #60]	; 0x3c
	  fixType = (int)buf[24];
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	3318      	adds	r3, #24
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	619a      	str	r2, [r3, #24]
	  hAcc = bytesToLong(&(buf[44]));
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	332c      	adds	r3, #44	; 0x2c
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f8cd 	bl	8001c74 <_Z11bytesToLongPh>
 8001ada:	ee07 0a90 	vmov	s15, r0
 8001ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	edc3 7a07 	vstr	s15, [r3, #28]
	  vAcc = bytesToLong(&(buf[48]));
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3330      	adds	r3, #48	; 0x30
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f8c1 	bl	8001c74 <_Z11bytesToLongPh>
 8001af2:	ee07 0a90 	vmov	s15, r0
 8001af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	edc3 7a08 	vstr	s15, [r3, #32]
      pos.lon = bytesToLong(&(buf[28]))*1.0e-7;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	331c      	adds	r3, #28
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f8b5 	bl	8001c74 <_Z11bytesToLongPh>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fcad 	bl	800046c <__aeabi_i2d>
 8001b12:	a356      	add	r3, pc, #344	; (adr r3, 8001c6c <_ZN5CGNSS8parseUBXEPhi+0x23c>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fd12 	bl	8000540 <__aeabi_dmul>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	4618      	mov	r0, r3
 8001b22:	4621      	mov	r1, r4
 8001b24:	f7fe ff1e 	bl	8000964 <__aeabi_d2f>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	605a      	str	r2, [r3, #4]
	  pos.lat = bytesToLong(&(buf[32]))*1.0e-7;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3320      	adds	r3, #32
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f89e 	bl	8001c74 <_Z11bytesToLongPh>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fc96 	bl	800046c <__aeabi_i2d>
 8001b40:	a34a      	add	r3, pc, #296	; (adr r3, 8001c6c <_ZN5CGNSS8parseUBXEPhi+0x23c>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fcfb 	bl	8000540 <__aeabi_dmul>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	4621      	mov	r1, r4
 8001b52:	f7fe ff07 	bl	8000964 <__aeabi_d2f>
 8001b56:	4602      	mov	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	601a      	str	r2, [r3, #0]
	  pos.alt = bytesToLong(&(buf[36]))*1.0e-7;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	3324      	adds	r3, #36	; 0x24
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f887 	bl	8001c74 <_Z11bytesToLongPh>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fc7f 	bl	800046c <__aeabi_i2d>
 8001b6e:	a33f      	add	r3, pc, #252	; (adr r3, 8001c6c <_ZN5CGNSS8parseUBXEPhi+0x23c>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fce4 	bl	8000540 <__aeabi_dmul>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	460c      	mov	r4, r1
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	4621      	mov	r1, r4
 8001b80:	f7fe fef0 	bl	8000964 <__aeabi_d2f>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	e068      	b.n	8001c5e <_ZN5CGNSS8parseUBXEPhi+0x22e>
    }
    else if(buf[1]==UBX_NAV_RELPOSNED && cnt>=40)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b3c      	cmp	r3, #60	; 0x3c
 8001b94:	d163      	bne.n	8001c5e <_ZN5CGNSS8parseUBXEPhi+0x22e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b27      	cmp	r3, #39	; 0x27
 8001b9a:	dd60      	ble.n	8001c5e <_ZN5CGNSS8parseUBXEPhi+0x22e>
    {
	  relPos.N = bytesToLong(&(buf[12]))+0.01f*(float)buf[24];
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	330c      	adds	r3, #12
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 f867 	bl	8001c74 <_Z11bytesToLongPh>
 8001ba6:	ee07 0a90 	vmov	s15, r0
 8001baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3318      	adds	r3, #24
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bbc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001c68 <_ZN5CGNSS8parseUBXEPhi+0x238>
 8001bc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	edc3 7a03 	vstr	s15, [r3, #12]
	  relPos.E = bytesToLong(&(buf[16]))+0.01f*(float)buf[25];
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3310      	adds	r3, #16
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f84e 	bl	8001c74 <_Z11bytesToLongPh>
 8001bd8:	ee07 0a90 	vmov	s15, r0
 8001bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3319      	adds	r3, #25
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	ee07 3a90 	vmov	s15, r3
 8001bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bee:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001c68 <_ZN5CGNSS8parseUBXEPhi+0x238>
 8001bf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	edc3 7a04 	vstr	s15, [r3, #16]
	  relPos.D = bytesToLong(&(buf[20]))+0.01f*(float)buf[26];
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	3314      	adds	r3, #20
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f835 	bl	8001c74 <_Z11bytesToLongPh>
 8001c0a:	ee07 0a90 	vmov	s15, r0
 8001c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	331a      	adds	r3, #26
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c20:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001c68 <_ZN5CGNSS8parseUBXEPhi+0x238>
 8001c24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	edc3 7a05 	vstr	s15, [r3, #20]
 8001c32:	e014      	b.n	8001c5e <_ZN5CGNSS8parseUBXEPhi+0x22e>
    }
  }
  else if(buf[0]==UBX_MON)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b0a      	cmp	r3, #10
 8001c3a:	d110      	bne.n	8001c5e <_ZN5CGNSS8parseUBXEPhi+0x22e>
  {
	if(buf[1]==UBX_MON_MSGPP && cnt>=120)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d10b      	bne.n	8001c5e <_ZN5CGNSS8parseUBXEPhi+0x22e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b77      	cmp	r3, #119	; 0x77
 8001c4a:	dd08      	ble.n	8001c5e <_ZN5CGNSS8parseUBXEPhi+0x22e>
    {
	  msgs = bytesToShort(&(buf[46]));
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	332e      	adds	r3, #46	; 0x2e
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f833 	bl	8001cbc <_Z12bytesToShortPh>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  return ok;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}
 8001c68:	3c23d70a 	.word	0x3c23d70a
 8001c6c:	9abcaf48 	.word	0x9abcaf48
 8001c70:	3e7ad7f2 	.word	0x3e7ad7f2

08001c74 <_Z11bytesToLongPh>:

int32_t bytesToLong(uint8_t *b)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	int8_t i;
	mlong x;
	for(i=0 ; i<4 ; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	dc12      	bgt.n	8001cae <_Z11bytesToLongPh+0x3a>
	{
		x.b[i] = b[i];
 8001c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	441a      	add	r2, r3
 8001c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	f107 0110 	add.w	r1, r7, #16
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0 ; i<4 ; i++)
 8001ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e7e8      	b.n	8001c80 <_Z11bytesToLongPh+0xc>
	}
	return(x.i);
 8001cae:	68bb      	ldr	r3, [r7, #8]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_Z12bytesToShortPh>:

int16_t bytesToShort(uint8_t *b)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	mshort x;
	x.b[1] = b[1];
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b25b      	sxtb	r3, r3
 8001ccc:	737b      	strb	r3, [r7, #13]
	x.b[0] = b[0];
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	733b      	strb	r3, [r7, #12]
	return(x.i);
 8001cd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <_Z41__static_initialization_and_destruction_0ii>:
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d107      	bne.n	8001d08 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d102      	bne.n	8001d08 <_Z41__static_initialization_and_destruction_0ii+0x20>
CSensors gnss_sensor;
 8001d02:	4803      	ldr	r0, [pc, #12]	; (8001d10 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001d04:	f7ff fcc7 	bl	8001696 <_ZN8CSensorsC1Ev>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200001b8 	.word	0x200001b8

08001d14 <_GLOBAL__sub_I_rxString>:
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7ff ffe3 	bl	8001ce8 <_Z41__static_initialization_and_destruction_0ii>
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <newCSensors>:
CGNSS* newCGNSS(){

	return new CGNSS();
}

CSensors* newCSensors(){
 8001d24:	b598      	push	{r3, r4, r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	return new CSensors();
 8001d28:	2044      	movs	r0, #68	; 0x44
 8001d2a:	f003 fb56 	bl	80053da <_Znwj>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461c      	mov	r4, r3
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff fcaf 	bl	8001696 <_ZN8CSensorsC1Ev>
 8001d38:	4623      	mov	r3, r4
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd98      	pop	{r3, r4, r7, pc}

08001d3e <handleGNSS_c>:

void handleGNSS_c(void){
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
	handleGNSS();
 8001d42:	f7ff fcb5 	bl	80016b0 <_Z10handleGNSSv>
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <MX_DMA_Init+0x78>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <MX_DMA_Init+0x78>)
 8001d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <MX_DMA_Init+0x78>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_DMA_Init+0x78>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <MX_DMA_Init+0x78>)
 8001d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_DMA_Init+0x78>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2010      	movs	r0, #16
 8001d90:	f000 ffa3 	bl	8002cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d94:	2010      	movs	r0, #16
 8001d96:	f000 ffbc 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2038      	movs	r0, #56	; 0x38
 8001da0:	f000 ff9b 	bl	8002cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001da4:	2038      	movs	r0, #56	; 0x38
 8001da6:	f000 ffb4 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	203b      	movs	r0, #59	; 0x3b
 8001db0:	f000 ff93 	bl	8002cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001db4:	203b      	movs	r0, #59	; 0x3b
 8001db6:	f000 ffac 	bl	8002d12 <HAL_NVIC_EnableIRQ>

}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a6e      	ldr	r2, [pc, #440]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a67      	ldr	r2, [pc, #412]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a60      	ldr	r2, [pc, #384]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a59      	ldr	r2, [pc, #356]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <MX_GPIO_Init+0x1d8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8001e54:	4853      	ldr	r0, [pc, #332]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e56:	f001 fca1 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RPI_INT_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001e60:	4851      	ldr	r0, [pc, #324]	; (8001fa8 <MX_GPIO_Init+0x1e0>)
 8001e62:	f001 fc9b 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	484f      	ldr	r0, [pc, #316]	; (8001fa8 <MX_GPIO_Init+0x1e0>)
 8001e6c:	f001 fc96 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e76:	484d      	ldr	r0, [pc, #308]	; (8001fac <MX_GPIO_Init+0x1e4>)
 8001e78:	f001 fc90 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e82:	484a      	ldr	r0, [pc, #296]	; (8001fac <MX_GPIO_Init+0x1e4>)
 8001e84:	f001 fc8a 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_CS_Pin|BNO_RST_Pin, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2130      	movs	r1, #48	; 0x30
 8001e8c:	4845      	ldr	r0, [pc, #276]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e8e:	f001 fc85 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 8001e92:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	483e      	ldr	r0, [pc, #248]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001eac:	f001 fadc 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4836      	ldr	r0, [pc, #216]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001eca:	f001 facd 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPI_INT_Pin;
 8001ece:	2340      	movs	r3, #64	; 0x40
 8001ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RPI_INT_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4830      	ldr	r0, [pc, #192]	; (8001fa8 <MX_GPIO_Init+0x1e0>)
 8001ee6:	f001 fabf 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4829      	ldr	r0, [pc, #164]	; (8001fa8 <MX_GPIO_Init+0x1e0>)
 8001f02:	f001 fab1 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4822      	ldr	r0, [pc, #136]	; (8001fa8 <MX_GPIO_Init+0x1e0>)
 8001f20:	f001 faa2 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	481b      	ldr	r0, [pc, #108]	; (8001fac <MX_GPIO_Init+0x1e4>)
 8001f3e:	f001 fa93 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4814      	ldr	r0, [pc, #80]	; (8001fac <MX_GPIO_Init+0x1e4>)
 8001f5c:	f001 fa84 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MX_GPIO_Init+0x1e8>)
 8001f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <MX_GPIO_Init+0x1e0>)
 8001f76:	f001 fa77 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BNO_CS_Pin|BNO_RST_Pin;
 8001f7a:	2330      	movs	r3, #48	; 0x30
 8001f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001f92:	f001 fa69 	bl	8003468 <HAL_GPIO_Init>

}
 8001f96:	bf00      	nop
 8001f98:	3728      	adds	r7, #40	; 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	10110000 	.word	0x10110000

08001fb4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <MX_I2C1_Init+0x50>)
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <MX_I2C1_Init+0x54>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_I2C1_Init+0x50>)
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <MX_I2C1_Init+0x58>)
 8001fc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <MX_I2C1_Init+0x50>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_I2C1_Init+0x50>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_I2C1_Init+0x50>)
 8001fd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <MX_I2C1_Init+0x50>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_I2C1_Init+0x50>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <MX_I2C1_Init+0x50>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_I2C1_Init+0x50>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <MX_I2C1_Init+0x50>)
 8001ff2:	f001 fc05 	bl	8003800 <HAL_I2C_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ffc:	f000 f916 	bl	800222c <Error_Handler>
  }

}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200002f8 	.word	0x200002f8
 8002008:	40005400 	.word	0x40005400
 800200c:	000186a0 	.word	0x000186a0

08002010 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <HAL_I2C_MspInit+0x84>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d12b      	bne.n	800208a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_I2C_MspInit+0x88>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a17      	ldr	r2, [pc, #92]	; (8002098 <HAL_I2C_MspInit+0x88>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_I2C_MspInit+0x88>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204e:	23c0      	movs	r3, #192	; 0xc0
 8002050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002052:	2312      	movs	r3, #18
 8002054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002056:	2301      	movs	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800205e:	2304      	movs	r3, #4
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <HAL_I2C_MspInit+0x8c>)
 800206a:	f001 f9fd 	bl	8003468 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_I2C_MspInit+0x88>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a08      	ldr	r2, [pc, #32]	; (8002098 <HAL_I2C_MspInit+0x88>)
 8002078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_I2C_MspInit+0x88>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40005400 	.word	0x40005400
 8002098:	40023800 	.word	0x40023800
 800209c:	40020400 	.word	0x40020400

080020a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020a4:	f000 fccc 	bl	8002a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020a8:	f000 f822 	bl	80020f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ac:	f7ff fe8c 	bl	8001dc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80020b0:	f7ff fe4c 	bl	8001d4c <MX_DMA_Init>
  MX_SPI3_Init();
 80020b4:	f000 f9a0 	bl	80023f8 <MX_SPI3_Init>
  //MX_UART4_Init();
  MX_I2C1_Init();
 80020b8:	f7ff ff7c 	bl	8001fb4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80020bc:	f000 f932 	bl	8002324 <MX_SPI2_Init>
  MX_SPI1_Init();
 80020c0:	f000 f8fe 	bl	80022c0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80020c4:	f000 fbba 	bl	800283c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80020c8:	f000 f87c 	bl	80021c4 <MX_NVIC_Init>
  bno080_enableRotationVector(19000); //enable rotation vector at 200Hz
  HAL_Delay(20);
  bno080_start_IT();
   */
  // RTK
  sensorRTK = newCSensors();
 80020cc:	f7ff fe2a 	bl	8001d24 <newCSensors>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <main+0x44>)
 80020d4:	601a      	str	r2, [r3, #0]
  //sensorRTK = copy_struct(); // Tukaj se nahajajo vsi podatki
  HAL_UART_Receive_DMA(&huart2, &rxx, 1);
 80020d6:	2201      	movs	r2, #1
 80020d8:	4903      	ldr	r1, [pc, #12]	; (80020e8 <main+0x48>)
 80020da:	4804      	ldr	r0, [pc, #16]	; (80020ec <main+0x4c>)
 80020dc:	f002 fad4 	bl	8004688 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <main+0x40>
 80020e2:	bf00      	nop
 80020e4:	2000034c 	.word	0x2000034c
 80020e8:	200000ac 	.word	0x200000ac
 80020ec:	20000520 	.word	0x20000520

080020f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b094      	sub	sp, #80	; 0x50
 80020f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f6:	f107 0320 	add.w	r3, r7, #32
 80020fa:	2230      	movs	r2, #48	; 0x30
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 f992 	bl	8006428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <SystemClock_Config+0xcc>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	4a27      	ldr	r2, [pc, #156]	; (80021bc <SystemClock_Config+0xcc>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002122:	6413      	str	r3, [r2, #64]	; 0x40
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <SystemClock_Config+0xcc>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <SystemClock_Config+0xd0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <SystemClock_Config+0xd0>)
 800213a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <SystemClock_Config+0xd0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800214c:	2301      	movs	r3, #1
 800214e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002156:	2302      	movs	r3, #2
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800215a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002160:	2306      	movs	r3, #6
 8002162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002164:	23a8      	movs	r3, #168	; 0xa8
 8002166:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002168:	2302      	movs	r3, #2
 800216a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800216c:	2304      	movs	r3, #4
 800216e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002170:	f107 0320 	add.w	r3, r7, #32
 8002174:	4618      	mov	r0, r3
 8002176:	f001 fc7b 	bl	8003a70 <HAL_RCC_OscConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002180:	f000 f854 	bl	800222c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002184:	230f      	movs	r3, #15
 8002186:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002188:	2302      	movs	r3, #2
 800218a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002190:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002194:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2105      	movs	r1, #5
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 fed4 	bl	8003f50 <HAL_RCC_ClockConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021ae:	f000 f83d 	bl	800222c <Error_Handler>
  }
}
 80021b2:	bf00      	nop
 80021b4:	3750      	adds	r7, #80	; 0x50
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000

080021c4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	2028      	movs	r0, #40	; 0x28
 80021ce:	f000 fd84 	bl	8002cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021d2:	2028      	movs	r0, #40	; 0x28
 80021d4:	f000 fd9d 	bl	8002d12 <HAL_NVIC_EnableIRQ>
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)		//GNSS
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_UART_RxCpltCallback+0x1c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d101      	bne.n	80021f0 <HAL_UART_RxCpltCallback+0x14>
	{
		handleGNSS_c();
 80021ec:	f7ff fda7 	bl	8001d3e <handleGNSS_c>
	}
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000520 	.word	0x20000520

080021fc <HAL_UART_RxHalfCpltCallback>:


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	int a = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	int a = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_SPI_SetStandard>:
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 0210 	bic.w	r2, r3, #16
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	605a      	str	r2, [r3, #4]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800226a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4313      	orrs	r3, r2
 8002272:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800227e:	68fb      	ldr	r3, [r7, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	40023800 	.word	0x40023800

08002290 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800229a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800229c:	4907      	ldr	r1, [pc, #28]	; (80022bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80022a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40023800 	.word	0x40023800

080022c0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_SPI1_Init+0x5c>)
 80022c6:	4a16      	ldr	r2, [pc, #88]	; (8002320 <MX_SPI1_Init+0x60>)
 80022c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_SPI1_Init+0x5c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <MX_SPI1_Init+0x5c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_SPI1_Init+0x5c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_SPI1_Init+0x5c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MX_SPI1_Init+0x5c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <MX_SPI1_Init+0x5c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <MX_SPI1_Init+0x5c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <MX_SPI1_Init+0x5c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <MX_SPI1_Init+0x5c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <MX_SPI1_Init+0x5c>)
 8002302:	220a      	movs	r2, #10
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_SPI1_Init+0x5c>)
 8002308:	f001 ffee 	bl	80042e8 <HAL_SPI_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8002312:	f7ff ff8b 	bl	800222c <Error_Handler>
  }

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000368 	.word	0x20000368
 8002320:	40013000 	.word	0x40013000

08002324 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b090      	sub	sp, #64	; 0x40
 8002328:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800232a:	f107 0318 	add.w	r3, r7, #24
 800232e:	2228      	movs	r2, #40	; 0x28
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f004 f878 	bl	8006428 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	463b      	mov	r3, r7
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
 8002346:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002348:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800234c:	f7ff ffa0 	bl	8002290 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002350:	2004      	movs	r0, #4
 8002352:	f7ff ff85 	bl	8002260 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002356:	2002      	movs	r0, #2
 8002358:	f7ff ff82 	bl	8002260 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800235c:	230c      	movs	r3, #12
 800235e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002360:	2302      	movs	r3, #2
 8002362:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002370:	2305      	movs	r3, #5
 8002372:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002374:	463b      	mov	r3, r7
 8002376:	4619      	mov	r1, r3
 8002378:	481c      	ldr	r0, [pc, #112]	; (80023ec <MX_SPI2_Init+0xc8>)
 800237a:	f002 ff46 	bl	800520a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800237e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002382:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002384:	2302      	movs	r3, #2
 8002386:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002394:	2305      	movs	r3, #5
 8002396:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002398:	463b      	mov	r3, r7
 800239a:	4619      	mov	r1, r3
 800239c:	4814      	ldr	r0, [pc, #80]	; (80023f0 <MX_SPI2_Init+0xcc>)
 800239e:	f002 ff34 	bl	800520a <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80023a6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80023aa:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80023b0:	2302      	movs	r3, #2
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80023b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80023be:	2318      	movs	r3, #24
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80023ca:	230a      	movs	r3, #10
 80023cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80023ce:	f107 0318 	add.w	r3, r7, #24
 80023d2:	4619      	mov	r1, r3
 80023d4:	4807      	ldr	r0, [pc, #28]	; (80023f4 <MX_SPI2_Init+0xd0>)
 80023d6:	f002 ffae 	bl	8005336 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80023da:	2100      	movs	r1, #0
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_SPI2_Init+0xd0>)
 80023de:	f7ff ff2c 	bl	800223a <LL_SPI_SetStandard>

}
 80023e2:	bf00      	nop
 80023e4:	3740      	adds	r7, #64	; 0x40
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40003800 	.word	0x40003800

080023f8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b090      	sub	sp, #64	; 0x40
 80023fc:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80023fe:	f107 0318 	add.w	r3, r7, #24
 8002402:	2228      	movs	r2, #40	; 0x28
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f004 f80e 	bl	8006428 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	463b      	mov	r3, r7
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]
 800241a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800241c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002420:	f7ff ff36 	bl	8002290 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002424:	2004      	movs	r0, #4
 8002426:	f7ff ff1b 	bl	8002260 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800242a:	2002      	movs	r0, #2
 800242c:	f7ff ff18 	bl	8002260 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  PB3   ------> SPI3_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8002430:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002434:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002436:	2302      	movs	r3, #2
 8002438:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002446:	2306      	movs	r3, #6
 8002448:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244a:	463b      	mov	r3, r7
 800244c:	4619      	mov	r1, r3
 800244e:	481c      	ldr	r0, [pc, #112]	; (80024c0 <MX_SPI3_Init+0xc8>)
 8002450:	f002 fedb 	bl	800520a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002454:	2308      	movs	r3, #8
 8002456:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002458:	2302      	movs	r3, #2
 800245a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002468:	2306      	movs	r3, #6
 800246a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246c:	463b      	mov	r3, r7
 800246e:	4619      	mov	r1, r3
 8002470:	4814      	ldr	r0, [pc, #80]	; (80024c4 <MX_SPI3_Init+0xcc>)
 8002472:	f002 feca 	bl	800520a <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800247a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800247e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002480:	2300      	movs	r3, #0
 8002482:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002484:	2302      	movs	r3, #2
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002488:	2301      	movs	r3, #1
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800248c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002492:	2318      	movs	r3, #24
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800249e:	230a      	movs	r3, #10
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80024a2:	f107 0318 	add.w	r3, r7, #24
 80024a6:	4619      	mov	r1, r3
 80024a8:	4807      	ldr	r0, [pc, #28]	; (80024c8 <MX_SPI3_Init+0xd0>)
 80024aa:	f002 ff44 	bl	8005336 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80024ae:	2100      	movs	r1, #0
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_SPI3_Init+0xd0>)
 80024b2:	f7ff fec2 	bl	800223a <LL_SPI_SetStandard>

}
 80024b6:	bf00      	nop
 80024b8:	3740      	adds	r7, #64	; 0x40
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40003c00 	.word	0x40003c00

080024cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a53      	ldr	r2, [pc, #332]	; (8002638 <HAL_SPI_MspInit+0x16c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	f040 80a0 	bne.w	8002630 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_SPI_MspInit+0x170>)
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	4a50      	ldr	r2, [pc, #320]	; (800263c <HAL_SPI_MspInit+0x170>)
 80024fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002500:	4b4e      	ldr	r3, [pc, #312]	; (800263c <HAL_SPI_MspInit+0x170>)
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	4b4a      	ldr	r3, [pc, #296]	; (800263c <HAL_SPI_MspInit+0x170>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	4a49      	ldr	r2, [pc, #292]	; (800263c <HAL_SPI_MspInit+0x170>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6313      	str	r3, [r2, #48]	; 0x30
 800251c:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_SPI_MspInit+0x170>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002528:	2310      	movs	r3, #16
 800252a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002530:	2301      	movs	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002534:	2303      	movs	r3, #3
 8002536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002538:	2305      	movs	r3, #5
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4619      	mov	r1, r3
 8002542:	483f      	ldr	r0, [pc, #252]	; (8002640 <HAL_SPI_MspInit+0x174>)
 8002544:	f000 ff90 	bl	8003468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002548:	23e0      	movs	r3, #224	; 0xe0
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002550:	2302      	movs	r3, #2
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002558:	2305      	movs	r3, #5
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4619      	mov	r1, r3
 8002562:	4837      	ldr	r0, [pc, #220]	; (8002640 <HAL_SPI_MspInit+0x174>)
 8002564:	f000 ff80 	bl	8003468 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_SPI_MspInit+0x178>)
 800256a:	4a37      	ldr	r2, [pc, #220]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 800256c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800256e:	4b35      	ldr	r3, [pc, #212]	; (8002644 <HAL_SPI_MspInit+0x178>)
 8002570:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002574:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002576:	4b33      	ldr	r3, [pc, #204]	; (8002644 <HAL_SPI_MspInit+0x178>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_SPI_MspInit+0x178>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <HAL_SPI_MspInit+0x178>)
 8002584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002588:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800258a:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <HAL_SPI_MspInit+0x178>)
 800258c:	2200      	movs	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002590:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_SPI_MspInit+0x178>)
 8002592:	2200      	movs	r2, #0
 8002594:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002596:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <HAL_SPI_MspInit+0x178>)
 8002598:	2200      	movs	r2, #0
 800259a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_SPI_MspInit+0x178>)
 800259e:	2200      	movs	r2, #0
 80025a0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_SPI_MspInit+0x178>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80025a8:	4826      	ldr	r0, [pc, #152]	; (8002644 <HAL_SPI_MspInit+0x178>)
 80025aa:	f000 fbcd 	bl	8002d48 <HAL_DMA_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 80025b4:	f7ff fe3a 	bl	800222c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a22      	ldr	r2, [pc, #136]	; (8002644 <HAL_SPI_MspInit+0x178>)
 80025bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80025be:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_SPI_MspInit+0x178>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <HAL_SPI_MspInit+0x180>)
 80025c6:	4a22      	ldr	r2, [pc, #136]	; (8002650 <HAL_SPI_MspInit+0x184>)
 80025c8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_SPI_MspInit+0x180>)
 80025cc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80025d0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_SPI_MspInit+0x180>)
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <HAL_SPI_MspInit+0x180>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_SPI_MspInit+0x180>)
 80025e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_SPI_MspInit+0x180>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_SPI_MspInit+0x180>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_SPI_MspInit+0x180>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <HAL_SPI_MspInit+0x180>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_SPI_MspInit+0x180>)
 8002600:	2200      	movs	r2, #0
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002604:	4811      	ldr	r0, [pc, #68]	; (800264c <HAL_SPI_MspInit+0x180>)
 8002606:	f000 fb9f 	bl	8002d48 <HAL_DMA_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8002610:	f7ff fe0c 	bl	800222c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <HAL_SPI_MspInit+0x180>)
 8002618:	649a      	str	r2, [r3, #72]	; 0x48
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <HAL_SPI_MspInit+0x180>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	2023      	movs	r0, #35	; 0x23
 8002626:	f000 fb58 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800262a:	2023      	movs	r0, #35	; 0x23
 800262c:	f000 fb71 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	; 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40013000 	.word	0x40013000
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000
 8002644:	200003c0 	.word	0x200003c0
 8002648:	40026410 	.word	0x40026410
 800264c:	20000420 	.word	0x20000420
 8002650:	40026458 	.word	0x40026458

08002654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_MspInit+0x4c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <HAL_MspInit+0x4c>)
 8002664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <HAL_MspInit+0x4c>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_MspInit+0x4c>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <HAL_MspInit+0x4c>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_MspInit+0x4c>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800

080026a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <HardFault_Handler+0x4>

080026b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <MemManage_Handler+0x4>

080026be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <BusFault_Handler+0x4>

080026c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <UsageFault_Handler+0x4>

080026ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f8:	f000 f9f4 	bl	8002ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <DMA1_Stream5_IRQHandler+0x10>)
 8002706:	f000 fc47 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000480 	.word	0x20000480

08002714 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <SPI1_IRQHandler+0x10>)
 800271a:	f001 fe49 	bl	80043b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000368 	.word	0x20000368

08002728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800272c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002730:	f001 f84e 	bl	80037d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}

08002738 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <DMA2_Stream0_IRQHandler+0x10>)
 800273e:	f000 fc2b 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200003c0 	.word	0x200003c0

0800274c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <DMA2_Stream3_IRQHandler+0x10>)
 8002752:	f000 fc21 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000420 	.word	0x20000420

08002760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
	return 1;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_kill>:

int _kill(int pid, int sig)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800277a:	f003 fe23 	bl	80063c4 <__errno>
 800277e:	4602      	mov	r2, r0
 8002780:	2316      	movs	r3, #22
 8002782:	6013      	str	r3, [r2, #0]
	return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_exit>:

void _exit (int status)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ffe7 	bl	8002770 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027a2:	e7fe      	b.n	80027a2 <_exit+0x12>

080027a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <_sbrk+0x5c>)
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <_sbrk+0x60>)
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <_sbrk+0x64>)
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <_sbrk+0x68>)
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <_sbrk+0x64>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d207      	bcs.n	80027e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d4:	f003 fdf6 	bl	80063c4 <__errno>
 80027d8:	4602      	mov	r2, r0
 80027da:	230c      	movs	r3, #12
 80027dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	e009      	b.n	80027f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <_sbrk+0x64>)
 80027f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20020000 	.word	0x20020000
 8002804:	00004000 	.word	0x00004000
 8002808:	200001fc 	.word	0x200001fc
 800280c:	20000568 	.word	0x20000568

08002810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <SystemInit+0x28>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	4a07      	ldr	r2, [pc, #28]	; (8002838 <SystemInit+0x28>)
 800281c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <SystemInit+0x28>)
 8002826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800282a:	609a      	str	r2, [r3, #8]
#endif
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_USART2_UART_Init+0x4c>)
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <MX_USART2_UART_Init+0x50>)
 8002844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <MX_USART2_UART_Init+0x4c>)
 8002848:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800284c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_USART2_UART_Init+0x4c>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_USART2_UART_Init+0x4c>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <MX_USART2_UART_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_USART2_UART_Init+0x4c>)
 8002862:	220c      	movs	r2, #12
 8002864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <MX_USART2_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_USART2_UART_Init+0x4c>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_USART2_UART_Init+0x4c>)
 8002874:	f001 feba 	bl	80045ec <HAL_UART_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800287e:	f7ff fcd5 	bl	800222c <Error_Handler>
  }

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000520 	.word	0x20000520
 800288c:	40004400 	.word	0x40004400

08002890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08c      	sub	sp, #48	; 0x30
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a49      	ldr	r2, [pc, #292]	; (80029d4 <HAL_UART_MspInit+0x144>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12c      	bne.n	800290c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	4b48      	ldr	r3, [pc, #288]	; (80029d8 <HAL_UART_MspInit+0x148>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a47      	ldr	r2, [pc, #284]	; (80029d8 <HAL_UART_MspInit+0x148>)
 80028bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b45      	ldr	r3, [pc, #276]	; (80029d8 <HAL_UART_MspInit+0x148>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <HAL_UART_MspInit+0x148>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a40      	ldr	r2, [pc, #256]	; (80029d8 <HAL_UART_MspInit+0x148>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <HAL_UART_MspInit+0x148>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028ea:	2303      	movs	r3, #3
 80028ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028fa:	2308      	movs	r3, #8
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fe:	f107 031c 	add.w	r3, r7, #28
 8002902:	4619      	mov	r1, r3
 8002904:	4835      	ldr	r0, [pc, #212]	; (80029dc <HAL_UART_MspInit+0x14c>)
 8002906:	f000 fdaf 	bl	8003468 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800290a:	e05f      	b.n	80029cc <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <HAL_UART_MspInit+0x150>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d15a      	bne.n	80029cc <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_UART_MspInit+0x148>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a2e      	ldr	r2, [pc, #184]	; (80029d8 <HAL_UART_MspInit+0x148>)
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <HAL_UART_MspInit+0x148>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <HAL_UART_MspInit+0x148>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a27      	ldr	r2, [pc, #156]	; (80029d8 <HAL_UART_MspInit+0x148>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_UART_MspInit+0x148>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800294e:	230c      	movs	r3, #12
 8002950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295a:	2303      	movs	r3, #3
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800295e:	2307      	movs	r3, #7
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	4619      	mov	r1, r3
 8002968:	481c      	ldr	r0, [pc, #112]	; (80029dc <HAL_UART_MspInit+0x14c>)
 800296a:	f000 fd7d 	bl	8003468 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_UART_MspInit+0x154>)
 8002970:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <HAL_UART_MspInit+0x158>)
 8002972:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_UART_MspInit+0x154>)
 8002976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800297a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_UART_MspInit+0x154>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002982:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <HAL_UART_MspInit+0x154>)
 8002984:	2200      	movs	r2, #0
 8002986:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <HAL_UART_MspInit+0x154>)
 800298a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800298e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_UART_MspInit+0x154>)
 8002992:	2200      	movs	r2, #0
 8002994:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <HAL_UART_MspInit+0x154>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_UART_MspInit+0x154>)
 800299e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_UART_MspInit+0x154>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_UART_MspInit+0x154>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029b0:	480c      	ldr	r0, [pc, #48]	; (80029e4 <HAL_UART_MspInit+0x154>)
 80029b2:	f000 f9c9 	bl	8002d48 <HAL_DMA_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80029bc:	f7ff fc36 	bl	800222c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <HAL_UART_MspInit+0x154>)
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_UART_MspInit+0x154>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029cc:	bf00      	nop
 80029ce:	3730      	adds	r7, #48	; 0x30
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40004c00 	.word	0x40004c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020000 	.word	0x40020000
 80029e0:	40004400 	.word	0x40004400
 80029e4:	20000480 	.word	0x20000480
 80029e8:	40026088 	.word	0x40026088

080029ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029f2:	e003      	b.n	80029fc <LoopCopyDataInit>

080029f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029fa:	3104      	adds	r1, #4

080029fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029fc:	480b      	ldr	r0, [pc, #44]	; (8002a2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a04:	d3f6      	bcc.n	80029f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a08:	e002      	b.n	8002a10 <LoopFillZerobss>

08002a0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a0c:	f842 3b04 	str.w	r3, [r2], #4

08002a10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a14:	d3f9      	bcc.n	8002a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a16:	f7ff fefb 	bl	8002810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1a:	f003 fcd9 	bl	80063d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a1e:	f7ff fb3f 	bl	80020a0 <main>
  bx  lr    
 8002a22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a28:	08006630 	.word	0x08006630
  ldr  r0, =_sdata
 8002a2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a30:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8002a34:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8002a38:	20000568 	.word	0x20000568

08002a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a3c:	e7fe      	b.n	8002a3c <ADC_IRQHandler>
	...

08002a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_Init+0x40>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_Init+0x40>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_Init+0x40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_Init+0x40>)
 8002a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_Init+0x40>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_Init+0x40>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f000 f92b 	bl	8002cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f000 f808 	bl	8002a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a74:	f7ff fdee 	bl	8002654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00

08002a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_InitTick+0x54>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_InitTick+0x58>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f943 	bl	8002d2e <HAL_SYSTICK_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00e      	b.n	8002ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b0f      	cmp	r3, #15
 8002ab6:	d80a      	bhi.n	8002ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f000 f90b 	bl	8002cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_InitTick+0x5c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000014 	.word	0x20000014
 8002adc:	2000001c 	.word	0x2000001c
 8002ae0:	20000018 	.word	0x20000018

08002ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x24>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_IncTick+0x24>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	2000001c 	.word	0x2000001c
 8002b08:	20000560 	.word	0x20000560

08002b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_GetTick+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000560 	.word	0x20000560

08002b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	db0a      	blt.n	8002bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	490c      	ldr	r1, [pc, #48]	; (8002c10 <__NVIC_SetPriority+0x4c>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bec:	e00a      	b.n	8002c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <__NVIC_SetPriority+0x50>)
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	0112      	lsls	r2, r2, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	761a      	strb	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf28      	it	cs
 8002c36:	2304      	movcs	r3, #4
 8002c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <NVIC_EncodePriority+0x30>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3b03      	subs	r3, #3
 8002c46:	e000      	b.n	8002c4a <NVIC_EncodePriority+0x32>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43d9      	mvns	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	4313      	orrs	r3, r2
         );
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c90:	d301      	bcc.n	8002c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00f      	b.n	8002cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <SysTick_Config+0x40>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9e:	210f      	movs	r1, #15
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f7ff ff8e 	bl	8002bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <SysTick_Config+0x40>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <SysTick_Config+0x40>)
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	e000e010 	.word	0xe000e010

08002cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff29 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cec:	f7ff ff3e 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	6978      	ldr	r0, [r7, #20]
 8002cf8:	f7ff ff8e 	bl	8002c18 <NVIC_EncodePriority>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff5d 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff31 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ffa2 	bl	8002c80 <SysTick_Config>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d54:	f7ff feda 	bl	8002b0c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e099      	b.n	8002e98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d84:	e00f      	b.n	8002da6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d86:	f7ff fec1 	bl	8002b0c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d908      	bls.n	8002da6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e078      	b.n	8002e98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e8      	bne.n	8002d86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <HAL_DMA_Init+0x158>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d107      	bne.n	8002e10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f023 0307 	bic.w	r3, r3, #7
 8002e26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d117      	bne.n	8002e6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00e      	beq.n	8002e6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fa91 	bl	8003374 <DMA_CheckFifoParam>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e66:	2301      	movs	r3, #1
 8002e68:	e016      	b.n	8002e98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa48 	bl	8003308 <DMA_CalcBaseAndBitshift>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	223f      	movs	r2, #63	; 0x3f
 8002e82:	409a      	lsls	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	f010803f 	.word	0xf010803f

08002ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_DMA_Start_IT+0x26>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e040      	b.n	8002f4c <HAL_DMA_Start_IT+0xa8>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d12f      	bne.n	8002f3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f9da 	bl	80032ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	223f      	movs	r2, #63	; 0x3f
 8002efe:	409a      	lsls	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0216 	orr.w	r2, r2, #22
 8002f12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e005      	b.n	8002f4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
 8002f48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00c      	b.n	8002f8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2205      	movs	r2, #5
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa4:	4b92      	ldr	r3, [pc, #584]	; (80031f0 <HAL_DMA_IRQHandler+0x258>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a92      	ldr	r2, [pc, #584]	; (80031f4 <HAL_DMA_IRQHandler+0x25c>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0a9b      	lsrs	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01a      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0204 	bic.w	r2, r2, #4
 8002fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	2201      	movs	r2, #1
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d012      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2201      	movs	r2, #1
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f043 0202 	orr.w	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	2204      	movs	r2, #4
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	2204      	movs	r2, #4
 800305e:	409a      	lsls	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	2210      	movs	r2, #16
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d043      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d03c      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	2210      	movs	r2, #16
 8003094:	409a      	lsls	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d018      	beq.n	80030da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d024      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
 80030c6:	e01f      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e016      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0208 	bic.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	2220      	movs	r2, #32
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 808e 	beq.w	8003236 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8086 	beq.w	8003236 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	2220      	movs	r2, #32
 8003130:	409a      	lsls	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b05      	cmp	r3, #5
 8003140:	d136      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0216 	bic.w	r2, r2, #22
 8003150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_DMA_IRQHandler+0x1da>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0208 	bic.w	r2, r2, #8
 8003180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	223f      	movs	r2, #63	; 0x3f
 8003188:	409a      	lsls	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d07d      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
        }
        return;
 80031ae:	e078      	b.n	80032a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01c      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d108      	bne.n	80031de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d030      	beq.n	8003236 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e02b      	b.n	8003236 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d027      	beq.n	8003236 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
 80031ee:	e022      	b.n	8003236 <HAL_DMA_IRQHandler+0x29e>
 80031f0:	20000014 	.word	0x20000014
 80031f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0210 	bic.w	r2, r2, #16
 8003214:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	2b00      	cmp	r3, #0
 800323c:	d032      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d022      	beq.n	8003290 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2205      	movs	r2, #5
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3301      	adds	r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	429a      	cmp	r2, r3
 800326c:	d307      	bcc.n	800327e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f2      	bne.n	8003262 <HAL_DMA_IRQHandler+0x2ca>
 800327c:	e000      	b.n	8003280 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800327e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
 80032a0:	e000      	b.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80032a2:	bf00      	nop
    }
  }
}
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop

080032ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d108      	bne.n	80032ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ea:	e007      	b.n	80032fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3b10      	subs	r3, #16
 8003318:	4a14      	ldr	r2, [pc, #80]	; (800336c <DMA_CalcBaseAndBitshift+0x64>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003322:	4a13      	ldr	r2, [pc, #76]	; (8003370 <DMA_CalcBaseAndBitshift+0x68>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d909      	bls.n	800334a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	1d1a      	adds	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	659a      	str	r2, [r3, #88]	; 0x58
 8003348:	e007      	b.n	800335a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	aaaaaaab 	.word	0xaaaaaaab
 8003370:	080065c8 	.word	0x080065c8

08003374 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11f      	bne.n	80033ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d855      	bhi.n	8003440 <DMA_CheckFifoParam+0xcc>
 8003394:	a201      	add	r2, pc, #4	; (adr r2, 800339c <DMA_CheckFifoParam+0x28>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033bf 	.word	0x080033bf
 80033a4:	080033ad 	.word	0x080033ad
 80033a8:	08003441 	.word	0x08003441
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d045      	beq.n	8003444 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e042      	b.n	8003444 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033c6:	d13f      	bne.n	8003448 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033cc:	e03c      	b.n	8003448 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d6:	d121      	bne.n	800341c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d836      	bhi.n	800344c <DMA_CheckFifoParam+0xd8>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <DMA_CheckFifoParam+0x70>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	080033fb 	.word	0x080033fb
 80033ec:	080033f5 	.word	0x080033f5
 80033f0:	0800340d 	.word	0x0800340d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      break;
 80033f8:	e02f      	b.n	800345a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d024      	beq.n	8003450 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340a:	e021      	b.n	8003450 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003414:	d11e      	bne.n	8003454 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800341a:	e01b      	b.n	8003454 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d902      	bls.n	8003428 <DMA_CheckFifoParam+0xb4>
 8003422:	2b03      	cmp	r3, #3
 8003424:	d003      	beq.n	800342e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003426:	e018      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
      break;
 800342c:	e015      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00e      	beq.n	8003458 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
      break;
 800343e:	e00b      	b.n	8003458 <DMA_CheckFifoParam+0xe4>
      break;
 8003440:	bf00      	nop
 8003442:	e00a      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      break;
 8003444:	bf00      	nop
 8003446:	e008      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      break;
 8003448:	bf00      	nop
 800344a:	e006      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      break;
 800344c:	bf00      	nop
 800344e:	e004      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      break;
 8003450:	bf00      	nop
 8003452:	e002      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      break;   
 8003454:	bf00      	nop
 8003456:	e000      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      break;
 8003458:	bf00      	nop
    }
  } 
  
  return status; 
 800345a:	7bfb      	ldrb	r3, [r7, #15]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	e16b      	b.n	800375c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003484:	2201      	movs	r2, #1
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	429a      	cmp	r2, r3
 800349e:	f040 815a 	bne.w	8003756 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d00b      	beq.n	80034c2 <HAL_GPIO_Init+0x5a>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d007      	beq.n	80034c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034b6:	2b11      	cmp	r3, #17
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b12      	cmp	r3, #18
 80034c0:	d130      	bne.n	8003524 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	2203      	movs	r2, #3
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f8:	2201      	movs	r2, #1
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 0201 	and.w	r2, r3, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d003      	beq.n	8003564 <HAL_GPIO_Init+0xfc>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b12      	cmp	r3, #18
 8003562:	d123      	bne.n	80035ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	08da      	lsrs	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3208      	adds	r2, #8
 800356c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	220f      	movs	r2, #15
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	08da      	lsrs	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3208      	adds	r2, #8
 80035a6:	69b9      	ldr	r1, [r7, #24]
 80035a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0203 	and.w	r2, r3, #3
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80b4 	beq.w	8003756 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b5f      	ldr	r3, [pc, #380]	; (8003770 <HAL_GPIO_Init+0x308>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	4a5e      	ldr	r2, [pc, #376]	; (8003770 <HAL_GPIO_Init+0x308>)
 80035f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035fc:	6453      	str	r3, [r2, #68]	; 0x44
 80035fe:	4b5c      	ldr	r3, [pc, #368]	; (8003770 <HAL_GPIO_Init+0x308>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800360a:	4a5a      	ldr	r2, [pc, #360]	; (8003774 <HAL_GPIO_Init+0x30c>)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	3302      	adds	r3, #2
 8003612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	220f      	movs	r2, #15
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a51      	ldr	r2, [pc, #324]	; (8003778 <HAL_GPIO_Init+0x310>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d02b      	beq.n	800368e <HAL_GPIO_Init+0x226>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a50      	ldr	r2, [pc, #320]	; (800377c <HAL_GPIO_Init+0x314>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d025      	beq.n	800368a <HAL_GPIO_Init+0x222>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a4f      	ldr	r2, [pc, #316]	; (8003780 <HAL_GPIO_Init+0x318>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01f      	beq.n	8003686 <HAL_GPIO_Init+0x21e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a4e      	ldr	r2, [pc, #312]	; (8003784 <HAL_GPIO_Init+0x31c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d019      	beq.n	8003682 <HAL_GPIO_Init+0x21a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4d      	ldr	r2, [pc, #308]	; (8003788 <HAL_GPIO_Init+0x320>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <HAL_GPIO_Init+0x216>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a4c      	ldr	r2, [pc, #304]	; (800378c <HAL_GPIO_Init+0x324>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00d      	beq.n	800367a <HAL_GPIO_Init+0x212>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a4b      	ldr	r2, [pc, #300]	; (8003790 <HAL_GPIO_Init+0x328>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d007      	beq.n	8003676 <HAL_GPIO_Init+0x20e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4a      	ldr	r2, [pc, #296]	; (8003794 <HAL_GPIO_Init+0x32c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <HAL_GPIO_Init+0x20a>
 800366e:	2307      	movs	r3, #7
 8003670:	e00e      	b.n	8003690 <HAL_GPIO_Init+0x228>
 8003672:	2308      	movs	r3, #8
 8003674:	e00c      	b.n	8003690 <HAL_GPIO_Init+0x228>
 8003676:	2306      	movs	r3, #6
 8003678:	e00a      	b.n	8003690 <HAL_GPIO_Init+0x228>
 800367a:	2305      	movs	r3, #5
 800367c:	e008      	b.n	8003690 <HAL_GPIO_Init+0x228>
 800367e:	2304      	movs	r3, #4
 8003680:	e006      	b.n	8003690 <HAL_GPIO_Init+0x228>
 8003682:	2303      	movs	r3, #3
 8003684:	e004      	b.n	8003690 <HAL_GPIO_Init+0x228>
 8003686:	2302      	movs	r3, #2
 8003688:	e002      	b.n	8003690 <HAL_GPIO_Init+0x228>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_GPIO_Init+0x228>
 800368e:	2300      	movs	r3, #0
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	f002 0203 	and.w	r2, r2, #3
 8003696:	0092      	lsls	r2, r2, #2
 8003698:	4093      	lsls	r3, r2
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a0:	4934      	ldr	r1, [pc, #208]	; (8003774 <HAL_GPIO_Init+0x30c>)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	3302      	adds	r3, #2
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ae:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_GPIO_Init+0x330>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036d2:	4a31      	ldr	r2, [pc, #196]	; (8003798 <HAL_GPIO_Init+0x330>)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036d8:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <HAL_GPIO_Init+0x330>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <HAL_GPIO_Init+0x330>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003702:	4b25      	ldr	r3, [pc, #148]	; (8003798 <HAL_GPIO_Init+0x330>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003726:	4a1c      	ldr	r2, [pc, #112]	; (8003798 <HAL_GPIO_Init+0x330>)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_GPIO_Init+0x330>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003750:	4a11      	ldr	r2, [pc, #68]	; (8003798 <HAL_GPIO_Init+0x330>)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3301      	adds	r3, #1
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2b0f      	cmp	r3, #15
 8003760:	f67f ae90 	bls.w	8003484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003764:	bf00      	nop
 8003766:	3724      	adds	r7, #36	; 0x24
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40023800 	.word	0x40023800
 8003774:	40013800 	.word	0x40013800
 8003778:	40020000 	.word	0x40020000
 800377c:	40020400 	.word	0x40020400
 8003780:	40020800 	.word	0x40020800
 8003784:	40020c00 	.word	0x40020c00
 8003788:	40021000 	.word	0x40021000
 800378c:	40021400 	.word	0x40021400
 8003790:	40021800 	.word	0x40021800
 8003794:	40021c00 	.word	0x40021c00
 8003798:	40013c00 	.word	0x40013c00

0800379c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
 80037a8:	4613      	mov	r3, r2
 80037aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037ac:	787b      	ldrb	r3, [r7, #1]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037b8:	e003      	b.n	80037c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ba:	887b      	ldrh	r3, [r7, #2]
 80037bc:	041a      	lsls	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	619a      	str	r2, [r3, #24]
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037da:	4b08      	ldr	r3, [pc, #32]	; (80037fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd ff0c 	bl	800160c <HAL_GPIO_EXTI_Callback>
  }
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40013c00 	.word	0x40013c00

08003800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e11f      	b.n	8003a52 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fe fbf2 	bl	8002010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	; 0x24
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003852:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003864:	f000 fd18 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8003868:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4a7b      	ldr	r2, [pc, #492]	; (8003a5c <HAL_I2C_Init+0x25c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d807      	bhi.n	8003884 <HAL_I2C_Init+0x84>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a7a      	ldr	r2, [pc, #488]	; (8003a60 <HAL_I2C_Init+0x260>)
 8003878:	4293      	cmp	r3, r2
 800387a:	bf94      	ite	ls
 800387c:	2301      	movls	r3, #1
 800387e:	2300      	movhi	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e006      	b.n	8003892 <HAL_I2C_Init+0x92>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a77      	ldr	r2, [pc, #476]	; (8003a64 <HAL_I2C_Init+0x264>)
 8003888:	4293      	cmp	r3, r2
 800388a:	bf94      	ite	ls
 800388c:	2301      	movls	r3, #1
 800388e:	2300      	movhi	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0db      	b.n	8003a52 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a72      	ldr	r2, [pc, #456]	; (8003a68 <HAL_I2C_Init+0x268>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	0c9b      	lsrs	r3, r3, #18
 80038a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a64      	ldr	r2, [pc, #400]	; (8003a5c <HAL_I2C_Init+0x25c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d802      	bhi.n	80038d4 <HAL_I2C_Init+0xd4>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3301      	adds	r3, #1
 80038d2:	e009      	b.n	80038e8 <HAL_I2C_Init+0xe8>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	4a63      	ldr	r2, [pc, #396]	; (8003a6c <HAL_I2C_Init+0x26c>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	099b      	lsrs	r3, r3, #6
 80038e6:	3301      	adds	r3, #1
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4956      	ldr	r1, [pc, #344]	; (8003a5c <HAL_I2C_Init+0x25c>)
 8003904:	428b      	cmp	r3, r1
 8003906:	d80d      	bhi.n	8003924 <HAL_I2C_Init+0x124>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1e59      	subs	r1, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fbb1 f3f3 	udiv	r3, r1, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	2b04      	cmp	r3, #4
 800391e:	bf38      	it	cc
 8003920:	2304      	movcc	r3, #4
 8003922:	e04f      	b.n	80039c4 <HAL_I2C_Init+0x1c4>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d111      	bne.n	8003950 <HAL_I2C_Init+0x150>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1e58      	subs	r0, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e012      	b.n	8003976 <HAL_I2C_Init+0x176>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e58      	subs	r0, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	0099      	lsls	r1, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	fbb0 f3f3 	udiv	r3, r0, r3
 8003966:	3301      	adds	r3, #1
 8003968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Init+0x17e>
 800397a:	2301      	movs	r3, #1
 800397c:	e022      	b.n	80039c4 <HAL_I2C_Init+0x1c4>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10e      	bne.n	80039a4 <HAL_I2C_Init+0x1a4>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1e58      	subs	r0, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	460b      	mov	r3, r1
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	440b      	add	r3, r1
 8003994:	fbb0 f3f3 	udiv	r3, r0, r3
 8003998:	3301      	adds	r3, #1
 800399a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a2:	e00f      	b.n	80039c4 <HAL_I2C_Init+0x1c4>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1e58      	subs	r0, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	0099      	lsls	r1, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	6809      	ldr	r1, [r1, #0]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6911      	ldr	r1, [r2, #16]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68d2      	ldr	r2, [r2, #12]
 80039fe:	4311      	orrs	r1, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	000186a0 	.word	0x000186a0
 8003a60:	001e847f 	.word	0x001e847f
 8003a64:	003d08ff 	.word	0x003d08ff
 8003a68:	431bde83 	.word	0x431bde83
 8003a6c:	10624dd3 	.word	0x10624dd3

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e25b      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d075      	beq.n	8003b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a8e:	4ba3      	ldr	r3, [pc, #652]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d00c      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9a:	4ba0      	ldr	r3, [pc, #640]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d112      	bne.n	8003acc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa6:	4b9d      	ldr	r3, [pc, #628]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	4b99      	ldr	r3, [pc, #612]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d05b      	beq.n	8003b78 <HAL_RCC_OscConfig+0x108>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d157      	bne.n	8003b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e236      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad4:	d106      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x74>
 8003ad6:	4b91      	ldr	r3, [pc, #580]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a90      	ldr	r2, [pc, #576]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e01d      	b.n	8003b20 <HAL_RCC_OscConfig+0xb0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x98>
 8003aee:	4b8b      	ldr	r3, [pc, #556]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a8a      	ldr	r2, [pc, #552]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b88      	ldr	r3, [pc, #544]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a87      	ldr	r2, [pc, #540]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0xb0>
 8003b08:	4b84      	ldr	r3, [pc, #528]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a83      	ldr	r2, [pc, #524]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b81      	ldr	r3, [pc, #516]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a80      	ldr	r2, [pc, #512]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fe fff0 	bl	8002b0c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fe ffec 	bl	8002b0c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e1fb      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b76      	ldr	r3, [pc, #472]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0xc0>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe ffdc 	bl	8002b0c <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fe ffd8 	bl	8002b0c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e1e7      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	4b6c      	ldr	r3, [pc, #432]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0xe8>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d063      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b86:	4b65      	ldr	r3, [pc, #404]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b92:	4b62      	ldr	r3, [pc, #392]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9e:	4b5f      	ldr	r3, [pc, #380]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	4b5c      	ldr	r3, [pc, #368]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x152>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e1bb      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b56      	ldr	r3, [pc, #344]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4952      	ldr	r1, [pc, #328]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd6:	e03a      	b.n	8003c4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be0:	4b4f      	ldr	r3, [pc, #316]	; (8003d20 <HAL_RCC_OscConfig+0x2b0>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fe ff91 	bl	8002b0c <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bee:	f7fe ff8d 	bl	8002b0c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e19c      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	4b46      	ldr	r3, [pc, #280]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0c:	4b43      	ldr	r3, [pc, #268]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4940      	ldr	r1, [pc, #256]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
 8003c20:	e015      	b.n	8003c4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c22:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <HAL_RCC_OscConfig+0x2b0>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe ff70 	bl	8002b0c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fe ff6c 	bl	8002b0c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e17b      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d030      	beq.n	8003cbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d016      	beq.n	8003c90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c62:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <HAL_RCC_OscConfig+0x2b4>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fe ff50 	bl	8002b0c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fe ff4c 	bl	8002b0c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e15b      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	4b26      	ldr	r3, [pc, #152]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x200>
 8003c8e:	e015      	b.n	8003cbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c90:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_RCC_OscConfig+0x2b4>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7fe ff39 	bl	8002b0c <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c9e:	f7fe ff35 	bl	8002b0c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e144      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80a0 	beq.w	8003e0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10f      	bne.n	8003cfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCC_OscConfig+0x2b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d121      	bne.n	8003d4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_RCC_OscConfig+0x2b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a07      	ldr	r2, [pc, #28]	; (8003d28 <HAL_RCC_OscConfig+0x2b8>)
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d12:	f7fe fefb 	bl	8002b0c <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d18:	e011      	b.n	8003d3e <HAL_RCC_OscConfig+0x2ce>
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	42470000 	.word	0x42470000
 8003d24:	42470e80 	.word	0x42470e80
 8003d28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fe feee 	bl	8002b0c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e0fd      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3e:	4b81      	ldr	r3, [pc, #516]	; (8003f44 <HAL_RCC_OscConfig+0x4d4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d106      	bne.n	8003d60 <HAL_RCC_OscConfig+0x2f0>
 8003d52:	4b7d      	ldr	r3, [pc, #500]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a7c      	ldr	r2, [pc, #496]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5e:	e01c      	b.n	8003d9a <HAL_RCC_OscConfig+0x32a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCC_OscConfig+0x312>
 8003d68:	4b77      	ldr	r3, [pc, #476]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a76      	ldr	r2, [pc, #472]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
 8003d74:	4b74      	ldr	r3, [pc, #464]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a73      	ldr	r2, [pc, #460]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	e00b      	b.n	8003d9a <HAL_RCC_OscConfig+0x32a>
 8003d82:	4b71      	ldr	r3, [pc, #452]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a70      	ldr	r2, [pc, #448]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8e:	4b6e      	ldr	r3, [pc, #440]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4a6d      	ldr	r2, [pc, #436]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d015      	beq.n	8003dce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da2:	f7fe feb3 	bl	8002b0c <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fe feaf 	bl	8002b0c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0bc      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	4b61      	ldr	r3, [pc, #388]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RCC_OscConfig+0x33a>
 8003dcc:	e014      	b.n	8003df8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dce:	f7fe fe9d 	bl	8002b0c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fe fe99 	bl	8002b0c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0a6      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dec:	4b56      	ldr	r3, [pc, #344]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ee      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b52      	ldr	r3, [pc, #328]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	4a51      	ldr	r2, [pc, #324]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8092 	beq.w	8003f38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e14:	4b4c      	ldr	r3, [pc, #304]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d05c      	beq.n	8003eda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d141      	bne.n	8003eac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e28:	4b48      	ldr	r3, [pc, #288]	; (8003f4c <HAL_RCC_OscConfig+0x4dc>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fe fe6d 	bl	8002b0c <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fe fe69 	bl	8002b0c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e078      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e48:	4b3f      	ldr	r3, [pc, #252]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	019b      	lsls	r3, r3, #6
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	4933      	ldr	r1, [pc, #204]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7e:	4b33      	ldr	r3, [pc, #204]	; (8003f4c <HAL_RCC_OscConfig+0x4dc>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fe fe42 	bl	8002b0c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fe fe3e 	bl	8002b0c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e04d      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	4b2a      	ldr	r3, [pc, #168]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x41c>
 8003eaa:	e045      	b.n	8003f38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eac:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <HAL_RCC_OscConfig+0x4dc>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fe2b 	bl	8002b0c <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fe fe27 	bl	8002b0c <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e036      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f0      	bne.n	8003eba <HAL_RCC_OscConfig+0x44a>
 8003ed8:	e02e      	b.n	8003f38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e029      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ee6:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <HAL_RCC_OscConfig+0x4d8>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d11c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d115      	bne.n	8003f34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f0e:	4013      	ands	r3, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d10d      	bne.n	8003f34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d106      	bne.n	8003f34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40007000 	.word	0x40007000
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	42470060 	.word	0x42470060

08003f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0cc      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f64:	4b68      	ldr	r3, [pc, #416]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d90c      	bls.n	8003f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0b8      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa4:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a58      	ldr	r2, [pc, #352]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	494d      	ldr	r1, [pc, #308]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d044      	beq.n	8004070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d119      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e07f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d003      	beq.n	800400e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400a:	2b03      	cmp	r3, #3
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	4b3f      	ldr	r3, [pc, #252]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e06f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401e:	4b3b      	ldr	r3, [pc, #236]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e067      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b37      	ldr	r3, [pc, #220]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4934      	ldr	r1, [pc, #208]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004040:	f7fe fd64 	bl	8002b0c <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fe fd60 	bl	8002b0c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e04f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b2b      	ldr	r3, [pc, #172]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d20c      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e032      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4916      	ldr	r1, [pc, #88]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	490e      	ldr	r1, [pc, #56]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040d6:	f000 f821 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040da:	4601      	mov	r1, r0
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	5cd3      	ldrb	r3, [r2, r3]
 80040ea:	fa21 f303 	lsr.w	r3, r1, r3
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fcc4 	bl	8002a84 <HAL_InitTick>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023c00 	.word	0x40023c00
 800410c:	40023800 	.word	0x40023800
 8004110:	080065b0 	.word	0x080065b0
 8004114:	20000014 	.word	0x20000014
 8004118:	20000018 	.word	0x20000018

0800411c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	2300      	movs	r3, #0
 800412c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004132:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b04      	cmp	r3, #4
 800413c:	d007      	beq.n	800414e <HAL_RCC_GetSysClockFreq+0x32>
 800413e:	2b08      	cmp	r3, #8
 8004140:	d008      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x38>
 8004142:	2b00      	cmp	r3, #0
 8004144:	f040 808d 	bne.w	8004262 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004148:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <HAL_RCC_GetSysClockFreq+0x15c>)
 800414a:	60bb      	str	r3, [r7, #8]
       break;
 800414c:	e08c      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800414e:	4b4b      	ldr	r3, [pc, #300]	; (800427c <HAL_RCC_GetSysClockFreq+0x160>)
 8004150:	60bb      	str	r3, [r7, #8]
      break;
 8004152:	e089      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004154:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800415c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800415e:	4b45      	ldr	r3, [pc, #276]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d023      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416a:	4b42      	ldr	r3, [pc, #264]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	f04f 0400 	mov.w	r4, #0
 8004174:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	ea03 0501 	and.w	r5, r3, r1
 8004180:	ea04 0602 	and.w	r6, r4, r2
 8004184:	4a3d      	ldr	r2, [pc, #244]	; (800427c <HAL_RCC_GetSysClockFreq+0x160>)
 8004186:	fb02 f106 	mul.w	r1, r2, r6
 800418a:	2200      	movs	r2, #0
 800418c:	fb02 f205 	mul.w	r2, r2, r5
 8004190:	440a      	add	r2, r1
 8004192:	493a      	ldr	r1, [pc, #232]	; (800427c <HAL_RCC_GetSysClockFreq+0x160>)
 8004194:	fba5 0101 	umull	r0, r1, r5, r1
 8004198:	1853      	adds	r3, r2, r1
 800419a:	4619      	mov	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f04f 0400 	mov.w	r4, #0
 80041a2:	461a      	mov	r2, r3
 80041a4:	4623      	mov	r3, r4
 80041a6:	f7fc fc2d 	bl	8000a04 <__aeabi_uldivmod>
 80041aa:	4603      	mov	r3, r0
 80041ac:	460c      	mov	r4, r1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e049      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b2:	4b30      	ldr	r3, [pc, #192]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	ea03 0501 	and.w	r5, r3, r1
 80041c8:	ea04 0602 	and.w	r6, r4, r2
 80041cc:	4629      	mov	r1, r5
 80041ce:	4632      	mov	r2, r6
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	0154      	lsls	r4, r2, #5
 80041da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041de:	014b      	lsls	r3, r1, #5
 80041e0:	4619      	mov	r1, r3
 80041e2:	4622      	mov	r2, r4
 80041e4:	1b49      	subs	r1, r1, r5
 80041e6:	eb62 0206 	sbc.w	r2, r2, r6
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	f04f 0400 	mov.w	r4, #0
 80041f2:	0194      	lsls	r4, r2, #6
 80041f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041f8:	018b      	lsls	r3, r1, #6
 80041fa:	1a5b      	subs	r3, r3, r1
 80041fc:	eb64 0402 	sbc.w	r4, r4, r2
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	00e2      	lsls	r2, r4, #3
 800420a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800420e:	00d9      	lsls	r1, r3, #3
 8004210:	460b      	mov	r3, r1
 8004212:	4614      	mov	r4, r2
 8004214:	195b      	adds	r3, r3, r5
 8004216:	eb44 0406 	adc.w	r4, r4, r6
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	02a2      	lsls	r2, r4, #10
 8004224:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004228:	0299      	lsls	r1, r3, #10
 800422a:	460b      	mov	r3, r1
 800422c:	4614      	mov	r4, r2
 800422e:	4618      	mov	r0, r3
 8004230:	4621      	mov	r1, r4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	461a      	mov	r2, r3
 800423a:	4623      	mov	r3, r4
 800423c:	f7fc fbe2 	bl	8000a04 <__aeabi_uldivmod>
 8004240:	4603      	mov	r3, r0
 8004242:	460c      	mov	r4, r1
 8004244:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	0c1b      	lsrs	r3, r3, #16
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	3301      	adds	r3, #1
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	60bb      	str	r3, [r7, #8]
      break;
 8004260:	e002      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004264:	60bb      	str	r3, [r7, #8]
      break;
 8004266:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004268:	68bb      	ldr	r3, [r7, #8]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	00f42400 	.word	0x00f42400
 800427c:	00b71b00 	.word	0x00b71b00

08004280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_RCC_GetHCLKFreq+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000014 	.word	0x20000014

08004298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800429c:	f7ff fff0 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042a0:	4601      	mov	r1, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0a9b      	lsrs	r3, r3, #10
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4a03      	ldr	r2, [pc, #12]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	080065c0 	.word	0x080065c0

080042c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042c4:	f7ff ffdc 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042c8:	4601      	mov	r1, r0
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0b5b      	lsrs	r3, r3, #13
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4a03      	ldr	r2, [pc, #12]	; (80042e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	080065c0 	.word	0x080065c0

080042e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e056      	b.n	80043a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fe f8d9 	bl	80024cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004330:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	ea42 0103 	orr.w	r1, r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	f003 0104 	and.w	r1, r3, #4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004396:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
    return;
 80043f2:	e0d8      	b.n	80045a6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_SPI_IRQHandler+0x66>
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	09db      	lsrs	r3, r3, #7
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
    return;
 8004414:	e0c7      	b.n	80045a6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_SPI_IRQHandler+0x8c>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	099b      	lsrs	r3, r3, #6
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	0a1b      	lsrs	r3, r3, #8
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80b5 	beq.w	80045a6 <HAL_SPI_IRQHandler+0x1f6>
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80ae 	beq.w	80045a6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d023      	beq.n	800449e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b03      	cmp	r3, #3
 8004460:	d011      	beq.n	8004486 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	e00b      	b.n	800449e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	693b      	ldr	r3, [r7, #16]
        return;
 800449c:	e083      	b.n	80045a6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d014      	beq.n	80044d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	f043 0201 	orr.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00c      	beq.n	80044fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f043 0208 	orr.w	r2, r3, #8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d050      	beq.n	80045a4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004510:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_SPI_IRQHandler+0x17e>
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d034      	beq.n	8004598 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0203 	bic.w	r2, r2, #3
 800453c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d011      	beq.n	800456a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454a:	4a18      	ldr	r2, [pc, #96]	; (80045ac <HAL_SPI_IRQHandler+0x1fc>)
 800454c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fcfe 	bl	8002f54 <HAL_DMA_Abort_IT>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004576:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <HAL_SPI_IRQHandler+0x1fc>)
 8004578:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fce8 	bl	8002f54 <HAL_DMA_Abort_IT>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004596:	e003      	b.n	80045a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f809 	bl	80045b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800459e:	e000      	b.n	80045a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80045a0:	bf00      	nop
    return;
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
  }
}
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	080045c5 	.word	0x080045c5

080045b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff ffe6 	bl	80045b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e03f      	b.n	800467e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fe f93c 	bl	8002890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	; 0x24
 800461c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f969 	bl	8004908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d166      	bne.n	8004770 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <HAL_UART_Receive_DMA+0x26>
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e05f      	b.n	8004772 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_UART_Receive_DMA+0x38>
 80046bc:	2302      	movs	r3, #2
 80046be:	e058      	b.n	8004772 <HAL_UART_Receive_DMA+0xea>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	88fa      	ldrh	r2, [r7, #6]
 80046d2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2222      	movs	r2, #34	; 0x22
 80046de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e6:	4a25      	ldr	r2, [pc, #148]	; (800477c <HAL_UART_Receive_DMA+0xf4>)
 80046e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ee:	4a24      	ldr	r2, [pc, #144]	; (8004780 <HAL_UART_Receive_DMA+0xf8>)
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	4a23      	ldr	r2, [pc, #140]	; (8004784 <HAL_UART_Receive_DMA+0xfc>)
 80046f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	2200      	movs	r2, #0
 8004700:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004702:	f107 0308 	add.w	r3, r7, #8
 8004706:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3304      	adds	r3, #4
 8004712:	4619      	mov	r1, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	f7fe fbc3 	bl	8002ea4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800474a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800476a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	08004789 	.word	0x08004789
 8004780:	080047f1 	.word	0x080047f1
 8004784:	0800480d 	.word	0x0800480d

08004788 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d11e      	bne.n	80047e2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047b8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7fd fcfa 	bl	80021dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7fd fcfc 	bl	80021fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b80      	cmp	r3, #128	; 0x80
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b21      	cmp	r3, #33	; 0x21
 800483e:	d108      	bne.n	8004852 <UART_DMAError+0x46>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2200      	movs	r2, #0
 800484a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800484c:	68b8      	ldr	r0, [r7, #8]
 800484e:	f000 f827 	bl	80048a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b22      	cmp	r3, #34	; 0x22
 8004872:	d108      	bne.n	8004886 <UART_DMAError+0x7a>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2200      	movs	r2, #0
 800487e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004880:	68b8      	ldr	r0, [r7, #8]
 8004882:	f000 f823 	bl	80048cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	f043 0210 	orr.w	r2, r3, #16
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004892:	68b8      	ldr	r0, [r7, #8]
 8004894:	f7fd fcbe 	bl	8002214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048b6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695a      	ldr	r2, [r3, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800494a:	f023 030c 	bic.w	r3, r3, #12
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	430b      	orrs	r3, r1
 8004956:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004976:	f040 818b 	bne.w	8004c90 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4ac1      	ldr	r2, [pc, #772]	; (8004c84 <UART_SetConfig+0x37c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d005      	beq.n	8004990 <UART_SetConfig+0x88>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4abf      	ldr	r2, [pc, #764]	; (8004c88 <UART_SetConfig+0x380>)
 800498a:	4293      	cmp	r3, r2
 800498c:	f040 80bd 	bne.w	8004b0a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004990:	f7ff fc96 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 8004994:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	461d      	mov	r5, r3
 800499a:	f04f 0600 	mov.w	r6, #0
 800499e:	46a8      	mov	r8, r5
 80049a0:	46b1      	mov	r9, r6
 80049a2:	eb18 0308 	adds.w	r3, r8, r8
 80049a6:	eb49 0409 	adc.w	r4, r9, r9
 80049aa:	4698      	mov	r8, r3
 80049ac:	46a1      	mov	r9, r4
 80049ae:	eb18 0805 	adds.w	r8, r8, r5
 80049b2:	eb49 0906 	adc.w	r9, r9, r6
 80049b6:	f04f 0100 	mov.w	r1, #0
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049ca:	4688      	mov	r8, r1
 80049cc:	4691      	mov	r9, r2
 80049ce:	eb18 0005 	adds.w	r0, r8, r5
 80049d2:	eb49 0106 	adc.w	r1, r9, r6
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	461d      	mov	r5, r3
 80049dc:	f04f 0600 	mov.w	r6, #0
 80049e0:	196b      	adds	r3, r5, r5
 80049e2:	eb46 0406 	adc.w	r4, r6, r6
 80049e6:	461a      	mov	r2, r3
 80049e8:	4623      	mov	r3, r4
 80049ea:	f7fc f80b 	bl	8000a04 <__aeabi_uldivmod>
 80049ee:	4603      	mov	r3, r0
 80049f0:	460c      	mov	r4, r1
 80049f2:	461a      	mov	r2, r3
 80049f4:	4ba5      	ldr	r3, [pc, #660]	; (8004c8c <UART_SetConfig+0x384>)
 80049f6:	fba3 2302 	umull	r2, r3, r3, r2
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	461d      	mov	r5, r3
 8004a04:	f04f 0600 	mov.w	r6, #0
 8004a08:	46a9      	mov	r9, r5
 8004a0a:	46b2      	mov	sl, r6
 8004a0c:	eb19 0309 	adds.w	r3, r9, r9
 8004a10:	eb4a 040a 	adc.w	r4, sl, sl
 8004a14:	4699      	mov	r9, r3
 8004a16:	46a2      	mov	sl, r4
 8004a18:	eb19 0905 	adds.w	r9, r9, r5
 8004a1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a20:	f04f 0100 	mov.w	r1, #0
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a34:	4689      	mov	r9, r1
 8004a36:	4692      	mov	sl, r2
 8004a38:	eb19 0005 	adds.w	r0, r9, r5
 8004a3c:	eb4a 0106 	adc.w	r1, sl, r6
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	461d      	mov	r5, r3
 8004a46:	f04f 0600 	mov.w	r6, #0
 8004a4a:	196b      	adds	r3, r5, r5
 8004a4c:	eb46 0406 	adc.w	r4, r6, r6
 8004a50:	461a      	mov	r2, r3
 8004a52:	4623      	mov	r3, r4
 8004a54:	f7fb ffd6 	bl	8000a04 <__aeabi_uldivmod>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4b8b      	ldr	r3, [pc, #556]	; (8004c8c <UART_SetConfig+0x384>)
 8004a60:	fba3 1302 	umull	r1, r3, r3, r2
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	2164      	movs	r1, #100	; 0x64
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	3332      	adds	r3, #50	; 0x32
 8004a72:	4a86      	ldr	r2, [pc, #536]	; (8004c8c <UART_SetConfig+0x384>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a80:	4498      	add	r8, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	461d      	mov	r5, r3
 8004a86:	f04f 0600 	mov.w	r6, #0
 8004a8a:	46a9      	mov	r9, r5
 8004a8c:	46b2      	mov	sl, r6
 8004a8e:	eb19 0309 	adds.w	r3, r9, r9
 8004a92:	eb4a 040a 	adc.w	r4, sl, sl
 8004a96:	4699      	mov	r9, r3
 8004a98:	46a2      	mov	sl, r4
 8004a9a:	eb19 0905 	adds.w	r9, r9, r5
 8004a9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004aa2:	f04f 0100 	mov.w	r1, #0
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ab2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ab6:	4689      	mov	r9, r1
 8004ab8:	4692      	mov	sl, r2
 8004aba:	eb19 0005 	adds.w	r0, r9, r5
 8004abe:	eb4a 0106 	adc.w	r1, sl, r6
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	f04f 0600 	mov.w	r6, #0
 8004acc:	196b      	adds	r3, r5, r5
 8004ace:	eb46 0406 	adc.w	r4, r6, r6
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4623      	mov	r3, r4
 8004ad6:	f7fb ff95 	bl	8000a04 <__aeabi_uldivmod>
 8004ada:	4603      	mov	r3, r0
 8004adc:	460c      	mov	r4, r1
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4b6a      	ldr	r3, [pc, #424]	; (8004c8c <UART_SetConfig+0x384>)
 8004ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	2164      	movs	r1, #100	; 0x64
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	3332      	adds	r3, #50	; 0x32
 8004af4:	4a65      	ldr	r2, [pc, #404]	; (8004c8c <UART_SetConfig+0x384>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	f003 0207 	and.w	r2, r3, #7
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4442      	add	r2, r8
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	e26f      	b.n	8004fea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b0a:	f7ff fbc5 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8004b0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	461d      	mov	r5, r3
 8004b14:	f04f 0600 	mov.w	r6, #0
 8004b18:	46a8      	mov	r8, r5
 8004b1a:	46b1      	mov	r9, r6
 8004b1c:	eb18 0308 	adds.w	r3, r8, r8
 8004b20:	eb49 0409 	adc.w	r4, r9, r9
 8004b24:	4698      	mov	r8, r3
 8004b26:	46a1      	mov	r9, r4
 8004b28:	eb18 0805 	adds.w	r8, r8, r5
 8004b2c:	eb49 0906 	adc.w	r9, r9, r6
 8004b30:	f04f 0100 	mov.w	r1, #0
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b44:	4688      	mov	r8, r1
 8004b46:	4691      	mov	r9, r2
 8004b48:	eb18 0005 	adds.w	r0, r8, r5
 8004b4c:	eb49 0106 	adc.w	r1, r9, r6
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	461d      	mov	r5, r3
 8004b56:	f04f 0600 	mov.w	r6, #0
 8004b5a:	196b      	adds	r3, r5, r5
 8004b5c:	eb46 0406 	adc.w	r4, r6, r6
 8004b60:	461a      	mov	r2, r3
 8004b62:	4623      	mov	r3, r4
 8004b64:	f7fb ff4e 	bl	8000a04 <__aeabi_uldivmod>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b47      	ldr	r3, [pc, #284]	; (8004c8c <UART_SetConfig+0x384>)
 8004b70:	fba3 2302 	umull	r2, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	461d      	mov	r5, r3
 8004b7e:	f04f 0600 	mov.w	r6, #0
 8004b82:	46a9      	mov	r9, r5
 8004b84:	46b2      	mov	sl, r6
 8004b86:	eb19 0309 	adds.w	r3, r9, r9
 8004b8a:	eb4a 040a 	adc.w	r4, sl, sl
 8004b8e:	4699      	mov	r9, r3
 8004b90:	46a2      	mov	sl, r4
 8004b92:	eb19 0905 	adds.w	r9, r9, r5
 8004b96:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b9a:	f04f 0100 	mov.w	r1, #0
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004baa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bae:	4689      	mov	r9, r1
 8004bb0:	4692      	mov	sl, r2
 8004bb2:	eb19 0005 	adds.w	r0, r9, r5
 8004bb6:	eb4a 0106 	adc.w	r1, sl, r6
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	461d      	mov	r5, r3
 8004bc0:	f04f 0600 	mov.w	r6, #0
 8004bc4:	196b      	adds	r3, r5, r5
 8004bc6:	eb46 0406 	adc.w	r4, r6, r6
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4623      	mov	r3, r4
 8004bce:	f7fb ff19 	bl	8000a04 <__aeabi_uldivmod>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4b2c      	ldr	r3, [pc, #176]	; (8004c8c <UART_SetConfig+0x384>)
 8004bda:	fba3 1302 	umull	r1, r3, r3, r2
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	2164      	movs	r1, #100	; 0x64
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	3332      	adds	r3, #50	; 0x32
 8004bec:	4a27      	ldr	r2, [pc, #156]	; (8004c8c <UART_SetConfig+0x384>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bfa:	4498      	add	r8, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	461d      	mov	r5, r3
 8004c00:	f04f 0600 	mov.w	r6, #0
 8004c04:	46a9      	mov	r9, r5
 8004c06:	46b2      	mov	sl, r6
 8004c08:	eb19 0309 	adds.w	r3, r9, r9
 8004c0c:	eb4a 040a 	adc.w	r4, sl, sl
 8004c10:	4699      	mov	r9, r3
 8004c12:	46a2      	mov	sl, r4
 8004c14:	eb19 0905 	adds.w	r9, r9, r5
 8004c18:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c1c:	f04f 0100 	mov.w	r1, #0
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c30:	4689      	mov	r9, r1
 8004c32:	4692      	mov	sl, r2
 8004c34:	eb19 0005 	adds.w	r0, r9, r5
 8004c38:	eb4a 0106 	adc.w	r1, sl, r6
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	461d      	mov	r5, r3
 8004c42:	f04f 0600 	mov.w	r6, #0
 8004c46:	196b      	adds	r3, r5, r5
 8004c48:	eb46 0406 	adc.w	r4, r6, r6
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4623      	mov	r3, r4
 8004c50:	f7fb fed8 	bl	8000a04 <__aeabi_uldivmod>
 8004c54:	4603      	mov	r3, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <UART_SetConfig+0x384>)
 8004c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	2164      	movs	r1, #100	; 0x64
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	3332      	adds	r3, #50	; 0x32
 8004c6e:	4a07      	ldr	r2, [pc, #28]	; (8004c8c <UART_SetConfig+0x384>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	f003 0207 	and.w	r2, r3, #7
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4442      	add	r2, r8
 8004c80:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004c82:	e1b2      	b.n	8004fea <UART_SetConfig+0x6e2>
 8004c84:	40011000 	.word	0x40011000
 8004c88:	40011400 	.word	0x40011400
 8004c8c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4ad7      	ldr	r2, [pc, #860]	; (8004ff4 <UART_SetConfig+0x6ec>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d005      	beq.n	8004ca6 <UART_SetConfig+0x39e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4ad6      	ldr	r2, [pc, #856]	; (8004ff8 <UART_SetConfig+0x6f0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	f040 80d1 	bne.w	8004e48 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ca6:	f7ff fb0b 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 8004caa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	469a      	mov	sl, r3
 8004cb0:	f04f 0b00 	mov.w	fp, #0
 8004cb4:	46d0      	mov	r8, sl
 8004cb6:	46d9      	mov	r9, fp
 8004cb8:	eb18 0308 	adds.w	r3, r8, r8
 8004cbc:	eb49 0409 	adc.w	r4, r9, r9
 8004cc0:	4698      	mov	r8, r3
 8004cc2:	46a1      	mov	r9, r4
 8004cc4:	eb18 080a 	adds.w	r8, r8, sl
 8004cc8:	eb49 090b 	adc.w	r9, r9, fp
 8004ccc:	f04f 0100 	mov.w	r1, #0
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cd8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cdc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ce0:	4688      	mov	r8, r1
 8004ce2:	4691      	mov	r9, r2
 8004ce4:	eb1a 0508 	adds.w	r5, sl, r8
 8004ce8:	eb4b 0609 	adc.w	r6, fp, r9
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	f04f 0400 	mov.w	r4, #0
 8004cfe:	0094      	lsls	r4, r2, #2
 8004d00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d04:	008b      	lsls	r3, r1, #2
 8004d06:	461a      	mov	r2, r3
 8004d08:	4623      	mov	r3, r4
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	f7fb fe79 	bl	8000a04 <__aeabi_uldivmod>
 8004d12:	4603      	mov	r3, r0
 8004d14:	460c      	mov	r4, r1
 8004d16:	461a      	mov	r2, r3
 8004d18:	4bb8      	ldr	r3, [pc, #736]	; (8004ffc <UART_SetConfig+0x6f4>)
 8004d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	469b      	mov	fp, r3
 8004d28:	f04f 0c00 	mov.w	ip, #0
 8004d2c:	46d9      	mov	r9, fp
 8004d2e:	46e2      	mov	sl, ip
 8004d30:	eb19 0309 	adds.w	r3, r9, r9
 8004d34:	eb4a 040a 	adc.w	r4, sl, sl
 8004d38:	4699      	mov	r9, r3
 8004d3a:	46a2      	mov	sl, r4
 8004d3c:	eb19 090b 	adds.w	r9, r9, fp
 8004d40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d58:	4689      	mov	r9, r1
 8004d5a:	4692      	mov	sl, r2
 8004d5c:	eb1b 0509 	adds.w	r5, fp, r9
 8004d60:	eb4c 060a 	adc.w	r6, ip, sl
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	f04f 0400 	mov.w	r4, #0
 8004d76:	0094      	lsls	r4, r2, #2
 8004d78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d7c:	008b      	lsls	r3, r1, #2
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4623      	mov	r3, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	4631      	mov	r1, r6
 8004d86:	f7fb fe3d 	bl	8000a04 <__aeabi_uldivmod>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b9a      	ldr	r3, [pc, #616]	; (8004ffc <UART_SetConfig+0x6f4>)
 8004d92:	fba3 1302 	umull	r1, r3, r3, r2
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2164      	movs	r1, #100	; 0x64
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	3332      	adds	r3, #50	; 0x32
 8004da4:	4a95      	ldr	r2, [pc, #596]	; (8004ffc <UART_SetConfig+0x6f4>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db0:	4498      	add	r8, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	469b      	mov	fp, r3
 8004db6:	f04f 0c00 	mov.w	ip, #0
 8004dba:	46d9      	mov	r9, fp
 8004dbc:	46e2      	mov	sl, ip
 8004dbe:	eb19 0309 	adds.w	r3, r9, r9
 8004dc2:	eb4a 040a 	adc.w	r4, sl, sl
 8004dc6:	4699      	mov	r9, r3
 8004dc8:	46a2      	mov	sl, r4
 8004dca:	eb19 090b 	adds.w	r9, r9, fp
 8004dce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004de2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004de6:	4689      	mov	r9, r1
 8004de8:	4692      	mov	sl, r2
 8004dea:	eb1b 0509 	adds.w	r5, fp, r9
 8004dee:	eb4c 060a 	adc.w	r6, ip, sl
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4619      	mov	r1, r3
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	f04f 0400 	mov.w	r4, #0
 8004e04:	0094      	lsls	r4, r2, #2
 8004e06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e0a:	008b      	lsls	r3, r1, #2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4623      	mov	r3, r4
 8004e10:	4628      	mov	r0, r5
 8004e12:	4631      	mov	r1, r6
 8004e14:	f7fb fdf6 	bl	8000a04 <__aeabi_uldivmod>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4b77      	ldr	r3, [pc, #476]	; (8004ffc <UART_SetConfig+0x6f4>)
 8004e20:	fba3 1302 	umull	r1, r3, r3, r2
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	2164      	movs	r1, #100	; 0x64
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	3332      	adds	r3, #50	; 0x32
 8004e32:	4a72      	ldr	r2, [pc, #456]	; (8004ffc <UART_SetConfig+0x6f4>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	f003 020f 	and.w	r2, r3, #15
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4442      	add	r2, r8
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	e0d0      	b.n	8004fea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e48:	f7ff fa26 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8004e4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	469a      	mov	sl, r3
 8004e52:	f04f 0b00 	mov.w	fp, #0
 8004e56:	46d0      	mov	r8, sl
 8004e58:	46d9      	mov	r9, fp
 8004e5a:	eb18 0308 	adds.w	r3, r8, r8
 8004e5e:	eb49 0409 	adc.w	r4, r9, r9
 8004e62:	4698      	mov	r8, r3
 8004e64:	46a1      	mov	r9, r4
 8004e66:	eb18 080a 	adds.w	r8, r8, sl
 8004e6a:	eb49 090b 	adc.w	r9, r9, fp
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e82:	4688      	mov	r8, r1
 8004e84:	4691      	mov	r9, r2
 8004e86:	eb1a 0508 	adds.w	r5, sl, r8
 8004e8a:	eb4b 0609 	adc.w	r6, fp, r9
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4619      	mov	r1, r3
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	f04f 0400 	mov.w	r4, #0
 8004ea0:	0094      	lsls	r4, r2, #2
 8004ea2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ea6:	008b      	lsls	r3, r1, #2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4623      	mov	r3, r4
 8004eac:	4628      	mov	r0, r5
 8004eae:	4631      	mov	r1, r6
 8004eb0:	f7fb fda8 	bl	8000a04 <__aeabi_uldivmod>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4b50      	ldr	r3, [pc, #320]	; (8004ffc <UART_SetConfig+0x6f4>)
 8004ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	469b      	mov	fp, r3
 8004eca:	f04f 0c00 	mov.w	ip, #0
 8004ece:	46d9      	mov	r9, fp
 8004ed0:	46e2      	mov	sl, ip
 8004ed2:	eb19 0309 	adds.w	r3, r9, r9
 8004ed6:	eb4a 040a 	adc.w	r4, sl, sl
 8004eda:	4699      	mov	r9, r3
 8004edc:	46a2      	mov	sl, r4
 8004ede:	eb19 090b 	adds.w	r9, r9, fp
 8004ee2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ee6:	f04f 0100 	mov.w	r1, #0
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ef6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004efa:	4689      	mov	r9, r1
 8004efc:	4692      	mov	sl, r2
 8004efe:	eb1b 0509 	adds.w	r5, fp, r9
 8004f02:	eb4c 060a 	adc.w	r6, ip, sl
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	f04f 0400 	mov.w	r4, #0
 8004f18:	0094      	lsls	r4, r2, #2
 8004f1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f1e:	008b      	lsls	r3, r1, #2
 8004f20:	461a      	mov	r2, r3
 8004f22:	4623      	mov	r3, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	4631      	mov	r1, r6
 8004f28:	f7fb fd6c 	bl	8000a04 <__aeabi_uldivmod>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	461a      	mov	r2, r3
 8004f32:	4b32      	ldr	r3, [pc, #200]	; (8004ffc <UART_SetConfig+0x6f4>)
 8004f34:	fba3 1302 	umull	r1, r3, r3, r2
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	2164      	movs	r1, #100	; 0x64
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	3332      	adds	r3, #50	; 0x32
 8004f46:	4a2d      	ldr	r2, [pc, #180]	; (8004ffc <UART_SetConfig+0x6f4>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f52:	4498      	add	r8, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	469b      	mov	fp, r3
 8004f58:	f04f 0c00 	mov.w	ip, #0
 8004f5c:	46d9      	mov	r9, fp
 8004f5e:	46e2      	mov	sl, ip
 8004f60:	eb19 0309 	adds.w	r3, r9, r9
 8004f64:	eb4a 040a 	adc.w	r4, sl, sl
 8004f68:	4699      	mov	r9, r3
 8004f6a:	46a2      	mov	sl, r4
 8004f6c:	eb19 090b 	adds.w	r9, r9, fp
 8004f70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f74:	f04f 0100 	mov.w	r1, #0
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f88:	4689      	mov	r9, r1
 8004f8a:	4692      	mov	sl, r2
 8004f8c:	eb1b 0509 	adds.w	r5, fp, r9
 8004f90:	eb4c 060a 	adc.w	r6, ip, sl
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	f04f 0400 	mov.w	r4, #0
 8004fa6:	0094      	lsls	r4, r2, #2
 8004fa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fac:	008b      	lsls	r3, r1, #2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	f7fb fd25 	bl	8000a04 <__aeabi_uldivmod>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <UART_SetConfig+0x6f4>)
 8004fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	2164      	movs	r1, #100	; 0x64
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	3332      	adds	r3, #50	; 0x32
 8004fd4:	4a09      	ldr	r2, [pc, #36]	; (8004ffc <UART_SetConfig+0x6f4>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	f003 020f 	and.w	r2, r3, #15
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4442      	add	r2, r8
 8004fe6:	609a      	str	r2, [r3, #8]
}
 8004fe8:	e7ff      	b.n	8004fea <UART_SetConfig+0x6e2>
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff4:	40011000 	.word	0x40011000
 8004ff8:	40011400 	.word	0x40011400
 8004ffc:	51eb851f 	.word	0x51eb851f

08005000 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005000:	b480      	push	{r7}
 8005002:	b089      	sub	sp, #36	; 0x24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	fa93 f3a3 	rbit	r3, r3
 800501a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	fab3 f383 	clz	r3, r3
 8005022:	b2db      	uxtb	r3, r3
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	2103      	movs	r1, #3
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	401a      	ands	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	fa93 f3a3 	rbit	r3, r3
 800503a:	61bb      	str	r3, [r7, #24]
  return result;
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	fa01 f303 	lsl.w	r3, r1, r3
 800504c:	431a      	orrs	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	601a      	str	r2, [r3, #0]
}
 8005052:	bf00      	nop
 8005054:	3724      	adds	r7, #36	; 0x24
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	43db      	mvns	r3, r3
 8005072:	401a      	ands	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	431a      	orrs	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	605a      	str	r2, [r3, #4]
}
 8005082:	bf00      	nop
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800508e:	b480      	push	{r7}
 8005090:	b089      	sub	sp, #36	; 0x24
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	fa93 f3a3 	rbit	r3, r3
 80050a8:	613b      	str	r3, [r7, #16]
  return result;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	fab3 f383 	clz	r3, r3
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	2103      	movs	r1, #3
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	401a      	ands	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	fa93 f3a3 	rbit	r3, r3
 80050c8:	61bb      	str	r3, [r7, #24]
  return result;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	431a      	orrs	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80050e0:	bf00      	nop
 80050e2:	3724      	adds	r7, #36	; 0x24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	; 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	fa93 f3a3 	rbit	r3, r3
 8005106:	613b      	str	r3, [r7, #16]
  return result;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	fab3 f383 	clz	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	2103      	movs	r1, #3
 8005114:	fa01 f303 	lsl.w	r3, r1, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	401a      	ands	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	fa93 f3a3 	rbit	r3, r3
 8005126:	61bb      	str	r3, [r7, #24]
  return result;
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	fa01 f303 	lsl.w	r3, r1, r3
 8005138:	431a      	orrs	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	60da      	str	r2, [r3, #12]
}
 800513e:	bf00      	nop
 8005140:	3724      	adds	r7, #36	; 0x24
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800514a:	b480      	push	{r7}
 800514c:	b089      	sub	sp, #36	; 0x24
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	fa93 f3a3 	rbit	r3, r3
 8005164:	613b      	str	r3, [r7, #16]
  return result;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	fab3 f383 	clz	r3, r3
 800516c:	b2db      	uxtb	r3, r3
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	210f      	movs	r1, #15
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	401a      	ands	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	fa93 f3a3 	rbit	r3, r3
 8005184:	61bb      	str	r3, [r7, #24]
  return result;
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	fab3 f383 	clz	r3, r3
 800518c:	b2db      	uxtb	r3, r3
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	fa01 f303 	lsl.w	r3, r1, r3
 8005196:	431a      	orrs	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800519c:	bf00      	nop
 800519e:	3724      	adds	r7, #36	; 0x24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b089      	sub	sp, #36	; 0x24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	fa93 f3a3 	rbit	r3, r3
 80051c4:	613b      	str	r3, [r7, #16]
  return result;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	fab3 f383 	clz	r3, r3
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	210f      	movs	r1, #15
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	43db      	mvns	r3, r3
 80051d8:	401a      	ands	r2, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	0a1b      	lsrs	r3, r3, #8
 80051de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	fa93 f3a3 	rbit	r3, r3
 80051e6:	61bb      	str	r3, [r7, #24]
  return result;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	fab3 f383 	clz	r3, r3
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	fa01 f303 	lsl.w	r3, r1, r3
 80051f8:	431a      	orrs	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80051fe:	bf00      	nop
 8005200:	3724      	adds	r7, #36	; 0x24
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005214:	2300      	movs	r3, #0
 8005216:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	fa93 f3a3 	rbit	r3, r3
 8005228:	613b      	str	r3, [r7, #16]
  return result;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	fab3 f383 	clz	r3, r3
 8005230:	b2db      	uxtb	r3, r3
 8005232:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005234:	e050      	b.n	80052d8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	2101      	movs	r1, #1
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	fa01 f303 	lsl.w	r3, r1, r3
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d042      	beq.n	80052d2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d003      	beq.n	800525c <LL_GPIO_Init+0x52>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d10d      	bne.n	8005278 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	461a      	mov	r2, r3
 8005262:	69b9      	ldr	r1, [r7, #24]
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff ff12 	bl	800508e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	461a      	mov	r2, r3
 8005270:	69b9      	ldr	r1, [r7, #24]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff fef3 	bl	800505e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	461a      	mov	r2, r3
 800527e:	69b9      	ldr	r1, [r7, #24]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff ff33 	bl	80050ec <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d11a      	bne.n	80052c4 <LL_GPIO_Init+0xba>
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	fa93 f3a3 	rbit	r3, r3
 8005298:	60bb      	str	r3, [r7, #8]
  return result;
 800529a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800529c:	fab3 f383 	clz	r3, r3
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b07      	cmp	r3, #7
 80052a4:	d807      	bhi.n	80052b6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	461a      	mov	r2, r3
 80052ac:	69b9      	ldr	r1, [r7, #24]
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff ff4b 	bl	800514a <LL_GPIO_SetAFPin_0_7>
 80052b4:	e006      	b.n	80052c4 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	461a      	mov	r2, r3
 80052bc:	69b9      	ldr	r1, [r7, #24]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff ff72 	bl	80051a8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	461a      	mov	r2, r3
 80052ca:	69b9      	ldr	r1, [r7, #24]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff fe97 	bl	8005000 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	3301      	adds	r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	fa22 f303 	lsr.w	r3, r2, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1a7      	bne.n	8005236 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <LL_SPI_IsEnabled>:
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b40      	cmp	r3, #64	; 0x40
 8005302:	d101      	bne.n	8005308 <LL_SPI_IsEnabled+0x18>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <LL_SPI_IsEnabled+0x1a>
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <LL_SPI_SetCRCPolynomial>:
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	611a      	str	r2, [r3, #16]
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff ffd3 	bl	80052f0 <LL_SPI_IsEnabled>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d139      	bne.n	80053c4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005358:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	6811      	ldr	r1, [r2, #0]
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	6852      	ldr	r2, [r2, #4]
 8005364:	4311      	orrs	r1, r2
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	6892      	ldr	r2, [r2, #8]
 800536a:	4311      	orrs	r1, r2
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	68d2      	ldr	r2, [r2, #12]
 8005370:	4311      	orrs	r1, r2
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	6912      	ldr	r2, [r2, #16]
 8005376:	4311      	orrs	r1, r2
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	6952      	ldr	r2, [r2, #20]
 800537c:	4311      	orrs	r1, r2
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	6992      	ldr	r2, [r2, #24]
 8005382:	4311      	orrs	r1, r2
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	69d2      	ldr	r2, [r2, #28]
 8005388:	4311      	orrs	r1, r2
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	6a12      	ldr	r2, [r2, #32]
 800538e:	430a      	orrs	r2, r1
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f023 0204 	bic.w	r2, r3, #4
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b2:	d105      	bne.n	80053c0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff ffab 	bl	8005316 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80053c0:	2300      	movs	r3, #0
 80053c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	61da      	str	r2, [r3, #28]
  return status;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <_Znwj>:
 80053da:	b510      	push	{r4, lr}
 80053dc:	2800      	cmp	r0, #0
 80053de:	bf14      	ite	ne
 80053e0:	4604      	movne	r4, r0
 80053e2:	2401      	moveq	r4, #1
 80053e4:	4620      	mov	r0, r4
 80053e6:	f001 f817 	bl	8006418 <malloc>
 80053ea:	b930      	cbnz	r0, 80053fa <_Znwj+0x20>
 80053ec:	f000 f806 	bl	80053fc <_ZSt15get_new_handlerv>
 80053f0:	b908      	cbnz	r0, 80053f6 <_Znwj+0x1c>
 80053f2:	f000 ffdf 	bl	80063b4 <abort>
 80053f6:	4780      	blx	r0
 80053f8:	e7f4      	b.n	80053e4 <_Znwj+0xa>
 80053fa:	bd10      	pop	{r4, pc}

080053fc <_ZSt15get_new_handlerv>:
 80053fc:	4b02      	ldr	r3, [pc, #8]	; (8005408 <_ZSt15get_new_handlerv+0xc>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	f3bf 8f5b 	dmb	ish
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20000200 	.word	0x20000200

0800540c <asinf>:
 800540c:	b510      	push	{r4, lr}
 800540e:	ed2d 8b02 	vpush	{d8}
 8005412:	4c27      	ldr	r4, [pc, #156]	; (80054b0 <asinf+0xa4>)
 8005414:	b08a      	sub	sp, #40	; 0x28
 8005416:	eeb0 8a40 	vmov.f32	s16, s0
 800541a:	f000 f9b5 	bl	8005788 <__ieee754_asinf>
 800541e:	f994 3000 	ldrsb.w	r3, [r4]
 8005422:	3301      	adds	r3, #1
 8005424:	eef0 8a40 	vmov.f32	s17, s0
 8005428:	d03c      	beq.n	80054a4 <asinf+0x98>
 800542a:	eeb4 8a48 	vcmp.f32	s16, s16
 800542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005432:	d637      	bvs.n	80054a4 <asinf+0x98>
 8005434:	eeb0 0a48 	vmov.f32	s0, s16
 8005438:	f000 fede 	bl	80061f8 <fabsf>
 800543c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005440:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005448:	dd2c      	ble.n	80054a4 <asinf+0x98>
 800544a:	2301      	movs	r3, #1
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	4b19      	ldr	r3, [pc, #100]	; (80054b4 <asinf+0xa8>)
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	ee18 0a10 	vmov	r0, s16
 8005456:	2300      	movs	r3, #0
 8005458:	9308      	str	r3, [sp, #32]
 800545a:	f7fb f819 	bl	8000490 <__aeabi_f2d>
 800545e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005466:	4814      	ldr	r0, [pc, #80]	; (80054b8 <asinf+0xac>)
 8005468:	f000 fdea 	bl	8006040 <nan>
 800546c:	f994 3000 	ldrsb.w	r3, [r4]
 8005470:	2b02      	cmp	r3, #2
 8005472:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005476:	d104      	bne.n	8005482 <asinf+0x76>
 8005478:	f000 ffa4 	bl	80063c4 <__errno>
 800547c:	2321      	movs	r3, #33	; 0x21
 800547e:	6003      	str	r3, [r0, #0]
 8005480:	e004      	b.n	800548c <asinf+0x80>
 8005482:	4668      	mov	r0, sp
 8005484:	f000 fdd9 	bl	800603a <matherr>
 8005488:	2800      	cmp	r0, #0
 800548a:	d0f5      	beq.n	8005478 <asinf+0x6c>
 800548c:	9b08      	ldr	r3, [sp, #32]
 800548e:	b11b      	cbz	r3, 8005498 <asinf+0x8c>
 8005490:	f000 ff98 	bl	80063c4 <__errno>
 8005494:	9b08      	ldr	r3, [sp, #32]
 8005496:	6003      	str	r3, [r0, #0]
 8005498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800549c:	f7fb fa62 	bl	8000964 <__aeabi_d2f>
 80054a0:	ee08 0a90 	vmov	s17, r0
 80054a4:	eeb0 0a68 	vmov.f32	s0, s17
 80054a8:	b00a      	add	sp, #40	; 0x28
 80054aa:	ecbd 8b02 	vpop	{d8}
 80054ae:	bd10      	pop	{r4, pc}
 80054b0:	2000001d 	.word	0x2000001d
 80054b4:	080065d0 	.word	0x080065d0
 80054b8:	080065d5 	.word	0x080065d5

080054bc <atan2f>:
 80054bc:	f000 ba4c 	b.w	8005958 <__ieee754_atan2f>

080054c0 <powf>:
 80054c0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80054c4:	ed2d 8b04 	vpush	{d8-d9}
 80054c8:	4ca7      	ldr	r4, [pc, #668]	; (8005768 <powf+0x2a8>)
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	eef0 8a40 	vmov.f32	s17, s0
 80054d0:	eeb0 8a60 	vmov.f32	s16, s1
 80054d4:	f000 faee 	bl	8005ab4 <__ieee754_powf>
 80054d8:	f994 5000 	ldrsb.w	r5, [r4]
 80054dc:	1c6b      	adds	r3, r5, #1
 80054de:	eeb0 9a40 	vmov.f32	s18, s0
 80054e2:	4626      	mov	r6, r4
 80054e4:	d05f      	beq.n	80055a6 <powf+0xe6>
 80054e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80054ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ee:	d65a      	bvs.n	80055a6 <powf+0xe6>
 80054f0:	eef4 8a68 	vcmp.f32	s17, s17
 80054f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f8:	d721      	bvc.n	800553e <powf+0x7e>
 80054fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80054fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005502:	d150      	bne.n	80055a6 <powf+0xe6>
 8005504:	2301      	movs	r3, #1
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	4b98      	ldr	r3, [pc, #608]	; (800576c <powf+0x2ac>)
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	ee18 0a90 	vmov	r0, s17
 8005510:	2300      	movs	r3, #0
 8005512:	9308      	str	r3, [sp, #32]
 8005514:	f7fa ffbc 	bl	8000490 <__aeabi_f2d>
 8005518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800551c:	ee18 0a10 	vmov	r0, s16
 8005520:	f7fa ffb6 	bl	8000490 <__aeabi_f2d>
 8005524:	4b92      	ldr	r3, [pc, #584]	; (8005770 <powf+0x2b0>)
 8005526:	2200      	movs	r2, #0
 8005528:	2d02      	cmp	r5, #2
 800552a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800552e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005532:	d032      	beq.n	800559a <powf+0xda>
 8005534:	4668      	mov	r0, sp
 8005536:	f000 fd80 	bl	800603a <matherr>
 800553a:	bb40      	cbnz	r0, 800558e <powf+0xce>
 800553c:	e065      	b.n	800560a <powf+0x14a>
 800553e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8005774 <powf+0x2b4>
 8005542:	eef4 8a69 	vcmp.f32	s17, s19
 8005546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554a:	d163      	bne.n	8005614 <powf+0x154>
 800554c:	eeb4 8a69 	vcmp.f32	s16, s19
 8005550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005554:	d12e      	bne.n	80055b4 <powf+0xf4>
 8005556:	2301      	movs	r3, #1
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	4b84      	ldr	r3, [pc, #528]	; (800576c <powf+0x2ac>)
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	ee18 0a90 	vmov	r0, s17
 8005562:	2300      	movs	r3, #0
 8005564:	9308      	str	r3, [sp, #32]
 8005566:	f7fa ff93 	bl	8000490 <__aeabi_f2d>
 800556a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800556e:	ee18 0a10 	vmov	r0, s16
 8005572:	f7fa ff8d 	bl	8000490 <__aeabi_f2d>
 8005576:	2200      	movs	r2, #0
 8005578:	2300      	movs	r3, #0
 800557a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800557e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005582:	2d00      	cmp	r5, #0
 8005584:	d0d6      	beq.n	8005534 <powf+0x74>
 8005586:	4b7a      	ldr	r3, [pc, #488]	; (8005770 <powf+0x2b0>)
 8005588:	2200      	movs	r2, #0
 800558a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800558e:	9b08      	ldr	r3, [sp, #32]
 8005590:	b11b      	cbz	r3, 800559a <powf+0xda>
 8005592:	f000 ff17 	bl	80063c4 <__errno>
 8005596:	9b08      	ldr	r3, [sp, #32]
 8005598:	6003      	str	r3, [r0, #0]
 800559a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800559e:	f7fb f9e1 	bl	8000964 <__aeabi_d2f>
 80055a2:	ee09 0a10 	vmov	s18, r0
 80055a6:	eeb0 0a49 	vmov.f32	s0, s18
 80055aa:	b00a      	add	sp, #40	; 0x28
 80055ac:	ecbd 8b04 	vpop	{d8-d9}
 80055b0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80055b4:	eeb0 0a48 	vmov.f32	s0, s16
 80055b8:	f000 fe25 	bl	8006206 <finitef>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d0f2      	beq.n	80055a6 <powf+0xe6>
 80055c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80055c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c8:	d5ed      	bpl.n	80055a6 <powf+0xe6>
 80055ca:	2301      	movs	r3, #1
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	4b67      	ldr	r3, [pc, #412]	; (800576c <powf+0x2ac>)
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	ee18 0a90 	vmov	r0, s17
 80055d6:	2300      	movs	r3, #0
 80055d8:	9308      	str	r3, [sp, #32]
 80055da:	f7fa ff59 	bl	8000490 <__aeabi_f2d>
 80055de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e2:	ee18 0a10 	vmov	r0, s16
 80055e6:	f7fa ff53 	bl	8000490 <__aeabi_f2d>
 80055ea:	f994 3000 	ldrsb.w	r3, [r4]
 80055ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055f2:	b923      	cbnz	r3, 80055fe <powf+0x13e>
 80055f4:	2200      	movs	r2, #0
 80055f6:	2300      	movs	r3, #0
 80055f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80055fc:	e79a      	b.n	8005534 <powf+0x74>
 80055fe:	495e      	ldr	r1, [pc, #376]	; (8005778 <powf+0x2b8>)
 8005600:	2000      	movs	r0, #0
 8005602:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d194      	bne.n	8005534 <powf+0x74>
 800560a:	f000 fedb 	bl	80063c4 <__errno>
 800560e:	2321      	movs	r3, #33	; 0x21
 8005610:	6003      	str	r3, [r0, #0]
 8005612:	e7bc      	b.n	800558e <powf+0xce>
 8005614:	f000 fdf7 	bl	8006206 <finitef>
 8005618:	4605      	mov	r5, r0
 800561a:	2800      	cmp	r0, #0
 800561c:	d173      	bne.n	8005706 <powf+0x246>
 800561e:	eeb0 0a68 	vmov.f32	s0, s17
 8005622:	f000 fdf0 	bl	8006206 <finitef>
 8005626:	2800      	cmp	r0, #0
 8005628:	d06d      	beq.n	8005706 <powf+0x246>
 800562a:	eeb0 0a48 	vmov.f32	s0, s16
 800562e:	f000 fdea 	bl	8006206 <finitef>
 8005632:	2800      	cmp	r0, #0
 8005634:	d067      	beq.n	8005706 <powf+0x246>
 8005636:	ee18 0a90 	vmov	r0, s17
 800563a:	f7fa ff29 	bl	8000490 <__aeabi_f2d>
 800563e:	4680      	mov	r8, r0
 8005640:	ee18 0a10 	vmov	r0, s16
 8005644:	4689      	mov	r9, r1
 8005646:	f7fa ff23 	bl	8000490 <__aeabi_f2d>
 800564a:	eeb4 9a49 	vcmp.f32	s18, s18
 800564e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005652:	f994 4000 	ldrsb.w	r4, [r4]
 8005656:	4b45      	ldr	r3, [pc, #276]	; (800576c <powf+0x2ac>)
 8005658:	d713      	bvc.n	8005682 <powf+0x1c2>
 800565a:	2201      	movs	r2, #1
 800565c:	e9cd 2300 	strd	r2, r3, [sp]
 8005660:	9508      	str	r5, [sp, #32]
 8005662:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005666:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800566a:	2c00      	cmp	r4, #0
 800566c:	d0c2      	beq.n	80055f4 <powf+0x134>
 800566e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8005672:	ee17 0a90 	vmov	r0, s15
 8005676:	f7fa ff0b 	bl	8000490 <__aeabi_f2d>
 800567a:	2c02      	cmp	r4, #2
 800567c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005680:	e7c2      	b.n	8005608 <powf+0x148>
 8005682:	2203      	movs	r2, #3
 8005684:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005688:	e9cd 2300 	strd	r2, r3, [sp]
 800568c:	9508      	str	r5, [sp, #32]
 800568e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005692:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005696:	ee28 8a27 	vmul.f32	s16, s16, s15
 800569a:	b9fc      	cbnz	r4, 80056dc <powf+0x21c>
 800569c:	4b37      	ldr	r3, [pc, #220]	; (800577c <powf+0x2bc>)
 800569e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80056a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80056a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056ae:	d553      	bpl.n	8005758 <powf+0x298>
 80056b0:	eeb0 0a48 	vmov.f32	s0, s16
 80056b4:	f000 fdb8 	bl	8006228 <rintf>
 80056b8:	eeb4 0a48 	vcmp.f32	s0, s16
 80056bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c0:	d004      	beq.n	80056cc <powf+0x20c>
 80056c2:	4b2f      	ldr	r3, [pc, #188]	; (8005780 <powf+0x2c0>)
 80056c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80056c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056cc:	f996 3000 	ldrsb.w	r3, [r6]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d141      	bne.n	8005758 <powf+0x298>
 80056d4:	f000 fe76 	bl	80063c4 <__errno>
 80056d8:	2322      	movs	r3, #34	; 0x22
 80056da:	e799      	b.n	8005610 <powf+0x150>
 80056dc:	4b29      	ldr	r3, [pc, #164]	; (8005784 <powf+0x2c4>)
 80056de:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80056e2:	2200      	movs	r2, #0
 80056e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056ec:	d5ee      	bpl.n	80056cc <powf+0x20c>
 80056ee:	eeb0 0a48 	vmov.f32	s0, s16
 80056f2:	f000 fd99 	bl	8006228 <rintf>
 80056f6:	eeb4 0a48 	vcmp.f32	s0, s16
 80056fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fe:	d0e5      	beq.n	80056cc <powf+0x20c>
 8005700:	2200      	movs	r2, #0
 8005702:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <powf+0x2b8>)
 8005704:	e7e0      	b.n	80056c8 <powf+0x208>
 8005706:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	f47f af4a 	bne.w	80055a6 <powf+0xe6>
 8005712:	eeb0 0a68 	vmov.f32	s0, s17
 8005716:	f000 fd76 	bl	8006206 <finitef>
 800571a:	2800      	cmp	r0, #0
 800571c:	f43f af43 	beq.w	80055a6 <powf+0xe6>
 8005720:	eeb0 0a48 	vmov.f32	s0, s16
 8005724:	f000 fd6f 	bl	8006206 <finitef>
 8005728:	2800      	cmp	r0, #0
 800572a:	f43f af3c 	beq.w	80055a6 <powf+0xe6>
 800572e:	2304      	movs	r3, #4
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <powf+0x2ac>)
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	ee18 0a90 	vmov	r0, s17
 800573a:	2300      	movs	r3, #0
 800573c:	9308      	str	r3, [sp, #32]
 800573e:	f7fa fea7 	bl	8000490 <__aeabi_f2d>
 8005742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005746:	ee18 0a10 	vmov	r0, s16
 800574a:	f7fa fea1 	bl	8000490 <__aeabi_f2d>
 800574e:	2200      	movs	r2, #0
 8005750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005754:	2300      	movs	r3, #0
 8005756:	e7b7      	b.n	80056c8 <powf+0x208>
 8005758:	4668      	mov	r0, sp
 800575a:	f000 fc6e 	bl	800603a <matherr>
 800575e:	2800      	cmp	r0, #0
 8005760:	f47f af15 	bne.w	800558e <powf+0xce>
 8005764:	e7b6      	b.n	80056d4 <powf+0x214>
 8005766:	bf00      	nop
 8005768:	2000001d 	.word	0x2000001d
 800576c:	080065d6 	.word	0x080065d6
 8005770:	3ff00000 	.word	0x3ff00000
 8005774:	00000000 	.word	0x00000000
 8005778:	fff00000 	.word	0xfff00000
 800577c:	47efffff 	.word	0x47efffff
 8005780:	c7efffff 	.word	0xc7efffff
 8005784:	7ff00000 	.word	0x7ff00000

08005788 <__ieee754_asinf>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	ee10 5a10 	vmov	r5, s0
 800578e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005792:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005796:	ed2d 8b04 	vpush	{d8-d9}
 800579a:	d10c      	bne.n	80057b6 <__ieee754_asinf+0x2e>
 800579c:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8005918 <__ieee754_asinf+0x190>
 80057a0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800591c <__ieee754_asinf+0x194>
 80057a4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80057a8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80057ac:	eeb0 0a67 	vmov.f32	s0, s15
 80057b0:	ecbd 8b04 	vpop	{d8-d9}
 80057b4:	bd38      	pop	{r3, r4, r5, pc}
 80057b6:	dd04      	ble.n	80057c2 <__ieee754_asinf+0x3a>
 80057b8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80057bc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80057c0:	e7f6      	b.n	80057b0 <__ieee754_asinf+0x28>
 80057c2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80057c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80057ca:	da0b      	bge.n	80057e4 <__ieee754_asinf+0x5c>
 80057cc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80057d0:	da52      	bge.n	8005878 <__ieee754_asinf+0xf0>
 80057d2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8005920 <__ieee754_asinf+0x198>
 80057d6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80057da:	eef4 7ae8 	vcmpe.f32	s15, s17
 80057de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e2:	dce5      	bgt.n	80057b0 <__ieee754_asinf+0x28>
 80057e4:	f000 fd08 	bl	80061f8 <fabsf>
 80057e8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80057ec:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80057f0:	ee20 8a08 	vmul.f32	s16, s0, s16
 80057f4:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8005924 <__ieee754_asinf+0x19c>
 80057f8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005928 <__ieee754_asinf+0x1a0>
 80057fc:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800592c <__ieee754_asinf+0x1a4>
 8005800:	eea8 7a27 	vfma.f32	s14, s16, s15
 8005804:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8005930 <__ieee754_asinf+0x1a8>
 8005808:	eee7 7a08 	vfma.f32	s15, s14, s16
 800580c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005934 <__ieee754_asinf+0x1ac>
 8005810:	eea7 7a88 	vfma.f32	s14, s15, s16
 8005814:	eddf 7a48 	vldr	s15, [pc, #288]	; 8005938 <__ieee754_asinf+0x1b0>
 8005818:	eee7 7a08 	vfma.f32	s15, s14, s16
 800581c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800593c <__ieee754_asinf+0x1b4>
 8005820:	eea7 9a88 	vfma.f32	s18, s15, s16
 8005824:	eddf 7a46 	vldr	s15, [pc, #280]	; 8005940 <__ieee754_asinf+0x1b8>
 8005828:	eee8 7a07 	vfma.f32	s15, s16, s14
 800582c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8005944 <__ieee754_asinf+0x1bc>
 8005830:	eea7 7a88 	vfma.f32	s14, s15, s16
 8005834:	eddf 7a44 	vldr	s15, [pc, #272]	; 8005948 <__ieee754_asinf+0x1c0>
 8005838:	eee7 7a08 	vfma.f32	s15, s14, s16
 800583c:	eeb0 0a48 	vmov.f32	s0, s16
 8005840:	eee7 8a88 	vfma.f32	s17, s15, s16
 8005844:	f000 fbf6 	bl	8006034 <__ieee754_sqrtf>
 8005848:	4b40      	ldr	r3, [pc, #256]	; (800594c <__ieee754_asinf+0x1c4>)
 800584a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800584e:	429c      	cmp	r4, r3
 8005850:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8005854:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005858:	dd3d      	ble.n	80058d6 <__ieee754_asinf+0x14e>
 800585a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800585e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8005950 <__ieee754_asinf+0x1c8>
 8005862:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005866:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800591c <__ieee754_asinf+0x194>
 800586a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800586e:	2d00      	cmp	r5, #0
 8005870:	bfd8      	it	le
 8005872:	eeb1 0a40 	vnegle.f32	s0, s0
 8005876:	e79b      	b.n	80057b0 <__ieee754_asinf+0x28>
 8005878:	ee60 7a00 	vmul.f32	s15, s0, s0
 800587c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8005924 <__ieee754_asinf+0x19c>
 8005880:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005928 <__ieee754_asinf+0x1a0>
 8005884:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800593c <__ieee754_asinf+0x1b4>
 8005888:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800588c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8005930 <__ieee754_asinf+0x1a8>
 8005890:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005894:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005934 <__ieee754_asinf+0x1ac>
 8005898:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800589c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005938 <__ieee754_asinf+0x1b0>
 80058a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058a4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800592c <__ieee754_asinf+0x1a4>
 80058a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058ac:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005940 <__ieee754_asinf+0x1b8>
 80058b0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80058b4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8005944 <__ieee754_asinf+0x1bc>
 80058b8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80058bc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8005948 <__ieee754_asinf+0x1c0>
 80058c0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80058c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058c8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80058cc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80058d0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80058d4:	e76c      	b.n	80057b0 <__ieee754_asinf+0x28>
 80058d6:	ee10 3a10 	vmov	r3, s0
 80058da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80058de:	f023 030f 	bic.w	r3, r3, #15
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef1 6a67 	vneg.f32	s13, s15
 80058ea:	eea6 8aa7 	vfma.f32	s16, s13, s15
 80058ee:	ee70 5a00 	vadd.f32	s11, s0, s0
 80058f2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80058f6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005918 <__ieee754_asinf+0x190>
 80058fa:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80058fe:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8005954 <__ieee754_asinf+0x1cc>
 8005902:	eee5 7a47 	vfms.f32	s15, s10, s14
 8005906:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800590a:	eeb0 6a40 	vmov.f32	s12, s0
 800590e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005912:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005916:	e7a8      	b.n	800586a <__ieee754_asinf+0xe2>
 8005918:	b33bbd2e 	.word	0xb33bbd2e
 800591c:	3fc90fdb 	.word	0x3fc90fdb
 8005920:	7149f2ca 	.word	0x7149f2ca
 8005924:	3811ef08 	.word	0x3811ef08
 8005928:	3a4f7f04 	.word	0x3a4f7f04
 800592c:	3e2aaaab 	.word	0x3e2aaaab
 8005930:	bd241146 	.word	0xbd241146
 8005934:	3e4e0aa8 	.word	0x3e4e0aa8
 8005938:	bea6b090 	.word	0xbea6b090
 800593c:	3d9dc62e 	.word	0x3d9dc62e
 8005940:	bf303361 	.word	0xbf303361
 8005944:	4001572d 	.word	0x4001572d
 8005948:	c019d139 	.word	0xc019d139
 800594c:	3f799999 	.word	0x3f799999
 8005950:	333bbd2e 	.word	0x333bbd2e
 8005954:	3f490fdb 	.word	0x3f490fdb

08005958 <__ieee754_atan2f>:
 8005958:	ee10 2a90 	vmov	r2, s1
 800595c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8005960:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005964:	b510      	push	{r4, lr}
 8005966:	eef0 7a40 	vmov.f32	s15, s0
 800596a:	dc06      	bgt.n	800597a <__ieee754_atan2f+0x22>
 800596c:	ee10 0a10 	vmov	r0, s0
 8005970:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005974:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005978:	dd04      	ble.n	8005984 <__ieee754_atan2f+0x2c>
 800597a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800597e:	eeb0 0a67 	vmov.f32	s0, s15
 8005982:	bd10      	pop	{r4, pc}
 8005984:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8005988:	d103      	bne.n	8005992 <__ieee754_atan2f+0x3a>
 800598a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598e:	f000 bb5f 	b.w	8006050 <atanf>
 8005992:	1794      	asrs	r4, r2, #30
 8005994:	f004 0402 	and.w	r4, r4, #2
 8005998:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800599c:	b943      	cbnz	r3, 80059b0 <__ieee754_atan2f+0x58>
 800599e:	2c02      	cmp	r4, #2
 80059a0:	d06e      	beq.n	8005a80 <__ieee754_atan2f+0x128>
 80059a2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005a88 <__ieee754_atan2f+0x130>
 80059a6:	2c03      	cmp	r4, #3
 80059a8:	bf08      	it	eq
 80059aa:	eef0 7a47 	vmoveq.f32	s15, s14
 80059ae:	e7e6      	b.n	800597e <__ieee754_atan2f+0x26>
 80059b0:	b941      	cbnz	r1, 80059c4 <__ieee754_atan2f+0x6c>
 80059b2:	eddf 7a36 	vldr	s15, [pc, #216]	; 8005a8c <__ieee754_atan2f+0x134>
 80059b6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005a90 <__ieee754_atan2f+0x138>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	bfb8      	it	lt
 80059be:	eef0 7a47 	vmovlt.f32	s15, s14
 80059c2:	e7dc      	b.n	800597e <__ieee754_atan2f+0x26>
 80059c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80059c8:	d122      	bne.n	8005a10 <__ieee754_atan2f+0xb8>
 80059ca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80059ce:	d112      	bne.n	80059f6 <__ieee754_atan2f+0x9e>
 80059d0:	2c02      	cmp	r4, #2
 80059d2:	d00a      	beq.n	80059ea <__ieee754_atan2f+0x92>
 80059d4:	2c03      	cmp	r4, #3
 80059d6:	d00b      	beq.n	80059f0 <__ieee754_atan2f+0x98>
 80059d8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005a94 <__ieee754_atan2f+0x13c>
 80059dc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005a98 <__ieee754_atan2f+0x140>
 80059e0:	2c01      	cmp	r4, #1
 80059e2:	bf18      	it	ne
 80059e4:	eef0 7a47 	vmovne.f32	s15, s14
 80059e8:	e7c9      	b.n	800597e <__ieee754_atan2f+0x26>
 80059ea:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8005a9c <__ieee754_atan2f+0x144>
 80059ee:	e7c6      	b.n	800597e <__ieee754_atan2f+0x26>
 80059f0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005aa0 <__ieee754_atan2f+0x148>
 80059f4:	e7c3      	b.n	800597e <__ieee754_atan2f+0x26>
 80059f6:	2c02      	cmp	r4, #2
 80059f8:	d042      	beq.n	8005a80 <__ieee754_atan2f+0x128>
 80059fa:	2c03      	cmp	r4, #3
 80059fc:	d005      	beq.n	8005a0a <__ieee754_atan2f+0xb2>
 80059fe:	2c01      	cmp	r4, #1
 8005a00:	eddf 7a28 	vldr	s15, [pc, #160]	; 8005aa4 <__ieee754_atan2f+0x14c>
 8005a04:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005aa8 <__ieee754_atan2f+0x150>
 8005a08:	e7eb      	b.n	80059e2 <__ieee754_atan2f+0x8a>
 8005a0a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005a88 <__ieee754_atan2f+0x130>
 8005a0e:	e7b6      	b.n	800597e <__ieee754_atan2f+0x26>
 8005a10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005a14:	d0cd      	beq.n	80059b2 <__ieee754_atan2f+0x5a>
 8005a16:	1a5b      	subs	r3, r3, r1
 8005a18:	15db      	asrs	r3, r3, #23
 8005a1a:	2b3c      	cmp	r3, #60	; 0x3c
 8005a1c:	dc1a      	bgt.n	8005a54 <__ieee754_atan2f+0xfc>
 8005a1e:	2a00      	cmp	r2, #0
 8005a20:	da01      	bge.n	8005a26 <__ieee754_atan2f+0xce>
 8005a22:	333c      	adds	r3, #60	; 0x3c
 8005a24:	db19      	blt.n	8005a5a <__ieee754_atan2f+0x102>
 8005a26:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8005a2a:	f000 fbe5 	bl	80061f8 <fabsf>
 8005a2e:	f000 fb0f 	bl	8006050 <atanf>
 8005a32:	eef0 7a40 	vmov.f32	s15, s0
 8005a36:	2c01      	cmp	r4, #1
 8005a38:	d012      	beq.n	8005a60 <__ieee754_atan2f+0x108>
 8005a3a:	2c02      	cmp	r4, #2
 8005a3c:	d017      	beq.n	8005a6e <__ieee754_atan2f+0x116>
 8005a3e:	2c00      	cmp	r4, #0
 8005a40:	d09d      	beq.n	800597e <__ieee754_atan2f+0x26>
 8005a42:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005aac <__ieee754_atan2f+0x154>
 8005a46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a4a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005ab0 <__ieee754_atan2f+0x158>
 8005a4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a52:	e794      	b.n	800597e <__ieee754_atan2f+0x26>
 8005a54:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005a8c <__ieee754_atan2f+0x134>
 8005a58:	e7ed      	b.n	8005a36 <__ieee754_atan2f+0xde>
 8005a5a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005aa8 <__ieee754_atan2f+0x150>
 8005a5e:	e7ea      	b.n	8005a36 <__ieee754_atan2f+0xde>
 8005a60:	ee17 3a90 	vmov	r3, s15
 8005a64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a68:	ee07 3a90 	vmov	s15, r3
 8005a6c:	e787      	b.n	800597e <__ieee754_atan2f+0x26>
 8005a6e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005aac <__ieee754_atan2f+0x154>
 8005a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a76:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005ab0 <__ieee754_atan2f+0x158>
 8005a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a7e:	e77e      	b.n	800597e <__ieee754_atan2f+0x26>
 8005a80:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8005ab0 <__ieee754_atan2f+0x158>
 8005a84:	e77b      	b.n	800597e <__ieee754_atan2f+0x26>
 8005a86:	bf00      	nop
 8005a88:	c0490fdb 	.word	0xc0490fdb
 8005a8c:	3fc90fdb 	.word	0x3fc90fdb
 8005a90:	bfc90fdb 	.word	0xbfc90fdb
 8005a94:	bf490fdb 	.word	0xbf490fdb
 8005a98:	3f490fdb 	.word	0x3f490fdb
 8005a9c:	4016cbe4 	.word	0x4016cbe4
 8005aa0:	c016cbe4 	.word	0xc016cbe4
 8005aa4:	80000000 	.word	0x80000000
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	33bbbd2e 	.word	0x33bbbd2e
 8005ab0:	40490fdb 	.word	0x40490fdb

08005ab4 <__ieee754_powf>:
 8005ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab8:	ee10 5a90 	vmov	r5, s1
 8005abc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8005ac0:	ed2d 8b02 	vpush	{d8}
 8005ac4:	eeb0 8a40 	vmov.f32	s16, s0
 8005ac8:	eef0 8a60 	vmov.f32	s17, s1
 8005acc:	f000 8293 	beq.w	8005ff6 <__ieee754_powf+0x542>
 8005ad0:	ee10 8a10 	vmov	r8, s0
 8005ad4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8005ad8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005adc:	dc06      	bgt.n	8005aec <__ieee754_powf+0x38>
 8005ade:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005ae2:	dd0a      	ble.n	8005afa <__ieee754_powf+0x46>
 8005ae4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005ae8:	f000 8285 	beq.w	8005ff6 <__ieee754_powf+0x542>
 8005aec:	ecbd 8b02 	vpop	{d8}
 8005af0:	48d9      	ldr	r0, [pc, #868]	; (8005e58 <__ieee754_powf+0x3a4>)
 8005af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af6:	f000 bb91 	b.w	800621c <nanf>
 8005afa:	f1b8 0f00 	cmp.w	r8, #0
 8005afe:	da1d      	bge.n	8005b3c <__ieee754_powf+0x88>
 8005b00:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8005b04:	da2c      	bge.n	8005b60 <__ieee754_powf+0xac>
 8005b06:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005b0a:	db30      	blt.n	8005b6e <__ieee754_powf+0xba>
 8005b0c:	15fb      	asrs	r3, r7, #23
 8005b0e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005b12:	fa47 f603 	asr.w	r6, r7, r3
 8005b16:	fa06 f303 	lsl.w	r3, r6, r3
 8005b1a:	42bb      	cmp	r3, r7
 8005b1c:	d127      	bne.n	8005b6e <__ieee754_powf+0xba>
 8005b1e:	f006 0601 	and.w	r6, r6, #1
 8005b22:	f1c6 0602 	rsb	r6, r6, #2
 8005b26:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005b2a:	d122      	bne.n	8005b72 <__ieee754_powf+0xbe>
 8005b2c:	2d00      	cmp	r5, #0
 8005b2e:	f280 8268 	bge.w	8006002 <__ieee754_powf+0x54e>
 8005b32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005b36:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005b3a:	e00d      	b.n	8005b58 <__ieee754_powf+0xa4>
 8005b3c:	2600      	movs	r6, #0
 8005b3e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005b42:	d1f0      	bne.n	8005b26 <__ieee754_powf+0x72>
 8005b44:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005b48:	f000 8255 	beq.w	8005ff6 <__ieee754_powf+0x542>
 8005b4c:	dd0a      	ble.n	8005b64 <__ieee754_powf+0xb0>
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	f280 8254 	bge.w	8005ffc <__ieee754_powf+0x548>
 8005b54:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8005e5c <__ieee754_powf+0x3a8>
 8005b58:	ecbd 8b02 	vpop	{d8}
 8005b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b60:	2602      	movs	r6, #2
 8005b62:	e7ec      	b.n	8005b3e <__ieee754_powf+0x8a>
 8005b64:	2d00      	cmp	r5, #0
 8005b66:	daf5      	bge.n	8005b54 <__ieee754_powf+0xa0>
 8005b68:	eeb1 0a68 	vneg.f32	s0, s17
 8005b6c:	e7f4      	b.n	8005b58 <__ieee754_powf+0xa4>
 8005b6e:	2600      	movs	r6, #0
 8005b70:	e7d9      	b.n	8005b26 <__ieee754_powf+0x72>
 8005b72:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8005b76:	d102      	bne.n	8005b7e <__ieee754_powf+0xca>
 8005b78:	ee28 0a08 	vmul.f32	s0, s16, s16
 8005b7c:	e7ec      	b.n	8005b58 <__ieee754_powf+0xa4>
 8005b7e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8005b82:	eeb0 0a48 	vmov.f32	s0, s16
 8005b86:	d108      	bne.n	8005b9a <__ieee754_powf+0xe6>
 8005b88:	f1b8 0f00 	cmp.w	r8, #0
 8005b8c:	db05      	blt.n	8005b9a <__ieee754_powf+0xe6>
 8005b8e:	ecbd 8b02 	vpop	{d8}
 8005b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b96:	f000 ba4d 	b.w	8006034 <__ieee754_sqrtf>
 8005b9a:	f000 fb2d 	bl	80061f8 <fabsf>
 8005b9e:	b124      	cbz	r4, 8005baa <__ieee754_powf+0xf6>
 8005ba0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8005ba4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8005ba8:	d117      	bne.n	8005bda <__ieee754_powf+0x126>
 8005baa:	2d00      	cmp	r5, #0
 8005bac:	bfbc      	itt	lt
 8005bae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8005bb2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005bb6:	f1b8 0f00 	cmp.w	r8, #0
 8005bba:	dacd      	bge.n	8005b58 <__ieee754_powf+0xa4>
 8005bbc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8005bc0:	ea54 0306 	orrs.w	r3, r4, r6
 8005bc4:	d104      	bne.n	8005bd0 <__ieee754_powf+0x11c>
 8005bc6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005bca:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005bce:	e7c3      	b.n	8005b58 <__ieee754_powf+0xa4>
 8005bd0:	2e01      	cmp	r6, #1
 8005bd2:	d1c1      	bne.n	8005b58 <__ieee754_powf+0xa4>
 8005bd4:	eeb1 0a40 	vneg.f32	s0, s0
 8005bd8:	e7be      	b.n	8005b58 <__ieee754_powf+0xa4>
 8005bda:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8005bde:	3801      	subs	r0, #1
 8005be0:	ea56 0300 	orrs.w	r3, r6, r0
 8005be4:	d104      	bne.n	8005bf0 <__ieee754_powf+0x13c>
 8005be6:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005bea:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005bee:	e7b3      	b.n	8005b58 <__ieee754_powf+0xa4>
 8005bf0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8005bf4:	dd6d      	ble.n	8005cd2 <__ieee754_powf+0x21e>
 8005bf6:	4b9a      	ldr	r3, [pc, #616]	; (8005e60 <__ieee754_powf+0x3ac>)
 8005bf8:	429c      	cmp	r4, r3
 8005bfa:	dc06      	bgt.n	8005c0a <__ieee754_powf+0x156>
 8005bfc:	2d00      	cmp	r5, #0
 8005bfe:	daa9      	bge.n	8005b54 <__ieee754_powf+0xa0>
 8005c00:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8005e64 <__ieee754_powf+0x3b0>
 8005c04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005c08:	e7a6      	b.n	8005b58 <__ieee754_powf+0xa4>
 8005c0a:	4b97      	ldr	r3, [pc, #604]	; (8005e68 <__ieee754_powf+0x3b4>)
 8005c0c:	429c      	cmp	r4, r3
 8005c0e:	dd02      	ble.n	8005c16 <__ieee754_powf+0x162>
 8005c10:	2d00      	cmp	r5, #0
 8005c12:	dcf5      	bgt.n	8005c00 <__ieee754_powf+0x14c>
 8005c14:	e79e      	b.n	8005b54 <__ieee754_powf+0xa0>
 8005c16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005c1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005c1e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8005e6c <__ieee754_powf+0x3b8>
 8005c22:	eef1 6a40 	vneg.f32	s13, s0
 8005c26:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005c2a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005c32:	eee7 7a40 	vfms.f32	s15, s14, s0
 8005c36:	ee60 0a00 	vmul.f32	s1, s0, s0
 8005c3a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8005e70 <__ieee754_powf+0x3bc>
 8005c3e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8005c42:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8005e74 <__ieee754_powf+0x3c0>
 8005c46:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8005c4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005c4e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005e78 <__ieee754_powf+0x3c4>
 8005c52:	eeb0 6a67 	vmov.f32	s12, s15
 8005c56:	eea0 6a07 	vfma.f32	s12, s0, s14
 8005c5a:	ee16 3a10 	vmov	r3, s12
 8005c5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005c62:	f023 030f 	bic.w	r3, r3, #15
 8005c66:	ee00 3a90 	vmov	s1, r3
 8005c6a:	eee6 0a87 	vfma.f32	s1, s13, s14
 8005c6e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005c72:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8005c76:	f025 050f 	bic.w	r5, r5, #15
 8005c7a:	ee07 5a10 	vmov	s14, r5
 8005c7e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005c82:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8005c8e:	3e01      	subs	r6, #1
 8005c90:	ea56 0200 	orrs.w	r2, r6, r0
 8005c94:	ee07 5a10 	vmov	s14, r5
 8005c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c9c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005ca0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005ca4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005ca8:	ee17 4a10 	vmov	r4, s14
 8005cac:	bf08      	it	eq
 8005cae:	eeb0 8a40 	vmoveq.f32	s16, s0
 8005cb2:	2c00      	cmp	r4, #0
 8005cb4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005cb8:	f340 8184 	ble.w	8005fc4 <__ieee754_powf+0x510>
 8005cbc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8005cc0:	f340 80fc 	ble.w	8005ebc <__ieee754_powf+0x408>
 8005cc4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8005e64 <__ieee754_powf+0x3b0>
 8005cc8:	ee28 0a27 	vmul.f32	s0, s16, s15
 8005ccc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005cd0:	e742      	b.n	8005b58 <__ieee754_powf+0xa4>
 8005cd2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8005cd6:	bfbf      	itttt	lt
 8005cd8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8005e7c <__ieee754_powf+0x3c8>
 8005cdc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005ce0:	f06f 0217 	mvnlt.w	r2, #23
 8005ce4:	ee17 4a90 	vmovlt	r4, s15
 8005ce8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8005cec:	bfa8      	it	ge
 8005cee:	2200      	movge	r2, #0
 8005cf0:	3b7f      	subs	r3, #127	; 0x7f
 8005cf2:	4413      	add	r3, r2
 8005cf4:	4a62      	ldr	r2, [pc, #392]	; (8005e80 <__ieee754_powf+0x3cc>)
 8005cf6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8005cfa:	4294      	cmp	r4, r2
 8005cfc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8005d00:	dd06      	ble.n	8005d10 <__ieee754_powf+0x25c>
 8005d02:	4a60      	ldr	r2, [pc, #384]	; (8005e84 <__ieee754_powf+0x3d0>)
 8005d04:	4294      	cmp	r4, r2
 8005d06:	f340 80a5 	ble.w	8005e54 <__ieee754_powf+0x3a0>
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8005d10:	2400      	movs	r4, #0
 8005d12:	4a5d      	ldr	r2, [pc, #372]	; (8005e88 <__ieee754_powf+0x3d4>)
 8005d14:	00a7      	lsls	r7, r4, #2
 8005d16:	443a      	add	r2, r7
 8005d18:	ee07 1a90 	vmov	s15, r1
 8005d1c:	ed92 7a00 	vldr	s14, [r2]
 8005d20:	4a5a      	ldr	r2, [pc, #360]	; (8005e8c <__ieee754_powf+0x3d8>)
 8005d22:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005d26:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005d2a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8005d2e:	1049      	asrs	r1, r1, #1
 8005d30:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005d34:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8005d38:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8005d3c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005d40:	ee06 1a10 	vmov	s12, r1
 8005d44:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8005d48:	ee14 ca90 	vmov	ip, s9
 8005d4c:	ea02 0c0c 	and.w	ip, r2, ip
 8005d50:	ee05 ca10 	vmov	s10, ip
 8005d54:	eeb1 4a45 	vneg.f32	s8, s10
 8005d58:	eee4 5a06 	vfma.f32	s11, s8, s12
 8005d5c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005d60:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005e90 <__ieee754_powf+0x3dc>
 8005d64:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8005d68:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8005d6c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8005d70:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8005d74:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8005d78:	eddf 5a46 	vldr	s11, [pc, #280]	; 8005e94 <__ieee754_powf+0x3e0>
 8005d7c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005d80:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e98 <__ieee754_powf+0x3e4>
 8005d84:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005d88:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005e6c <__ieee754_powf+0x3b8>
 8005d8c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005d90:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005e9c <__ieee754_powf+0x3e8>
 8005d94:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005d98:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005ea0 <__ieee754_powf+0x3ec>
 8005d9c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8005da0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005da4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005da8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8005dac:	eef0 7a65 	vmov.f32	s15, s11
 8005db0:	eee3 6a87 	vfma.f32	s13, s7, s14
 8005db4:	eee5 7a05 	vfma.f32	s15, s10, s10
 8005db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dbc:	ee17 1a90 	vmov	r1, s15
 8005dc0:	4011      	ands	r1, r2
 8005dc2:	ee07 1a90 	vmov	s15, r1
 8005dc6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8005dca:	eddf 5a36 	vldr	s11, [pc, #216]	; 8005ea4 <__ieee754_powf+0x3f0>
 8005dce:	eea4 7a05 	vfma.f32	s14, s8, s10
 8005dd2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005dd6:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005dda:	eea7 7a86 	vfma.f32	s14, s15, s12
 8005dde:	eeb0 6a47 	vmov.f32	s12, s14
 8005de2:	eea5 6a27 	vfma.f32	s12, s10, s15
 8005de6:	ee16 1a10 	vmov	r1, s12
 8005dea:	4011      	ands	r1, r2
 8005dec:	ee06 1a90 	vmov	s13, r1
 8005df0:	eee4 6a27 	vfma.f32	s13, s8, s15
 8005df4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8005ea8 <__ieee754_powf+0x3f4>
 8005df8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005dfc:	ee06 1a10 	vmov	s12, r1
 8005e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e04:	eddf 7a29 	vldr	s15, [pc, #164]	; 8005eac <__ieee754_powf+0x3f8>
 8005e08:	4929      	ldr	r1, [pc, #164]	; (8005eb0 <__ieee754_powf+0x3fc>)
 8005e0a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8005e0e:	4439      	add	r1, r7
 8005e10:	edd1 7a00 	vldr	s15, [r1]
 8005e14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e18:	ee07 3a90 	vmov	s15, r3
 8005e1c:	eef0 0a47 	vmov.f32	s1, s14
 8005e20:	4b24      	ldr	r3, [pc, #144]	; (8005eb4 <__ieee754_powf+0x400>)
 8005e22:	eee6 0a25 	vfma.f32	s1, s12, s11
 8005e26:	443b      	add	r3, r7
 8005e28:	ed93 5a00 	vldr	s10, [r3]
 8005e2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e30:	ee70 0a85 	vadd.f32	s1, s1, s10
 8005e34:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8005e38:	ee17 3a90 	vmov	r3, s15
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e46:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005e4a:	eee6 7a65 	vfms.f32	s15, s12, s11
 8005e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e52:	e70e      	b.n	8005c72 <__ieee754_powf+0x1be>
 8005e54:	2401      	movs	r4, #1
 8005e56:	e75c      	b.n	8005d12 <__ieee754_powf+0x25e>
 8005e58:	080065d5 	.word	0x080065d5
 8005e5c:	00000000 	.word	0x00000000
 8005e60:	3f7ffff7 	.word	0x3f7ffff7
 8005e64:	7149f2ca 	.word	0x7149f2ca
 8005e68:	3f800007 	.word	0x3f800007
 8005e6c:	3eaaaaab 	.word	0x3eaaaaab
 8005e70:	36eca570 	.word	0x36eca570
 8005e74:	3fb8aa3b 	.word	0x3fb8aa3b
 8005e78:	3fb8aa00 	.word	0x3fb8aa00
 8005e7c:	4b800000 	.word	0x4b800000
 8005e80:	001cc471 	.word	0x001cc471
 8005e84:	005db3d6 	.word	0x005db3d6
 8005e88:	080065dc 	.word	0x080065dc
 8005e8c:	fffff000 	.word	0xfffff000
 8005e90:	3e6c3255 	.word	0x3e6c3255
 8005e94:	3e53f142 	.word	0x3e53f142
 8005e98:	3e8ba305 	.word	0x3e8ba305
 8005e9c:	3edb6db7 	.word	0x3edb6db7
 8005ea0:	3f19999a 	.word	0x3f19999a
 8005ea4:	3f763800 	.word	0x3f763800
 8005ea8:	3f76384f 	.word	0x3f76384f
 8005eac:	369dc3a0 	.word	0x369dc3a0
 8005eb0:	080065ec 	.word	0x080065ec
 8005eb4:	080065e4 	.word	0x080065e4
 8005eb8:	3338aa3c 	.word	0x3338aa3c
 8005ebc:	f040 8092 	bne.w	8005fe4 <__ieee754_powf+0x530>
 8005ec0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8005eb8 <__ieee754_powf+0x404>
 8005ec4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ec8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8005ecc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed4:	f73f aef6 	bgt.w	8005cc4 <__ieee754_powf+0x210>
 8005ed8:	15db      	asrs	r3, r3, #23
 8005eda:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8005ede:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005ee2:	4103      	asrs	r3, r0
 8005ee4:	4423      	add	r3, r4
 8005ee6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005eea:	4947      	ldr	r1, [pc, #284]	; (8006008 <__ieee754_powf+0x554>)
 8005eec:	3a7f      	subs	r2, #127	; 0x7f
 8005eee:	4111      	asrs	r1, r2
 8005ef0:	ea23 0101 	bic.w	r1, r3, r1
 8005ef4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8005ef8:	ee07 1a10 	vmov	s14, r1
 8005efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005f00:	f1c2 0217 	rsb	r2, r2, #23
 8005f04:	4110      	asrs	r0, r2
 8005f06:	2c00      	cmp	r4, #0
 8005f08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f0c:	bfb8      	it	lt
 8005f0e:	4240      	neglt	r0, r0
 8005f10:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8005f14:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800600c <__ieee754_powf+0x558>
 8005f18:	ee17 3a10 	vmov	r3, s14
 8005f1c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005f20:	f023 030f 	bic.w	r3, r3, #15
 8005f24:	ee07 3a10 	vmov	s14, r3
 8005f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f2c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005f30:	eddf 7a37 	vldr	s15, [pc, #220]	; 8006010 <__ieee754_powf+0x55c>
 8005f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f38:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8005f3c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8006014 <__ieee754_powf+0x560>
 8005f40:	eeb0 0a67 	vmov.f32	s0, s15
 8005f44:	eea7 0a26 	vfma.f32	s0, s14, s13
 8005f48:	eeb0 6a40 	vmov.f32	s12, s0
 8005f4c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8005f50:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005f54:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005f58:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006018 <__ieee754_powf+0x564>
 8005f5c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800601c <__ieee754_powf+0x568>
 8005f60:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005f64:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8006020 <__ieee754_powf+0x56c>
 8005f68:	eee6 6a07 	vfma.f32	s13, s12, s14
 8005f6c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8006024 <__ieee754_powf+0x570>
 8005f70:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005f74:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8006028 <__ieee754_powf+0x574>
 8005f78:	eee6 6a07 	vfma.f32	s13, s12, s14
 8005f7c:	eeb0 6a40 	vmov.f32	s12, s0
 8005f80:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005f84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005f88:	eeb0 7a46 	vmov.f32	s14, s12
 8005f8c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005f90:	ee20 6a06 	vmul.f32	s12, s0, s12
 8005f94:	eee0 7a27 	vfma.f32	s15, s0, s15
 8005f98:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fa0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005fa4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005fa8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005fac:	ee10 3a10 	vmov	r3, s0
 8005fb0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005fb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fb8:	da1a      	bge.n	8005ff0 <__ieee754_powf+0x53c>
 8005fba:	f000 f98f 	bl	80062dc <scalbnf>
 8005fbe:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005fc2:	e5c9      	b.n	8005b58 <__ieee754_powf+0xa4>
 8005fc4:	4a19      	ldr	r2, [pc, #100]	; (800602c <__ieee754_powf+0x578>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	dd02      	ble.n	8005fd0 <__ieee754_powf+0x51c>
 8005fca:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006030 <__ieee754_powf+0x57c>
 8005fce:	e67b      	b.n	8005cc8 <__ieee754_powf+0x214>
 8005fd0:	d108      	bne.n	8005fe4 <__ieee754_powf+0x530>
 8005fd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fd6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fde:	f6ff af7b 	blt.w	8005ed8 <__ieee754_powf+0x424>
 8005fe2:	e7f2      	b.n	8005fca <__ieee754_powf+0x516>
 8005fe4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8005fe8:	f73f af76 	bgt.w	8005ed8 <__ieee754_powf+0x424>
 8005fec:	2000      	movs	r0, #0
 8005fee:	e78f      	b.n	8005f10 <__ieee754_powf+0x45c>
 8005ff0:	ee00 3a10 	vmov	s0, r3
 8005ff4:	e7e3      	b.n	8005fbe <__ieee754_powf+0x50a>
 8005ff6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005ffa:	e5ad      	b.n	8005b58 <__ieee754_powf+0xa4>
 8005ffc:	eeb0 0a68 	vmov.f32	s0, s17
 8006000:	e5aa      	b.n	8005b58 <__ieee754_powf+0xa4>
 8006002:	eeb0 0a48 	vmov.f32	s0, s16
 8006006:	e5a7      	b.n	8005b58 <__ieee754_powf+0xa4>
 8006008:	007fffff 	.word	0x007fffff
 800600c:	3f317218 	.word	0x3f317218
 8006010:	35bfbe8c 	.word	0x35bfbe8c
 8006014:	3f317200 	.word	0x3f317200
 8006018:	3331bb4c 	.word	0x3331bb4c
 800601c:	b5ddea0e 	.word	0xb5ddea0e
 8006020:	388ab355 	.word	0x388ab355
 8006024:	bb360b61 	.word	0xbb360b61
 8006028:	3e2aaaab 	.word	0x3e2aaaab
 800602c:	43160000 	.word	0x43160000
 8006030:	0da24260 	.word	0x0da24260

08006034 <__ieee754_sqrtf>:
 8006034:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006038:	4770      	bx	lr

0800603a <matherr>:
 800603a:	2000      	movs	r0, #0
 800603c:	4770      	bx	lr
	...

08006040 <nan>:
 8006040:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006048 <nan+0x8>
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	00000000 	.word	0x00000000
 800604c:	7ff80000 	.word	0x7ff80000

08006050 <atanf>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	ee10 5a10 	vmov	r5, s0
 8006056:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800605a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800605e:	eef0 7a40 	vmov.f32	s15, s0
 8006062:	db10      	blt.n	8006086 <atanf+0x36>
 8006064:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006068:	dd04      	ble.n	8006074 <atanf+0x24>
 800606a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800606e:	eeb0 0a67 	vmov.f32	s0, s15
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80061ac <atanf+0x15c>
 8006078:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80061b0 <atanf+0x160>
 800607c:	2d00      	cmp	r5, #0
 800607e:	bfd8      	it	le
 8006080:	eef0 7a47 	vmovle.f32	s15, s14
 8006084:	e7f3      	b.n	800606e <atanf+0x1e>
 8006086:	4b4b      	ldr	r3, [pc, #300]	; (80061b4 <atanf+0x164>)
 8006088:	429c      	cmp	r4, r3
 800608a:	dc10      	bgt.n	80060ae <atanf+0x5e>
 800608c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8006090:	da0a      	bge.n	80060a8 <atanf+0x58>
 8006092:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80061b8 <atanf+0x168>
 8006096:	ee30 7a07 	vadd.f32	s14, s0, s14
 800609a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800609e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80060a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a6:	dce2      	bgt.n	800606e <atanf+0x1e>
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295
 80060ac:	e013      	b.n	80060d6 <atanf+0x86>
 80060ae:	f000 f8a3 	bl	80061f8 <fabsf>
 80060b2:	4b42      	ldr	r3, [pc, #264]	; (80061bc <atanf+0x16c>)
 80060b4:	429c      	cmp	r4, r3
 80060b6:	dc4f      	bgt.n	8006158 <atanf+0x108>
 80060b8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80060bc:	429c      	cmp	r4, r3
 80060be:	dc41      	bgt.n	8006144 <atanf+0xf4>
 80060c0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80060c4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80060c8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80060cc:	2300      	movs	r3, #0
 80060ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80060d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80060dc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80061c0 <atanf+0x170>
 80060e0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80061c4 <atanf+0x174>
 80060e4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80061c8 <atanf+0x178>
 80060e8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80060ec:	eee6 5a87 	vfma.f32	s11, s13, s14
 80060f0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80061cc <atanf+0x17c>
 80060f4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80060f8:	eddf 5a35 	vldr	s11, [pc, #212]	; 80061d0 <atanf+0x180>
 80060fc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006100:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80061d4 <atanf+0x184>
 8006104:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006108:	eddf 5a33 	vldr	s11, [pc, #204]	; 80061d8 <atanf+0x188>
 800610c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006110:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80061dc <atanf+0x18c>
 8006114:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006118:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80061e0 <atanf+0x190>
 800611c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006120:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80061e4 <atanf+0x194>
 8006124:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006128:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80061e8 <atanf+0x198>
 800612c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006130:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006134:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800613c:	d121      	bne.n	8006182 <atanf+0x132>
 800613e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006142:	e794      	b.n	800606e <atanf+0x1e>
 8006144:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006148:	ee30 7a67 	vsub.f32	s14, s0, s15
 800614c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006150:	2301      	movs	r3, #1
 8006152:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006156:	e7be      	b.n	80060d6 <atanf+0x86>
 8006158:	4b24      	ldr	r3, [pc, #144]	; (80061ec <atanf+0x19c>)
 800615a:	429c      	cmp	r4, r3
 800615c:	dc0b      	bgt.n	8006176 <atanf+0x126>
 800615e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8006162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006166:	eea0 7a27 	vfma.f32	s14, s0, s15
 800616a:	2302      	movs	r3, #2
 800616c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006174:	e7af      	b.n	80060d6 <atanf+0x86>
 8006176:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800617a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800617e:	2303      	movs	r3, #3
 8006180:	e7a9      	b.n	80060d6 <atanf+0x86>
 8006182:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <atanf+0x1a0>)
 8006184:	491b      	ldr	r1, [pc, #108]	; (80061f4 <atanf+0x1a4>)
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	441a      	add	r2, r3
 800618a:	440b      	add	r3, r1
 800618c:	edd3 6a00 	vldr	s13, [r3]
 8006190:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006194:	2d00      	cmp	r5, #0
 8006196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800619a:	ed92 7a00 	vldr	s14, [r2]
 800619e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061a2:	bfb8      	it	lt
 80061a4:	eef1 7a67 	vneglt.f32	s15, s15
 80061a8:	e761      	b.n	800606e <atanf+0x1e>
 80061aa:	bf00      	nop
 80061ac:	bfc90fdb 	.word	0xbfc90fdb
 80061b0:	3fc90fdb 	.word	0x3fc90fdb
 80061b4:	3edfffff 	.word	0x3edfffff
 80061b8:	7149f2ca 	.word	0x7149f2ca
 80061bc:	3f97ffff 	.word	0x3f97ffff
 80061c0:	3c8569d7 	.word	0x3c8569d7
 80061c4:	3d4bda59 	.word	0x3d4bda59
 80061c8:	bd6ef16b 	.word	0xbd6ef16b
 80061cc:	3d886b35 	.word	0x3d886b35
 80061d0:	3dba2e6e 	.word	0x3dba2e6e
 80061d4:	3e124925 	.word	0x3e124925
 80061d8:	3eaaaaab 	.word	0x3eaaaaab
 80061dc:	bd15a221 	.word	0xbd15a221
 80061e0:	bd9d8795 	.word	0xbd9d8795
 80061e4:	bde38e38 	.word	0xbde38e38
 80061e8:	be4ccccd 	.word	0xbe4ccccd
 80061ec:	401bffff 	.word	0x401bffff
 80061f0:	080065f4 	.word	0x080065f4
 80061f4:	08006604 	.word	0x08006604

080061f8 <fabsf>:
 80061f8:	ee10 3a10 	vmov	r3, s0
 80061fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006200:	ee00 3a10 	vmov	s0, r3
 8006204:	4770      	bx	lr

08006206 <finitef>:
 8006206:	ee10 3a10 	vmov	r3, s0
 800620a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800620e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006212:	bfac      	ite	ge
 8006214:	2000      	movge	r0, #0
 8006216:	2001      	movlt	r0, #1
 8006218:	4770      	bx	lr
	...

0800621c <nanf>:
 800621c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006224 <nanf+0x8>
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	7fc00000 	.word	0x7fc00000

08006228 <rintf>:
 8006228:	b513      	push	{r0, r1, r4, lr}
 800622a:	ee10 1a10 	vmov	r1, s0
 800622e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006232:	0ddc      	lsrs	r4, r3, #23
 8006234:	3c7f      	subs	r4, #127	; 0x7f
 8006236:	2c16      	cmp	r4, #22
 8006238:	dc46      	bgt.n	80062c8 <rintf+0xa0>
 800623a:	b32b      	cbz	r3, 8006288 <rintf+0x60>
 800623c:	2c00      	cmp	r4, #0
 800623e:	ee10 2a10 	vmov	r2, s0
 8006242:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8006246:	da21      	bge.n	800628c <rintf+0x64>
 8006248:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800624c:	425b      	negs	r3, r3
 800624e:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <rintf+0xac>)
 8006250:	0a5b      	lsrs	r3, r3, #9
 8006252:	0d09      	lsrs	r1, r1, #20
 8006254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006258:	0509      	lsls	r1, r1, #20
 800625a:	430b      	orrs	r3, r1
 800625c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006260:	ee07 3a90 	vmov	s15, r3
 8006264:	edd2 6a00 	vldr	s13, [r2]
 8006268:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800626c:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006270:	eddd 7a01 	vldr	s15, [sp, #4]
 8006274:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006278:	ee17 3a90 	vmov	r3, s15
 800627c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006280:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006284:	ee00 3a10 	vmov	s0, r3
 8006288:	b002      	add	sp, #8
 800628a:	bd10      	pop	{r4, pc}
 800628c:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <rintf+0xb0>)
 800628e:	4123      	asrs	r3, r4
 8006290:	4219      	tst	r1, r3
 8006292:	d0f9      	beq.n	8006288 <rintf+0x60>
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	4219      	tst	r1, r3
 8006298:	d006      	beq.n	80062a8 <rintf+0x80>
 800629a:	ea21 0203 	bic.w	r2, r1, r3
 800629e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80062a2:	fa43 f404 	asr.w	r4, r3, r4
 80062a6:	4322      	orrs	r2, r4
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <rintf+0xac>)
 80062aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062ae:	ed90 7a00 	vldr	s14, [r0]
 80062b2:	ee07 2a90 	vmov	s15, r2
 80062b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80062be:	ed9d 0a01 	vldr	s0, [sp, #4]
 80062c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80062c6:	e7df      	b.n	8006288 <rintf+0x60>
 80062c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80062cc:	d3dc      	bcc.n	8006288 <rintf+0x60>
 80062ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80062d2:	e7d9      	b.n	8006288 <rintf+0x60>
 80062d4:	08006614 	.word	0x08006614
 80062d8:	007fffff 	.word	0x007fffff

080062dc <scalbnf>:
 80062dc:	b508      	push	{r3, lr}
 80062de:	ee10 2a10 	vmov	r2, s0
 80062e2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80062e6:	ed2d 8b02 	vpush	{d8}
 80062ea:	eef0 0a40 	vmov.f32	s1, s0
 80062ee:	d004      	beq.n	80062fa <scalbnf+0x1e>
 80062f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80062f4:	d306      	bcc.n	8006304 <scalbnf+0x28>
 80062f6:	ee70 0a00 	vadd.f32	s1, s0, s0
 80062fa:	ecbd 8b02 	vpop	{d8}
 80062fe:	eeb0 0a60 	vmov.f32	s0, s1
 8006302:	bd08      	pop	{r3, pc}
 8006304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006308:	d21c      	bcs.n	8006344 <scalbnf+0x68>
 800630a:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <scalbnf+0xac>)
 800630c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800638c <scalbnf+0xb0>
 8006310:	4298      	cmp	r0, r3
 8006312:	ee60 0a27 	vmul.f32	s1, s0, s15
 8006316:	db10      	blt.n	800633a <scalbnf+0x5e>
 8006318:	ee10 2a90 	vmov	r2, s1
 800631c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8006320:	3b19      	subs	r3, #25
 8006322:	4403      	add	r3, r0
 8006324:	2bfe      	cmp	r3, #254	; 0xfe
 8006326:	dd0f      	ble.n	8006348 <scalbnf+0x6c>
 8006328:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8006390 <scalbnf+0xb4>
 800632c:	eeb0 0a48 	vmov.f32	s0, s16
 8006330:	f000 f834 	bl	800639c <copysignf>
 8006334:	ee60 0a08 	vmul.f32	s1, s0, s16
 8006338:	e7df      	b.n	80062fa <scalbnf+0x1e>
 800633a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006394 <scalbnf+0xb8>
 800633e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006342:	e7da      	b.n	80062fa <scalbnf+0x1e>
 8006344:	0ddb      	lsrs	r3, r3, #23
 8006346:	e7ec      	b.n	8006322 <scalbnf+0x46>
 8006348:	2b00      	cmp	r3, #0
 800634a:	dd06      	ble.n	800635a <scalbnf+0x7e>
 800634c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006350:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006354:	ee00 3a90 	vmov	s1, r3
 8006358:	e7cf      	b.n	80062fa <scalbnf+0x1e>
 800635a:	f113 0f16 	cmn.w	r3, #22
 800635e:	da06      	bge.n	800636e <scalbnf+0x92>
 8006360:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006364:	4298      	cmp	r0, r3
 8006366:	dcdf      	bgt.n	8006328 <scalbnf+0x4c>
 8006368:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8006394 <scalbnf+0xb8>
 800636c:	e7de      	b.n	800632c <scalbnf+0x50>
 800636e:	3319      	adds	r3, #25
 8006370:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006374:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006378:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006398 <scalbnf+0xbc>
 800637c:	ee07 3a10 	vmov	s14, r3
 8006380:	ee67 0a27 	vmul.f32	s1, s14, s15
 8006384:	e7b9      	b.n	80062fa <scalbnf+0x1e>
 8006386:	bf00      	nop
 8006388:	ffff3cb0 	.word	0xffff3cb0
 800638c:	4c000000 	.word	0x4c000000
 8006390:	7149f2ca 	.word	0x7149f2ca
 8006394:	0da24260 	.word	0x0da24260
 8006398:	33000000 	.word	0x33000000

0800639c <copysignf>:
 800639c:	ee10 3a10 	vmov	r3, s0
 80063a0:	ee10 2a90 	vmov	r2, s1
 80063a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80063ac:	4313      	orrs	r3, r2
 80063ae:	ee00 3a10 	vmov	s0, r3
 80063b2:	4770      	bx	lr

080063b4 <abort>:
 80063b4:	b508      	push	{r3, lr}
 80063b6:	2006      	movs	r0, #6
 80063b8:	f000 f8d0 	bl	800655c <raise>
 80063bc:	2001      	movs	r0, #1
 80063be:	f7fc f9e7 	bl	8002790 <_exit>
	...

080063c4 <__errno>:
 80063c4:	4b01      	ldr	r3, [pc, #4]	; (80063cc <__errno+0x8>)
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	20000020 	.word	0x20000020

080063d0 <__libc_init_array>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4e0d      	ldr	r6, [pc, #52]	; (8006408 <__libc_init_array+0x38>)
 80063d4:	4c0d      	ldr	r4, [pc, #52]	; (800640c <__libc_init_array+0x3c>)
 80063d6:	1ba4      	subs	r4, r4, r6
 80063d8:	10a4      	asrs	r4, r4, #2
 80063da:	2500      	movs	r5, #0
 80063dc:	42a5      	cmp	r5, r4
 80063de:	d109      	bne.n	80063f4 <__libc_init_array+0x24>
 80063e0:	4e0b      	ldr	r6, [pc, #44]	; (8006410 <__libc_init_array+0x40>)
 80063e2:	4c0c      	ldr	r4, [pc, #48]	; (8006414 <__libc_init_array+0x44>)
 80063e4:	f000 f8d8 	bl	8006598 <_init>
 80063e8:	1ba4      	subs	r4, r4, r6
 80063ea:	10a4      	asrs	r4, r4, #2
 80063ec:	2500      	movs	r5, #0
 80063ee:	42a5      	cmp	r5, r4
 80063f0:	d105      	bne.n	80063fe <__libc_init_array+0x2e>
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063f8:	4798      	blx	r3
 80063fa:	3501      	adds	r5, #1
 80063fc:	e7ee      	b.n	80063dc <__libc_init_array+0xc>
 80063fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006402:	4798      	blx	r3
 8006404:	3501      	adds	r5, #1
 8006406:	e7f2      	b.n	80063ee <__libc_init_array+0x1e>
 8006408:	08006624 	.word	0x08006624
 800640c:	08006624 	.word	0x08006624
 8006410:	08006624 	.word	0x08006624
 8006414:	0800662c 	.word	0x0800662c

08006418 <malloc>:
 8006418:	4b02      	ldr	r3, [pc, #8]	; (8006424 <malloc+0xc>)
 800641a:	4601      	mov	r1, r0
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	f000 b80b 	b.w	8006438 <_malloc_r>
 8006422:	bf00      	nop
 8006424:	20000020 	.word	0x20000020

08006428 <memset>:
 8006428:	4402      	add	r2, r0
 800642a:	4603      	mov	r3, r0
 800642c:	4293      	cmp	r3, r2
 800642e:	d100      	bne.n	8006432 <memset+0xa>
 8006430:	4770      	bx	lr
 8006432:	f803 1b01 	strb.w	r1, [r3], #1
 8006436:	e7f9      	b.n	800642c <memset+0x4>

08006438 <_malloc_r>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	1ccd      	adds	r5, r1, #3
 800643c:	f025 0503 	bic.w	r5, r5, #3
 8006440:	3508      	adds	r5, #8
 8006442:	2d0c      	cmp	r5, #12
 8006444:	bf38      	it	cc
 8006446:	250c      	movcc	r5, #12
 8006448:	2d00      	cmp	r5, #0
 800644a:	4606      	mov	r6, r0
 800644c:	db01      	blt.n	8006452 <_malloc_r+0x1a>
 800644e:	42a9      	cmp	r1, r5
 8006450:	d903      	bls.n	800645a <_malloc_r+0x22>
 8006452:	230c      	movs	r3, #12
 8006454:	6033      	str	r3, [r6, #0]
 8006456:	2000      	movs	r0, #0
 8006458:	bd70      	pop	{r4, r5, r6, pc}
 800645a:	f000 f89b 	bl	8006594 <__malloc_lock>
 800645e:	4a21      	ldr	r2, [pc, #132]	; (80064e4 <_malloc_r+0xac>)
 8006460:	6814      	ldr	r4, [r2, #0]
 8006462:	4621      	mov	r1, r4
 8006464:	b991      	cbnz	r1, 800648c <_malloc_r+0x54>
 8006466:	4c20      	ldr	r4, [pc, #128]	; (80064e8 <_malloc_r+0xb0>)
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	b91b      	cbnz	r3, 8006474 <_malloc_r+0x3c>
 800646c:	4630      	mov	r0, r6
 800646e:	f000 f83d 	bl	80064ec <_sbrk_r>
 8006472:	6020      	str	r0, [r4, #0]
 8006474:	4629      	mov	r1, r5
 8006476:	4630      	mov	r0, r6
 8006478:	f000 f838 	bl	80064ec <_sbrk_r>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d124      	bne.n	80064ca <_malloc_r+0x92>
 8006480:	230c      	movs	r3, #12
 8006482:	6033      	str	r3, [r6, #0]
 8006484:	4630      	mov	r0, r6
 8006486:	f000 f886 	bl	8006596 <__malloc_unlock>
 800648a:	e7e4      	b.n	8006456 <_malloc_r+0x1e>
 800648c:	680b      	ldr	r3, [r1, #0]
 800648e:	1b5b      	subs	r3, r3, r5
 8006490:	d418      	bmi.n	80064c4 <_malloc_r+0x8c>
 8006492:	2b0b      	cmp	r3, #11
 8006494:	d90f      	bls.n	80064b6 <_malloc_r+0x7e>
 8006496:	600b      	str	r3, [r1, #0]
 8006498:	50cd      	str	r5, [r1, r3]
 800649a:	18cc      	adds	r4, r1, r3
 800649c:	4630      	mov	r0, r6
 800649e:	f000 f87a 	bl	8006596 <__malloc_unlock>
 80064a2:	f104 000b 	add.w	r0, r4, #11
 80064a6:	1d23      	adds	r3, r4, #4
 80064a8:	f020 0007 	bic.w	r0, r0, #7
 80064ac:	1ac3      	subs	r3, r0, r3
 80064ae:	d0d3      	beq.n	8006458 <_malloc_r+0x20>
 80064b0:	425a      	negs	r2, r3
 80064b2:	50e2      	str	r2, [r4, r3]
 80064b4:	e7d0      	b.n	8006458 <_malloc_r+0x20>
 80064b6:	428c      	cmp	r4, r1
 80064b8:	684b      	ldr	r3, [r1, #4]
 80064ba:	bf16      	itet	ne
 80064bc:	6063      	strne	r3, [r4, #4]
 80064be:	6013      	streq	r3, [r2, #0]
 80064c0:	460c      	movne	r4, r1
 80064c2:	e7eb      	b.n	800649c <_malloc_r+0x64>
 80064c4:	460c      	mov	r4, r1
 80064c6:	6849      	ldr	r1, [r1, #4]
 80064c8:	e7cc      	b.n	8006464 <_malloc_r+0x2c>
 80064ca:	1cc4      	adds	r4, r0, #3
 80064cc:	f024 0403 	bic.w	r4, r4, #3
 80064d0:	42a0      	cmp	r0, r4
 80064d2:	d005      	beq.n	80064e0 <_malloc_r+0xa8>
 80064d4:	1a21      	subs	r1, r4, r0
 80064d6:	4630      	mov	r0, r6
 80064d8:	f000 f808 	bl	80064ec <_sbrk_r>
 80064dc:	3001      	adds	r0, #1
 80064de:	d0cf      	beq.n	8006480 <_malloc_r+0x48>
 80064e0:	6025      	str	r5, [r4, #0]
 80064e2:	e7db      	b.n	800649c <_malloc_r+0x64>
 80064e4:	20000204 	.word	0x20000204
 80064e8:	20000208 	.word	0x20000208

080064ec <_sbrk_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4c06      	ldr	r4, [pc, #24]	; (8006508 <_sbrk_r+0x1c>)
 80064f0:	2300      	movs	r3, #0
 80064f2:	4605      	mov	r5, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	f7fc f954 	bl	80027a4 <_sbrk>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d102      	bne.n	8006506 <_sbrk_r+0x1a>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	b103      	cbz	r3, 8006506 <_sbrk_r+0x1a>
 8006504:	602b      	str	r3, [r5, #0]
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	20000564 	.word	0x20000564

0800650c <_raise_r>:
 800650c:	291f      	cmp	r1, #31
 800650e:	b538      	push	{r3, r4, r5, lr}
 8006510:	4604      	mov	r4, r0
 8006512:	460d      	mov	r5, r1
 8006514:	d904      	bls.n	8006520 <_raise_r+0x14>
 8006516:	2316      	movs	r3, #22
 8006518:	6003      	str	r3, [r0, #0]
 800651a:	f04f 30ff 	mov.w	r0, #4294967295
 800651e:	bd38      	pop	{r3, r4, r5, pc}
 8006520:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006522:	b112      	cbz	r2, 800652a <_raise_r+0x1e>
 8006524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006528:	b94b      	cbnz	r3, 800653e <_raise_r+0x32>
 800652a:	4620      	mov	r0, r4
 800652c:	f000 f830 	bl	8006590 <_getpid_r>
 8006530:	462a      	mov	r2, r5
 8006532:	4601      	mov	r1, r0
 8006534:	4620      	mov	r0, r4
 8006536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800653a:	f000 b817 	b.w	800656c <_kill_r>
 800653e:	2b01      	cmp	r3, #1
 8006540:	d00a      	beq.n	8006558 <_raise_r+0x4c>
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	d103      	bne.n	800654e <_raise_r+0x42>
 8006546:	2316      	movs	r3, #22
 8006548:	6003      	str	r3, [r0, #0]
 800654a:	2001      	movs	r0, #1
 800654c:	e7e7      	b.n	800651e <_raise_r+0x12>
 800654e:	2400      	movs	r4, #0
 8006550:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006554:	4628      	mov	r0, r5
 8006556:	4798      	blx	r3
 8006558:	2000      	movs	r0, #0
 800655a:	e7e0      	b.n	800651e <_raise_r+0x12>

0800655c <raise>:
 800655c:	4b02      	ldr	r3, [pc, #8]	; (8006568 <raise+0xc>)
 800655e:	4601      	mov	r1, r0
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	f7ff bfd3 	b.w	800650c <_raise_r>
 8006566:	bf00      	nop
 8006568:	20000020 	.word	0x20000020

0800656c <_kill_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4c07      	ldr	r4, [pc, #28]	; (800658c <_kill_r+0x20>)
 8006570:	2300      	movs	r3, #0
 8006572:	4605      	mov	r5, r0
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	f7fc f8f9 	bl	8002770 <_kill>
 800657e:	1c43      	adds	r3, r0, #1
 8006580:	d102      	bne.n	8006588 <_kill_r+0x1c>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	b103      	cbz	r3, 8006588 <_kill_r+0x1c>
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	bd38      	pop	{r3, r4, r5, pc}
 800658a:	bf00      	nop
 800658c:	20000564 	.word	0x20000564

08006590 <_getpid_r>:
 8006590:	f7fc b8e6 	b.w	8002760 <_getpid>

08006594 <__malloc_lock>:
 8006594:	4770      	bx	lr

08006596 <__malloc_unlock>:
 8006596:	4770      	bx	lr

08006598 <_init>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	bf00      	nop
 800659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659e:	bc08      	pop	{r3}
 80065a0:	469e      	mov	lr, r3
 80065a2:	4770      	bx	lr

080065a4 <_fini>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr
