
STM32F405_DJI_rpi_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a7c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08008c04  08008c04  00018c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d74  08008d74  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d7c  08008d7c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d7c  08008d7c  00018d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d80  08008d80  00018d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000088  08008e0c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200006d0  08008e0c  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169cc  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003355  00000000  00000000  00036a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001468  00000000  00000000  00039de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e0  00000000  00000000  0003b248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023385  00000000  00000000  0003c528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000122df  00000000  00000000  0005f8ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ceaa1  00000000  00000000  00071b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014062d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a40  00000000  00000000  001406a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bec 	.word	0x08008bec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08008bec 	.word	0x08008bec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	ed93 7a00 	vldr	s14, [r3]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	edd3 7a00 	vldr	s15, [r3]
 8000e54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	edd3 6a00 	vldr	s13, [r3]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3304      	adds	r3, #4
 8000e64:	edd3 7a00 	vldr	s15, [r3]
 8000e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3308      	adds	r3, #8
 8000e74:	edd3 6a00 	vldr	s13, [r3]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	330c      	adds	r3, #12
 8000e8c:	edd3 6a00 	vldr	s13, [r3]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	330c      	adds	r3, #12
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea4:	f000 f91e 	bl	80010e4 <invSqrt>
 8000ea8:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	edd3 7a00 	vldr	s15, [r3]
 8000eb2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eba:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ece:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3308      	adds	r3, #8
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee2:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	330c      	adds	r3, #12
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef6:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8000efa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f06:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f16:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000f1a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f26:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f36:	edd7 6a04 	vldr	s13, [r7, #16]
 8000f3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f46:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f56:	eef0 0a67 	vmov.f32	s1, s15
 8000f5a:	eeb0 0a46 	vmov.f32	s0, s12
 8000f5e:	f006 fe17 	bl	8007b90 <atan2f>
 8000f62:	eef0 7a40 	vmov.f32	s15, s0
 8000f66:	4b59      	ldr	r3, [pc, #356]	; (80010cc <Quaternion_Update+0x28c>)
 8000f68:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8000f6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f78:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f90:	f006 fda6 	bl	8007ae0 <asinf>
 8000f94:	eef0 7a40 	vmov.f32	s15, s0
 8000f98:	eef1 7a67 	vneg.f32	s15, s15
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <Quaternion_Update+0x290>)
 8000f9e:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8000fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fae:	edd7 6a04 	vldr	s13, [r7, #16]
 8000fb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fbe:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000fc2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fce:	edd7 6a05 	vldr	s13, [r7, #20]
 8000fd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fde:	edd7 6a04 	vldr	s13, [r7, #16]
 8000fe2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fee:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ff2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffe:	eef0 0a67 	vmov.f32	s1, s15
 8001002:	eeb0 0a46 	vmov.f32	s0, s12
 8001006:	f006 fdc3 	bl	8007b90 <atan2f>
 800100a:	eef0 7a40 	vmov.f32	s15, s0
 800100e:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <Quaternion_Update+0x294>)
 8001010:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <Quaternion_Update+0x28c>)
 8001016:	edd3 7a00 	vldr	s15, [r3]
 800101a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80010d8 <Quaternion_Update+0x298>
 800101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <Quaternion_Update+0x28c>)
 8001024:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <Quaternion_Update+0x290>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80010d8 <Quaternion_Update+0x298>
 8001032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <Quaternion_Update+0x290>)
 8001038:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <Quaternion_Update+0x294>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80010d8 <Quaternion_Update+0x298>
 8001046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <Quaternion_Update+0x294>)
 800104c:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <Quaternion_Update+0x294>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	db0a      	blt.n	8001076 <Quaternion_Update+0x236>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <Quaternion_Update+0x294>)
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80010dc <Quaternion_Update+0x29c>
 800106a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <Quaternion_Update+0x294>)
 8001070:	edc3 7a00 	vstr	s15, [r3]
 8001074:	e007      	b.n	8001086 <Quaternion_Update+0x246>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <Quaternion_Update+0x294>)
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	eef1 7a67 	vneg.f32	s15, s15
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <Quaternion_Update+0x294>)
 8001082:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <Quaternion_Update+0x28c>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	db0a      	blt.n	80010ac <Quaternion_Update+0x26c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <Quaternion_Update+0x28c>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80010e0 <Quaternion_Update+0x2a0>
 80010a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <Quaternion_Update+0x28c>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 80010aa:	e00b      	b.n	80010c4 <Quaternion_Update+0x284>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <Quaternion_Update+0x28c>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80010e0 <Quaternion_Update+0x2a0>
 80010b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ba:	eef1 7a67 	vneg.f32	s15, s15
 80010be:	4b03      	ldr	r3, [pc, #12]	; (80010cc <Quaternion_Update+0x28c>)
 80010c0:	edc3 7a00 	vstr	s15, [r3]
}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000d4 	.word	0x200000d4
 80010d0:	200000cc 	.word	0x200000cc
 80010d4:	200000d0 	.word	0x200000d0
 80010d8:	42652ee1 	.word	0x42652ee1
 80010dc:	43b40000 	.word	0x43b40000
 80010e0:	43340000 	.word	0x43340000

080010e4 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80010ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	105a      	asrs	r2, r3, #1
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <invSqrt+0x74>)
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800111c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001120:	edd7 7a05 	vldr	s15, [r7, #20]
 8001124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001128:	edd7 7a04 	vldr	s15, [r7, #16]
 800112c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001130:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001134:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001138:	edd7 7a04 	vldr	s15, [r7, #16]
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	ee07 3a90 	vmov	s15, r3
}
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	5f3759df 	.word	0x5f3759df

0800115c <TrOne_WhoAmI>:
uint8_t aa;
uint8_t addr[1];  // primoz
uint16_t datr;


TERAONE_Result TrOne_WhoAmI(TRONE_Str *senStruct) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af04      	add	r7, sp, #16
 8001162:	6078      	str	r0, [r7, #4]
		/* Return error */
	//	return TERAONE_ERROR;
	//}
	
	/* Check who am I */
	HAL_Delay(1000);
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f001 ff7c 	bl	8003064 <HAL_Delay>
	//val[0]	= TRONE_WHO_AM_I;
	//uint8_t who_i = TRONE_WHO_AM_I;
	HAL_I2C_Mem_Read(senStruct->i2cHandle, (uint16_t)senStruct->Address, TRONE_WHO_AM_I, 1, val, 4, 500);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	b299      	uxth	r1, r3
 8001176:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	2304      	movs	r3, #4
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <TrOne_WhoAmI+0x48>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2201      	movs	r2, #1
 8001188:	f003 f95a 	bl	8004440 <HAL_I2C_Mem_Read>
	
	if (val[0] != TRONE_I_AM) {
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <TrOne_WhoAmI+0x48>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2ba1      	cmp	r3, #161	; 0xa1
 8001192:	d001      	beq.n	8001198 <TrOne_WhoAmI+0x3c>
		/* Return error */
		return TERAONE_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <TrOne_WhoAmI+0x3e>
	}
	
  return TERAONE_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000dc 	.word	0x200000dc

080011a8 <TrOne_ReadDist>:

TERAONE_Result TrOne_ReadDist(TRONE_Str *senStruct){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
	
	
	HAL_I2C_Master_Receive(senStruct->i2cHandle, (uint16_t)senStruct->Address, val, 3, 300);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	791b      	ldrb	r3, [r3, #4]
 80011b8:	b299      	uxth	r1, r3
 80011ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2303      	movs	r3, #3
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <TrOne_ReadDist+0x64>)
 80011c4:	f002 ff16 	bl	8003ff4 <HAL_I2C_Master_Receive>
	
	//HAL_I2C_Mem_Read(senStruct->i2cHandle, (uint16_t)senStruct->Address, TRONE_WHO_AM_I, 1, val, 4, 500);
	senStruct->distance = (uint16_t)((val[0] << 8) | val[1]);
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <TrOne_ReadDist+0x64>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <TrOne_ReadDist+0x64>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	80da      	strh	r2, [r3, #6]
	aa = TrOne_crc8(val, 2);
 80011e0:	2102      	movs	r1, #2
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <TrOne_ReadDist+0x64>)
 80011e4:	f000 f816 	bl	8001214 <TrOne_crc8>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <TrOne_ReadDist+0x68>)
 80011ee:	701a      	strb	r2, [r3, #0]
	if(aa != val[2]){
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <TrOne_ReadDist+0x64>)
 80011f2:	789a      	ldrb	r2, [r3, #2]
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <TrOne_ReadDist+0x68>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d001      	beq.n	8001200 <TrOne_ReadDist+0x58>
		return TERAONE_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <TrOne_ReadDist+0x5a>
	}
	
	return TERAONE_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200000dc 	.word	0x200000dc
 8001210:	200000db 	.word	0x200000db

08001214 <TrOne_crc8>:
 * Brief : Calculate a Cyclic Redundancy Checks of 8 bits
 * Param1 : (*p) pointer to receive buffer
 * Param2 : (len) number of bytes returned by the TeraRanger
 * Return : (crc & 0xFF) checksum calculated locally
 */
uint8_t TrOne_crc8(uint8_t *p, uint8_t len) {
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t crc = 0x0;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
  while (len--) {
 8001224:	e010      	b.n	8001248 <TrOne_crc8+0x34>
    i = (crc ^ *p++) & 0xFF;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	4053      	eors	r3, r2
 8001232:	73bb      	strb	r3, [r7, #14]
    crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <TrOne_crc8+0x4c>)
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	b25a      	sxtb	r2, r3
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b25b      	sxtb	r3, r3
 8001242:	4053      	eors	r3, r2
 8001244:	b25b      	sxtb	r3, r3
 8001246:	73fb      	strb	r3, [r7, #15]
  while (len--) {
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	70fa      	strb	r2, [r7, #3]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1e9      	bne.n	8001226 <TrOne_crc8+0x12>
  }
  return crc & 0xFF;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	08008c04 	.word	0x08008c04

08001264 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b02      	cmp	r3, #2
 800129c:	d101      	bne.n	80012a2 <LL_SPI_IsActiveFlag_TXE+0x18>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c0:	2b80      	cmp	r3, #128	; 0x80
 80012c2:	d101      	bne.n	80012c8 <LL_SPI_IsActiveFlag_BSY+0x18>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <LL_SPI_IsActiveFlag_BSY+0x1a>
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	b2db      	uxtb	r3, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	330c      	adds	r3, #12
 8001300:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	78fa      	ldrb	r2, [r7, #3]
 8001306:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <bno080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float bno080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	ed2d 8b02 	vpush	{d8}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	80fb      	strh	r3, [r7, #6]
 8001324:	4613      	mov	r3, r2
 8001326:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001334:	797b      	ldrb	r3, [r7, #5]
 8001336:	425b      	negs	r3, r3
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001340:	eef0 0a67 	vmov.f32	s1, s15
 8001344:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001348:	f006 fc24 	bl	8007b94 <powf>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
 8001350:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001354:	eeb0 0a67 	vmov.f32	s0, s15
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	ecbd 8b02 	vpop	{d8}
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void parseCommandReport(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <parseCommandReport+0x30>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2bf1      	cmp	r3, #241	; 0xf1
 8001370:	d109      	bne.n	8001386 <parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <parseCommandReport+0x30>)
 8001374:	789b      	ldrb	r3, [r3, #2]
 8001376:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b07      	cmp	r3, #7
 800137c:	d103      	bne.n	8001386 <parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <parseCommandReport+0x30>)
 8001380:	795a      	ldrb	r2, [r3, #5]
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <parseCommandReport+0x34>)
 8001384:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000134 	.word	0x20000134
 8001398:	200001b7 	.word	0x200001b7

0800139c <parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void parseInputReport(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80013a2:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <parseInputReport+0x20c>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	4b7f      	ldr	r3, [pc, #508]	; (80015a8 <parseInputReport+0x20c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80013b4:	8a3b      	ldrh	r3, [r7, #16]
 80013b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013ba:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80013bc:	8a3b      	ldrh	r3, [r7, #16]
 80013be:	3b04      	subs	r3, #4
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80013c4:	4b79      	ldr	r3, [pc, #484]	; (80015ac <parseInputReport+0x210>)
 80013c6:	791b      	ldrb	r3, [r3, #4]
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	4a78      	ldr	r2, [pc, #480]	; (80015ac <parseInputReport+0x210>)
 80013cc:	78d2      	ldrb	r2, [r2, #3]
 80013ce:	0412      	lsls	r2, r2, #16
 80013d0:	4313      	orrs	r3, r2
 80013d2:	4a76      	ldr	r2, [pc, #472]	; (80015ac <parseInputReport+0x210>)
 80013d4:	7892      	ldrb	r2, [r2, #2]
 80013d6:	0212      	lsls	r2, r2, #8
 80013d8:	4313      	orrs	r3, r2
 80013da:	4a74      	ldr	r2, [pc, #464]	; (80015ac <parseInputReport+0x210>)
 80013dc:	7852      	ldrb	r2, [r2, #1]
 80013de:	4313      	orrs	r3, r2
 80013e0:	4a73      	ldr	r2, [pc, #460]	; (80015b0 <parseInputReport+0x214>)
 80013e2:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80013e4:	4b71      	ldr	r3, [pc, #452]	; (80015ac <parseInputReport+0x210>)
 80013e6:	79db      	ldrb	r3, [r3, #7]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80013ee:	4b6f      	ldr	r3, [pc, #444]	; (80015ac <parseInputReport+0x210>)
 80013f0:	7a9b      	ldrb	r3, [r3, #10]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b6d      	ldr	r3, [pc, #436]	; (80015ac <parseInputReport+0x210>)
 80013f8:	7a5b      	ldrb	r3, [r3, #9]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8001402:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <parseInputReport+0x210>)
 8001404:	7b1b      	ldrb	r3, [r3, #12]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b68      	ldr	r3, [pc, #416]	; (80015ac <parseInputReport+0x210>)
 800140c:	7adb      	ldrb	r3, [r3, #11]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001416:	4b65      	ldr	r3, [pc, #404]	; (80015ac <parseInputReport+0x210>)
 8001418:	7b9b      	ldrb	r3, [r3, #14]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <parseInputReport+0x210>)
 8001420:	7b5b      	ldrb	r3, [r3, #13]
 8001422:	b21b      	sxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b21b      	sxth	r3, r3
 8001428:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8001432:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001436:	2b0e      	cmp	r3, #14
 8001438:	dd09      	ble.n	800144e <parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <parseInputReport+0x210>)
 800143c:	7c1b      	ldrb	r3, [r3, #16]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	4b5a      	ldr	r3, [pc, #360]	; (80015ac <parseInputReport+0x210>)
 8001444:	7bdb      	ldrb	r3, [r3, #15]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21b      	sxth	r3, r3
 800144c:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800144e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001452:	2b10      	cmp	r3, #16
 8001454:	dd09      	ble.n	800146a <parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001456:	4b55      	ldr	r3, [pc, #340]	; (80015ac <parseInputReport+0x210>)
 8001458:	7c9b      	ldrb	r3, [r3, #18]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21a      	sxth	r2, r3
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <parseInputReport+0x210>)
 8001460:	7c5b      	ldrb	r3, [r3, #17]
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21b      	sxth	r3, r3
 8001468:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 800146a:	4b50      	ldr	r3, [pc, #320]	; (80015ac <parseInputReport+0x210>)
 800146c:	795b      	ldrb	r3, [r3, #5]
 800146e:	2b05      	cmp	r3, #5
 8001470:	d053      	beq.n	800151a <parseInputReport+0x17e>
 8001472:	2b05      	cmp	r3, #5
 8001474:	dc0b      	bgt.n	800148e <parseInputReport+0xf2>
 8001476:	2b02      	cmp	r3, #2
 8001478:	d033      	beq.n	80014e2 <parseInputReport+0x146>
 800147a:	2b02      	cmp	r3, #2
 800147c:	dc02      	bgt.n	8001484 <parseInputReport+0xe8>
 800147e:	2b01      	cmp	r3, #1
 8001480:	d013      	beq.n	80014aa <parseInputReport+0x10e>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001482:	e08a      	b.n	800159a <parseInputReport+0x1fe>
	switch(shtpData[5])
 8001484:	2b03      	cmp	r3, #3
 8001486:	d03a      	beq.n	80014fe <parseInputReport+0x162>
 8001488:	2b04      	cmp	r3, #4
 800148a:	d01c      	beq.n	80014c6 <parseInputReport+0x12a>
}
 800148c:	e085      	b.n	800159a <parseInputReport+0x1fe>
	switch(shtpData[5])
 800148e:	2b13      	cmp	r3, #19
 8001490:	d05b      	beq.n	800154a <parseInputReport+0x1ae>
 8001492:	2b13      	cmp	r3, #19
 8001494:	dc04      	bgt.n	80014a0 <parseInputReport+0x104>
 8001496:	2b08      	cmp	r3, #8
 8001498:	d03f      	beq.n	800151a <parseInputReport+0x17e>
 800149a:	2b11      	cmp	r3, #17
 800149c:	d051      	beq.n	8001542 <parseInputReport+0x1a6>
}
 800149e:	e07c      	b.n	800159a <parseInputReport+0x1fe>
	switch(shtpData[5])
 80014a0:	2b1e      	cmp	r3, #30
 80014a2:	d057      	beq.n	8001554 <parseInputReport+0x1b8>
 80014a4:	2bf1      	cmp	r3, #241	; 0xf1
 80014a6:	d06d      	beq.n	8001584 <parseInputReport+0x1e8>
}
 80014a8:	e077      	b.n	800159a <parseInputReport+0x1fe>
			accelAccuracy = status;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <parseInputReport+0x218>)
 80014b0:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80014b2:	4a41      	ldr	r2, [pc, #260]	; (80015b8 <parseInputReport+0x21c>)
 80014b4:	89bb      	ldrh	r3, [r7, #12]
 80014b6:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 80014b8:	4a40      	ldr	r2, [pc, #256]	; (80015bc <parseInputReport+0x220>)
 80014ba:	897b      	ldrh	r3, [r7, #10]
 80014bc:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 80014be:	4a40      	ldr	r2, [pc, #256]	; (80015c0 <parseInputReport+0x224>)
 80014c0:	893b      	ldrh	r3, [r7, #8]
 80014c2:	8013      	strh	r3, [r2, #0]
			break;
 80014c4:	e069      	b.n	800159a <parseInputReport+0x1fe>
			accelLinAccuracy = status;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <parseInputReport+0x228>)
 80014cc:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 80014ce:	4a3e      	ldr	r2, [pc, #248]	; (80015c8 <parseInputReport+0x22c>)
 80014d0:	89bb      	ldrh	r3, [r7, #12]
 80014d2:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 80014d4:	4a3d      	ldr	r2, [pc, #244]	; (80015cc <parseInputReport+0x230>)
 80014d6:	897b      	ldrh	r3, [r7, #10]
 80014d8:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 80014da:	4a3d      	ldr	r2, [pc, #244]	; (80015d0 <parseInputReport+0x234>)
 80014dc:	893b      	ldrh	r3, [r7, #8]
 80014de:	8013      	strh	r3, [r2, #0]
			break;
 80014e0:	e05b      	b.n	800159a <parseInputReport+0x1fe>
			gyroAccuracy = status;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <parseInputReport+0x238>)
 80014e8:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 80014ea:	4a3b      	ldr	r2, [pc, #236]	; (80015d8 <parseInputReport+0x23c>)
 80014ec:	89bb      	ldrh	r3, [r7, #12]
 80014ee:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 80014f0:	4a3a      	ldr	r2, [pc, #232]	; (80015dc <parseInputReport+0x240>)
 80014f2:	897b      	ldrh	r3, [r7, #10]
 80014f4:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 80014f6:	4a3a      	ldr	r2, [pc, #232]	; (80015e0 <parseInputReport+0x244>)
 80014f8:	893b      	ldrh	r3, [r7, #8]
 80014fa:	8013      	strh	r3, [r2, #0]
			break;
 80014fc:	e04d      	b.n	800159a <parseInputReport+0x1fe>
			magAccuracy = status;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <parseInputReport+0x248>)
 8001504:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001506:	4a38      	ldr	r2, [pc, #224]	; (80015e8 <parseInputReport+0x24c>)
 8001508:	89bb      	ldrh	r3, [r7, #12]
 800150a:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 800150c:	4a37      	ldr	r2, [pc, #220]	; (80015ec <parseInputReport+0x250>)
 800150e:	897b      	ldrh	r3, [r7, #10]
 8001510:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001512:	4a37      	ldr	r2, [pc, #220]	; (80015f0 <parseInputReport+0x254>)
 8001514:	893b      	ldrh	r3, [r7, #8]
 8001516:	8013      	strh	r3, [r2, #0]
			break;
 8001518:	e03f      	b.n	800159a <parseInputReport+0x1fe>
			quatAccuracy = status;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <parseInputReport+0x258>)
 8001520:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8001522:	4a35      	ldr	r2, [pc, #212]	; (80015f8 <parseInputReport+0x25c>)
 8001524:	89bb      	ldrh	r3, [r7, #12]
 8001526:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001528:	4a34      	ldr	r2, [pc, #208]	; (80015fc <parseInputReport+0x260>)
 800152a:	897b      	ldrh	r3, [r7, #10]
 800152c:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 800152e:	4a34      	ldr	r2, [pc, #208]	; (8001600 <parseInputReport+0x264>)
 8001530:	893b      	ldrh	r3, [r7, #8]
 8001532:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001534:	4a33      	ldr	r2, [pc, #204]	; (8001604 <parseInputReport+0x268>)
 8001536:	8afb      	ldrh	r3, [r7, #22]
 8001538:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800153a:	4a33      	ldr	r2, [pc, #204]	; (8001608 <parseInputReport+0x26c>)
 800153c:	8abb      	ldrh	r3, [r7, #20]
 800153e:	8013      	strh	r3, [r2, #0]
			break;
 8001540:	e02b      	b.n	800159a <parseInputReport+0x1fe>
			stepCount = data3; //Bytes 8/9
 8001542:	4a32      	ldr	r2, [pc, #200]	; (800160c <parseInputReport+0x270>)
 8001544:	893b      	ldrh	r3, [r7, #8]
 8001546:	8013      	strh	r3, [r2, #0]
			break;
 8001548:	e027      	b.n	800159a <parseInputReport+0x1fe>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <parseInputReport+0x210>)
 800154c:	7a5a      	ldrb	r2, [r3, #9]
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <parseInputReport+0x274>)
 8001550:	701a      	strb	r2, [r3, #0]
			break;
 8001552:	e022      	b.n	800159a <parseInputReport+0x1fe>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <parseInputReport+0x210>)
 8001556:	7a9a      	ldrb	r2, [r3, #10]
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <parseInputReport+0x278>)
 800155a:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800155c:	2300      	movs	r3, #0
 800155e:	74fb      	strb	r3, [r7, #19]
 8001560:	e00c      	b.n	800157c <parseInputReport+0x1e0>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001562:	7cfb      	ldrb	r3, [r7, #19]
 8001564:	f103 020b 	add.w	r2, r3, #11
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <parseInputReport+0x27c>)
 800156a:	6819      	ldr	r1, [r3, #0]
 800156c:	7cfb      	ldrb	r3, [r7, #19]
 800156e:	440b      	add	r3, r1
 8001570:	490e      	ldr	r1, [pc, #56]	; (80015ac <parseInputReport+0x210>)
 8001572:	5c8a      	ldrb	r2, [r1, r2]
 8001574:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001576:	7cfb      	ldrb	r3, [r7, #19]
 8001578:	3301      	adds	r3, #1
 800157a:	74fb      	strb	r3, [r7, #19]
 800157c:	7cfb      	ldrb	r3, [r7, #19]
 800157e:	2b08      	cmp	r3, #8
 8001580:	d9ef      	bls.n	8001562 <parseInputReport+0x1c6>
			break;
 8001582:	e00a      	b.n	800159a <parseInputReport+0x1fe>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <parseInputReport+0x210>)
 8001586:	79db      	ldrb	r3, [r3, #7]
 8001588:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b07      	cmp	r3, #7
 800158e:	d103      	bne.n	8001598 <parseInputReport+0x1fc>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <parseInputReport+0x210>)
 8001592:	7a9a      	ldrb	r2, [r3, #10]
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <parseInputReport+0x280>)
 8001596:	701a      	strb	r2, [r3, #0]
			break;
 8001598:	bf00      	nop
}
 800159a:	bf00      	nop
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200000e4 	.word	0x200000e4
 80015ac:	20000134 	.word	0x20000134
 80015b0:	200000f0 	.word	0x200000f0
 80015b4:	200001bc 	.word	0x200001bc
 80015b8:	200001b4 	.word	0x200001b4
 80015bc:	200001be 	.word	0x200001be
 80015c0:	20000126 	.word	0x20000126
 80015c4:	20000122 	.word	0x20000122
 80015c8:	200000f4 	.word	0x200000f4
 80015cc:	200001b8 	.word	0x200001b8
 80015d0:	2000012c 	.word	0x2000012c
 80015d4:	2000012e 	.word	0x2000012e
 80015d8:	20000130 	.word	0x20000130
 80015dc:	2000011e 	.word	0x2000011e
 80015e0:	2000011c 	.word	0x2000011c
 80015e4:	200000e8 	.word	0x200000e8
 80015e8:	20000120 	.word	0x20000120
 80015ec:	200001ba 	.word	0x200001ba
 80015f0:	20000124 	.word	0x20000124
 80015f4:	200000ae 	.word	0x200000ae
 80015f8:	200000a4 	.word	0x200000a4
 80015fc:	200000a6 	.word	0x200000a6
 8001600:	200000a8 	.word	0x200000a8
 8001604:	200000aa 	.word	0x200000aa
 8001608:	200000ac 	.word	0x200000ac
 800160c:	200001c0 	.word	0x200001c0
 8001610:	20000132 	.word	0x20000132
 8001614:	200001b6 	.word	0x200001b6
 8001618:	20000128 	.word	0x20000128
 800161c:	200001b7 	.word	0x200001b7

08001620 <bno080_getQuatI>:

//Return the rotation vector quaternion I
float bno080_getQuatI(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatI, rotationVector_Q1);
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <bno080_getQuatI+0x24>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <bno080_getQuatI+0x28>)
 800162c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4619      	mov	r1, r3
 8001634:	4610      	mov	r0, r2
 8001636:	f7ff fe6d 	bl	8001314 <bno080_qToFloat>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
}
 800163e:	eeb0 0a67 	vmov.f32	s0, s15
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200000a4 	.word	0x200000a4
 8001648:	20000000 	.word	0x20000000

0800164c <bno080_getQuatJ>:

//Return the rotation vector quaternion J
float bno080_getQuatJ(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <bno080_getQuatJ+0x24>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <bno080_getQuatJ+0x28>)
 8001658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	4610      	mov	r0, r2
 8001662:	f7ff fe57 	bl	8001314 <bno080_qToFloat>
 8001666:	eef0 7a40 	vmov.f32	s15, s0
}
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200000a6 	.word	0x200000a6
 8001674:	20000000 	.word	0x20000000

08001678 <bno080_getQuatK>:

//Return the rotation vector quaternion K
float bno080_getQuatK(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatK, rotationVector_Q1);
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <bno080_getQuatK+0x24>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	b21a      	sxth	r2, r3
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <bno080_getQuatK+0x28>)
 8001684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	4619      	mov	r1, r3
 800168c:	4610      	mov	r0, r2
 800168e:	f7ff fe41 	bl	8001314 <bno080_qToFloat>
 8001692:	eef0 7a40 	vmov.f32	s15, s0
}
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200000a8 	.word	0x200000a8
 80016a0:	20000000 	.word	0x20000000

080016a4 <bno080_getQuatReal>:

//Return the rotation vector quaternion Real
float bno080_getQuatReal(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatReal, rotationVector_Q1);
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <bno080_getQuatReal+0x24>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <bno080_getQuatReal+0x28>)
 80016b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f7ff fe2b 	bl	8001314 <bno080_qToFloat>
 80016be:	eef0 7a40 	vmov.f32	s15, s0
}
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200000aa 	.word	0x200000aa
 80016cc:	20000000 	.word	0x20000000

080016d0 <bno080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float bno080_getQuatRadianAccuracy(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <bno080_getQuatRadianAccuracy+0x24>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	b21a      	sxth	r2, r3
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <bno080_getQuatRadianAccuracy+0x28>)
 80016dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f7ff fe15 	bl	8001314 <bno080_qToFloat>
 80016ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200000ac 	.word	0x200000ac
 80016f8:	20000000 	.word	0x20000000

080016fc <receivePacket_IT>:

	return 1;
}

uint8_t receivePacket_IT(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
	uint8_t incoming;

	BNO_SELECT;
 8001702:	2200      	movs	r2, #0
 8001704:	2110      	movs	r1, #16
 8001706:	483a      	ldr	r0, [pc, #232]	; (80017f0 <receivePacket_IT+0xf4>)
 8001708:	f002 fb0a 	bl	8003d20 <HAL_GPIO_WritePin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = LL_SPI_SendByte(0);
 800170c:	2000      	movs	r0, #0
 800170e:	f000 f875 	bl	80017fc <LL_SPI_SendByte>
 8001712:	4603      	mov	r3, r0
 8001714:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = LL_SPI_SendByte(0);
 8001716:	2000      	movs	r0, #0
 8001718:	f000 f870 	bl	80017fc <LL_SPI_SendByte>
 800171c:	4603      	mov	r3, r0
 800171e:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = LL_SPI_SendByte(0);
 8001720:	2000      	movs	r0, #0
 8001722:	f000 f86b 	bl	80017fc <LL_SPI_SendByte>
 8001726:	4603      	mov	r3, r0
 8001728:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = LL_SPI_SendByte(0); //Not sure if we need to store this or not
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f866 	bl	80017fc <LL_SPI_SendByte>
 8001730:	4603      	mov	r3, r0
 8001732:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001734:	4a2f      	ldr	r2, [pc, #188]	; (80017f4 <receivePacket_IT+0xf8>)
 8001736:	7b7b      	ldrb	r3, [r7, #13]
 8001738:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800173a:	4a2e      	ldr	r2, [pc, #184]	; (80017f4 <receivePacket_IT+0xf8>)
 800173c:	7b3b      	ldrb	r3, [r7, #12]
 800173e:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001740:	4a2c      	ldr	r2, [pc, #176]	; (80017f4 <receivePacket_IT+0xf8>)
 8001742:	7afb      	ldrb	r3, [r7, #11]
 8001744:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001746:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <receivePacket_IT+0xf8>)
 8001748:	7abb      	ldrb	r3, [r7, #10]
 800174a:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 800174c:	7b3b      	ldrb	r3, [r7, #12]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b21a      	sxth	r2, r3
 8001752:	7b7b      	ldrb	r3, [r7, #13]
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800175a:	893b      	ldrh	r3, [r7, #8]
 800175c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001760:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001762:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <receivePacket_IT+0x72>
	{
		//Packet is empty
		return 0; //All done
 800176a:	2300      	movs	r3, #0
 800176c:	e03c      	b.n	80017e8 <receivePacket_IT+0xec>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800176e:	893b      	ldrh	r3, [r7, #8]
 8001770:	3b04      	subs	r3, #4
 8001772:	b29b      	uxth	r3, r3
 8001774:	813b      	strh	r3, [r7, #8]
	//dataLength = 210;
	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001776:	2300      	movs	r3, #0
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	e00e      	b.n	800179a <receivePacket_IT+0x9e>
	{
		incoming = LL_SPI_SendByte(0xFF);
 800177c:	20ff      	movs	r0, #255	; 0xff
 800177e:	f000 f83d 	bl	80017fc <LL_SPI_SendByte>
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001786:	89fb      	ldrh	r3, [r7, #14]
 8001788:	2b7f      	cmp	r3, #127	; 0x7f
 800178a:	d803      	bhi.n	8001794 <receivePacket_IT+0x98>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 800178c:	89fb      	ldrh	r3, [r7, #14]
 800178e:	491a      	ldr	r1, [pc, #104]	; (80017f8 <receivePacket_IT+0xfc>)
 8001790:	79fa      	ldrb	r2, [r7, #7]
 8001792:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	3301      	adds	r3, #1
 8001798:	81fb      	strh	r3, [r7, #14]
 800179a:	89fa      	ldrh	r2, [r7, #14]
 800179c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbeb      	blt.n	800177c <receivePacket_IT+0x80>
	}

	BNO_DESELECT;
 80017a4:	2201      	movs	r2, #1
 80017a6:	2110      	movs	r1, #16
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <receivePacket_IT+0xf4>)
 80017aa:	f002 fab9 	bl	8003d20 <HAL_GPIO_WritePin>

	//Check to see if this packet is a sensor reporting its data to us
	if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <receivePacket_IT+0xf8>)
 80017b0:	789b      	ldrb	r3, [r3, #2]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d107      	bne.n	80017c6 <receivePacket_IT+0xca>
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <receivePacket_IT+0xfc>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2bfb      	cmp	r3, #251	; 0xfb
 80017bc:	d103      	bne.n	80017c6 <receivePacket_IT+0xca>
	{
		parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80017be:	f7ff fded 	bl	800139c <parseInputReport>
		return 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e010      	b.n	80017e8 <receivePacket_IT+0xec>
	}
	else if (shtpHeader[2] == CHANNEL_CONTROL)
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <receivePacket_IT+0xf8>)
 80017c8:	789b      	ldrb	r3, [r3, #2]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d103      	bne.n	80017d6 <receivePacket_IT+0xda>
	{
		parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80017ce:	f7ff fdc9 	bl	8001364 <parseCommandReport>
		return 1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e008      	b.n	80017e8 <receivePacket_IT+0xec>
	}
	else if(shtpHeader[2] == CHANNEL_GYRO)
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <receivePacket_IT+0xf8>)
 80017d8:	789b      	ldrb	r3, [r3, #2]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d103      	bne.n	80017e6 <receivePacket_IT+0xea>
	{
		parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80017de:	f7ff fddd 	bl	800139c <parseInputReport>
		return 1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <receivePacket_IT+0xec>
	}


	return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40020400 	.word	0x40020400
 80017f4:	200000e4 	.word	0x200000e4
 80017f8:	20000134 	.word	0x20000134

080017fc <LL_SPI_SendByte>:

/*
 * SPI Send/Receive Byte
 * */
uint8_t LL_SPI_SendByte(uint8_t data)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO_SPI_CHANNEL)==RESET);
 8001806:	bf00      	nop
 8001808:	4810      	ldr	r0, [pc, #64]	; (800184c <LL_SPI_SendByte+0x50>)
 800180a:	f7ff fd3e 	bl	800128a <LL_SPI_IsActiveFlag_TXE>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f9      	beq.n	8001808 <LL_SPI_SendByte+0xc>
	LL_SPI_TransmitData8(BNO_SPI_CHANNEL, data);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4619      	mov	r1, r3
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <LL_SPI_SendByte+0x50>)
 800181a:	f7ff fd69 	bl	80012f0 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_BSY(BNO_SPI_CHANNEL) == SET);
 800181e:	bf00      	nop
 8001820:	480a      	ldr	r0, [pc, #40]	; (800184c <LL_SPI_SendByte+0x50>)
 8001822:	f7ff fd45 	bl	80012b0 <LL_SPI_IsActiveFlag_BSY>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d0f9      	beq.n	8001820 <LL_SPI_SendByte+0x24>

	while(LL_SPI_IsActiveFlag_RXNE(BNO_SPI_CHANNEL)==RESET);
 800182c:	bf00      	nop
 800182e:	4807      	ldr	r0, [pc, #28]	; (800184c <LL_SPI_SendByte+0x50>)
 8001830:	f7ff fd18 	bl	8001264 <LL_SPI_IsActiveFlag_RXNE>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f9      	beq.n	800182e <LL_SPI_SendByte+0x32>
	return LL_SPI_ReceiveData8(BNO_SPI_CHANNEL);
 800183a:	4804      	ldr	r0, [pc, #16]	; (800184c <LL_SPI_SendByte+0x50>)
 800183c:	f7ff fd4b 	bl	80012d6 <LL_SPI_ReceiveData8>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40003c00 	.word	0x40003c00

08001850 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BNO_INT_PIN_F){
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001860:	d127      	bne.n	80018b2 <HAL_GPIO_EXTI_Callback+0x62>
		receivePacket_IT();
 8001862:	f7ff ff4b 	bl	80016fc <receivePacket_IT>
		q[0] = bno080_getQuatI();
 8001866:	f7ff fedb 	bl	8001620 <bno080_getQuatI>
 800186a:	eef0 7a40 	vmov.f32	s15, s0
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_GPIO_EXTI_Callback+0x6c>)
 8001870:	edc3 7a00 	vstr	s15, [r3]
		q[1] = bno080_getQuatJ();
 8001874:	f7ff feea 	bl	800164c <bno080_getQuatJ>
 8001878:	eef0 7a40 	vmov.f32	s15, s0
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_GPIO_EXTI_Callback+0x6c>)
 800187e:	edc3 7a01 	vstr	s15, [r3, #4]
		q[2] = bno080_getQuatK();
 8001882:	f7ff fef9 	bl	8001678 <bno080_getQuatK>
 8001886:	eef0 7a40 	vmov.f32	s15, s0
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_GPIO_EXTI_Callback+0x6c>)
 800188c:	edc3 7a02 	vstr	s15, [r3, #8]
		q[3] = bno080_getQuatReal();
 8001890:	f7ff ff08 	bl	80016a4 <bno080_getQuatReal>
 8001894:	eef0 7a40 	vmov.f32	s15, s0
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_GPIO_EXTI_Callback+0x6c>)
 800189a:	edc3 7a03 	vstr	s15, [r3, #12]
		quatRadianAccuracy = bno080_getQuatRadianAccuracy();
 800189e:	f7ff ff17 	bl	80016d0 <bno080_getQuatRadianAccuracy>
 80018a2:	eef0 7a40 	vmov.f32	s15, s0
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x70>)
 80018a8:	edc3 7a00 	vstr	s15, [r3]
		Quaternion_Update(&q[0]);
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <HAL_GPIO_EXTI_Callback+0x6c>)
 80018ae:	f7ff fac7 	bl	8000e40 <Quaternion_Update>
	}
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000004 	.word	0x20000004
 80018c0:	200000ec 	.word	0x200000ec

080018c4 <ubx_handleGNSS>:
uint8_t *rxBufferGNSSp;  // DODANO
tGNSSrx GNSSrx;

int teest;

void ubx_handleGNSS(CGNSS* handle){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0c4      	sub	sp, #272	; 0x110
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	6018      	str	r0, [r3, #0]
	uint8_t msgbuf[MAX_GNSS];
	int32_t msgcnt;
	msgcnt = readUBXpkt (handle, msgbuf);
 80018ce:	f107 020c 	add.w	r2, r7, #12
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4611      	mov	r1, r2
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	f000 f83e 	bl	8001958 <readUBXpkt>
 80018dc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	if(msgcnt>0)
 80018e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	dd08      	ble.n	80018fa <ubx_handleGNSS+0x36>
	{
		EventsCommGNSS(handle, msgbuf,msgcnt);
 80018e8:	f107 010c 	add.w	r1, r7, #12
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	f000 f80f 	bl	8001916 <EventsCommGNSS>
	}
	else if(msgcnt==-1)
	{
		initGNSSrx (handle);
	}
}
 80018f8:	e008      	b.n	800190c <ubx_handleGNSS+0x48>
	else if(msgcnt==-1)
 80018fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001902:	d103      	bne.n	800190c <ubx_handleGNSS+0x48>
		initGNSSrx (handle);
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	f000 f814 	bl	8001934 <initGNSSrx>
}
 800190c:	bf00      	nop
 800190e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <EventsCommGNSS>:

void EventsCommGNSS(CGNSS* handle, uint8_t *msgbuf, int32_t cnt)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
	parseUBX(handle, msgbuf,cnt);
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f862 	bl	80019f0 <parseUBX>
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <initGNSSrx>:

void initGNSSrx(CGNSS* handle)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GNSSrx.state = SM_UBX_BEFORE;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <initGNSSrx+0x20>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
  GNSSrx.ctr = 0;
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <initGNSSrx+0x20>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	200002c8 	.word	0x200002c8

08001958 <readUBXpkt>:

int readUBXpkt(CGNSS* handle, uint8_t *retbuf)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	int i = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]

	if(GNSSrx.ctr<MAX_GNSS)
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <readUBXpkt+0x94>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	dc2f      	bgt.n	80019ce <readUBXpkt+0x76>
	{
	if(addUBXpktByte(handle->rx_byte,&(GNSSrx))>0)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001974:	491d      	ldr	r1, [pc, #116]	; (80019ec <readUBXpkt+0x94>)
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f998 	bl	8001cac <addUBXpktByte>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	dd25      	ble.n	80019ce <readUBXpkt+0x76>
	{
	  GNSSrx.state=SM_UBX_BEFORE;
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <readUBXpkt+0x94>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
	  for(i=0;i<GNSSrx.ctr;i++) retbuf[i]=GNSSrx.buf[i];
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e00b      	b.n	80019a6 <readUBXpkt+0x4e>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4915      	ldr	r1, [pc, #84]	; (80019ec <readUBXpkt+0x94>)
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	440a      	add	r2, r1
 800199a:	3208      	adds	r2, #8
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <readUBXpkt+0x94>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbee      	blt.n	800198e <readUBXpkt+0x36>
	  GNSSrx.ctr=0;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <readUBXpkt+0x94>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
	  if(checkUBX(retbuf,i)==0)
 80019b6:	68f9      	ldr	r1, [r7, #12]
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f000 fa3f 	bl	8001e3c <checkUBX>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <readUBXpkt+0x72>
	  {
		return (i-2);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3b02      	subs	r3, #2
 80019c8:	e00c      	b.n	80019e4 <readUBXpkt+0x8c>
	  }
	  else
	  {
		return 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e00a      	b.n	80019e4 <readUBXpkt+0x8c>
	  }
	}
	}
	if(GNSSrx.ctr>=MAX_GNSS)
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <readUBXpkt+0x94>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2bff      	cmp	r3, #255	; 0xff
 80019d4:	dd05      	ble.n	80019e2 <readUBXpkt+0x8a>
	{
	GNSSrx.ctr=0;
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <readUBXpkt+0x94>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
	GNSSrx.state=SM_UBX_BEFORE;
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <readUBXpkt+0x94>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200002c8 	.word	0x200002c8

080019f0 <parseUBX>:


uint8_t parseUBX(CGNSS* handle, uint8_t *buf, int cnt)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	uint8_t ok = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]

	if(buf[0]==UBX_NAV)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	f040 8119 	bne.w	8001c3c <parseUBX+0x24c>
	{
		if(buf[1]==UBX_NAV_PVT && cnt>=92)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b07      	cmp	r3, #7
 8001a12:	f040 80bf 	bne.w	8001b94 <parseUBX+0x1a4>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b5b      	cmp	r3, #91	; 0x5b
 8001a1a:	f340 80bb 	ble.w	8001b94 <parseUBX+0x1a4>
		{
		  handle->iTOW = bytesToLong(&(buf[4]));
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3304      	adds	r3, #4
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fa65 	bl	8001ef2 <bytesToLong>
 8001a28:	ee07 0a90 	vmov	s15, r0
 8001a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		  handle->UTCyear = (uint16_t)bytesToShort(&(buf[8]));
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3308      	adds	r3, #8
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fa7d 	bl	8001f3a <bytesToShort>
 8001a40:	4603      	mov	r3, r0
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	871a      	strh	r2, [r3, #56]	; 0x38
		  handle->UTCmonth = (uint8_t)buf[10];
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	330a      	adds	r3, #10
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		  handle->UTCday = (uint8_t)buf[11];
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	330b      	adds	r3, #11
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		  handle->UTChour = (uint8_t)buf[12];
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	330c      	adds	r3, #12
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		  handle->UTCminute = (uint8_t)buf[13];
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	330d      	adds	r3, #13
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		  handle->UTCsecond = (uint8_t)buf[14];
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	330e      	adds	r3, #14
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		  handle->fixType = (uint8_t)buf[24];
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	3318      	adds	r3, #24
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  handle->hAcc = bytesToLong(&(buf[44]));
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	332c      	adds	r3, #44	; 0x2c
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fa2c 	bl	8001ef2 <bytesToLong>
 8001a9a:	ee07 0a90 	vmov	s15, r0
 8001a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  handle->vAcc = bytesToLong(&(buf[48]));
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	3330      	adds	r3, #48	; 0x30
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 fa20 	bl	8001ef2 <bytesToLong>
 8001ab2:	ee07 0a90 	vmov	s15, r0
 8001ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  handle->pos.lon = bytesToLong(&(buf[28]))*1.0e-7;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	331c      	adds	r3, #28
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fa14 	bl	8001ef2 <bytesToLong>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fccd 	bl	800046c <__aeabi_i2d>
 8001ad2:	a374      	add	r3, pc, #464	; (adr r3, 8001ca4 <parseUBX+0x2b4>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fd32 	bl	8000540 <__aeabi_dmul>
 8001adc:	4603      	mov	r3, r0
 8001ade:	460c      	mov	r4, r1
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	f7fe ffdc 	bl	8000aa0 <__aeabi_d2f>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	605a      	str	r2, [r3, #4]
		  handle->pos.lat = bytesToLong(&(buf[32]))*1.0e-7;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3320      	adds	r3, #32
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f9fd 	bl	8001ef2 <bytesToLong>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fcb6 	bl	800046c <__aeabi_i2d>
 8001b00:	a368      	add	r3, pc, #416	; (adr r3, 8001ca4 <parseUBX+0x2b4>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe fd1b 	bl	8000540 <__aeabi_dmul>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	4621      	mov	r1, r4
 8001b12:	f7fe ffc5 	bl	8000aa0 <__aeabi_d2f>
 8001b16:	4602      	mov	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	601a      	str	r2, [r3, #0]
		  handle->pos.alt = bytesToLong(&(buf[36]))*1.0e-7;
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	3324      	adds	r3, #36	; 0x24
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f9e6 	bl	8001ef2 <bytesToLong>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fc9f 	bl	800046c <__aeabi_i2d>
 8001b2e:	a35d      	add	r3, pc, #372	; (adr r3, 8001ca4 <parseUBX+0x2b4>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fd04 	bl	8000540 <__aeabi_dmul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	4621      	mov	r1, r4
 8001b40:	f7fe ffae 	bl	8000aa0 <__aeabi_d2f>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	609a      	str	r2, [r3, #8]
		  handle->vel.N = bytesToLong(&(buf[52])); // mm/s
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3334      	adds	r3, #52	; 0x34
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f9cf 	bl	8001ef2 <bytesToLong>
 8001b54:	ee07 0a90 	vmov	s15, r0
 8001b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	edc3 7a03 	vstr	s15, [r3, #12]
		  handle->vel.E = bytesToLong(&(buf[56]));
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3338      	adds	r3, #56	; 0x38
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f9c3 	bl	8001ef2 <bytesToLong>
 8001b6c:	ee07 0a90 	vmov	s15, r0
 8001b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	edc3 7a04 	vstr	s15, [r3, #16]
		  handle->vel.D = bytesToLong(&(buf[60]));
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	333c      	adds	r3, #60	; 0x3c
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f9b7 	bl	8001ef2 <bytesToLong>
 8001b84:	ee07 0a90 	vmov	s15, r0
 8001b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edc3 7a05 	vstr	s15, [r3, #20]
 8001b92:	e07d      	b.n	8001c90 <parseUBX+0x2a0>
		}
		else if(buf[1]==UBX_NAV_RELPOSNED && cnt>=64) // 64
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	3301      	adds	r3, #1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b3c      	cmp	r3, #60	; 0x3c
 8001b9c:	d178      	bne.n	8001c90 <parseUBX+0x2a0>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ba2:	dd75      	ble.n	8001c90 <parseUBX+0x2a0>
		{
			handle->relPos.N = bytesToLong(&(buf[12]))+0.01f*(float)buf[24];
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f9a2 	bl	8001ef2 <bytesToLong>
 8001bae:	ee07 0a90 	vmov	s15, r0
 8001bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	3318      	adds	r3, #24
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc4:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001ca0 <parseUBX+0x2b0>
 8001bc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	edc3 7a07 	vstr	s15, [r3, #28]
			handle->relPos.E = bytesToLong(&(buf[16]))+0.01f*(float)buf[25];
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	3310      	adds	r3, #16
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f989 	bl	8001ef2 <bytesToLong>
 8001be0:	ee07 0a90 	vmov	s15, r0
 8001be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3319      	adds	r3, #25
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001ca0 <parseUBX+0x2b0>
 8001bfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	edc3 7a08 	vstr	s15, [r3, #32]
			handle->relPos.D = bytesToLong(&(buf[20]))+0.01f*(float)buf[26];
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	3314      	adds	r3, #20
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f970 	bl	8001ef2 <bytesToLong>
 8001c12:	ee07 0a90 	vmov	s15, r0
 8001c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	331a      	adds	r3, #26
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c28:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001ca0 <parseUBX+0x2b0>
 8001c2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8001c3a:	e029      	b.n	8001c90 <parseUBX+0x2a0>
		}
	}
	else if(buf[0]==UBX_MON)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b0a      	cmp	r3, #10
 8001c42:	d111      	bne.n	8001c68 <parseUBX+0x278>
	{
		if(buf[1]==UBX_MON_MSGPP && cnt>=120){
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	3301      	adds	r3, #1
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d120      	bne.n	8001c90 <parseUBX+0x2a0>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b77      	cmp	r3, #119	; 0x77
 8001c52:	dd1d      	ble.n	8001c90 <parseUBX+0x2a0>
			handle->msgs = bytesToShort(&(buf[46]));
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	332e      	adds	r3, #46	; 0x2e
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f96e 	bl	8001f3a <bytesToShort>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
 8001c66:	e013      	b.n	8001c90 <parseUBX+0x2a0>
		}
	}
	else if(buf[0]==UBX_RXM){
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d10f      	bne.n	8001c90 <parseUBX+0x2a0>
		if(buf[1]==UBX_RXM_RTCM && cnt>=8){
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	3301      	adds	r3, #1
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b32      	cmp	r3, #50	; 0x32
 8001c78:	d10a      	bne.n	8001c90 <parseUBX+0x2a0>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b07      	cmp	r3, #7
 8001c7e:	dd07      	ble.n	8001c90 <parseUBX+0x2a0>
			handle->rtcmStat = buf[2] >> 2;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	3302      	adds	r3, #2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}

	return ok;
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	3c23d70a 	.word	0x3c23d70a
 8001ca4:	9abcaf48 	.word	0x9abcaf48
 8001ca8:	3e7ad7f2 	.word	0x3e7ad7f2

08001cac <addUBXpktByte>:

int addUBXpktByte(uint8_t ch, tGNSSrx *pr)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
	switch(pr->state)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b09      	cmp	r3, #9
 8001cbe:	f200 809c 	bhi.w	8001dfa <addUBXpktByte+0x14e>
 8001cc2:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <addUBXpktByte+0x1c>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001cf1 	.word	0x08001cf1
 8001ccc:	08001d01 	.word	0x08001d01
 8001cd0:	08001d17 	.word	0x08001d17
 8001cd4:	08001d31 	.word	0x08001d31
 8001cd8:	08001d4b 	.word	0x08001d4b
 8001cdc:	08001d65 	.word	0x08001d65
 8001ce0:	08001d7f 	.word	0x08001d7f
 8001ce4:	08001dbf 	.word	0x08001dbf
 8001ce8:	08001dd9 	.word	0x08001dd9
 8001cec:	08001df3 	.word	0x08001df3
		{
		case SM_UBX_BEFORE:
			if(ch==UBX_SYN_CHAR1) pr->state=SM_UBX_SYN2;     //SYNCHAR1
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2bb5      	cmp	r3, #181	; 0xb5
 8001cf4:	f040 8085 	bne.w	8001e02 <addUBXpktByte+0x156>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
			break;
 8001cfe:	e080      	b.n	8001e02 <addUBXpktByte+0x156>
		case SM_UBX_SYN2:
			if(ch==UBX_SYN_CHAR2) pr->state=SM_UBX_CLASS;     //SYNCHAR2
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	2b62      	cmp	r3, #98	; 0x62
 8001d04:	d103      	bne.n	8001d0e <addUBXpktByte+0x62>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	601a      	str	r2, [r3, #0]
			else pr->state=SM_UBX_BEFORE;
			break;
 8001d0c:	e07c      	b.n	8001e08 <addUBXpktByte+0x15c>
			else pr->state=SM_UBX_BEFORE;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
			break;
 8001d14:	e078      	b.n	8001e08 <addUBXpktByte+0x15c>
		case SM_UBX_CLASS:
			pr->buf[pr->ctr++]=ch;          //CLASS
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	1c59      	adds	r1, r3, #1
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	6051      	str	r1, [r2, #4]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_ID;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	601a      	str	r2, [r3, #0]
			break;
 8001d2e:	e06b      	b.n	8001e08 <addUBXpktByte+0x15c>
		case SM_UBX_ID:
			pr->buf[pr->ctr++]=ch;          //ID
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	1c59      	adds	r1, r3, #1
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	6051      	str	r1, [r2, #4]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	79fa      	ldrb	r2, [r7, #7]
 8001d40:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_PAYLEN1;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2204      	movs	r2, #4
 8001d46:	601a      	str	r2, [r3, #0]
			break;
 8001d48:	e05e      	b.n	8001e08 <addUBXpktByte+0x15c>
		case SM_UBX_PAYLEN1:
			pr->buf[pr->ctr++]=ch;          //PAYLOAD LENGTH1
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	1c59      	adds	r1, r3, #1
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	6051      	str	r1, [r2, #4]
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	79fa      	ldrb	r2, [r7, #7]
 8001d5a:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_PAYLEN2;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2205      	movs	r2, #5
 8001d60:	601a      	str	r2, [r3, #0]
			break;
 8001d62:	e051      	b.n	8001e08 <addUBXpktByte+0x15c>
		case SM_UBX_PAYLEN2:
			pr->buf[pr->ctr++]=ch;          //PAYLOAD LENGTH2
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	1c59      	adds	r1, r3, #1
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	6051      	str	r1, [r2, #4]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	79fa      	ldrb	r2, [r7, #7]
 8001d74:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_PAYLOAD;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2206      	movs	r2, #6
 8001d7a:	601a      	str	r2, [r3, #0]
			break;
 8001d7c:	e044      	b.n	8001e08 <addUBXpktByte+0x15c>
		case SM_UBX_PAYLOAD:
			pr->buf[pr->ctr++]=ch;          //PAYLOAD
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	1c59      	adds	r1, r3, #1
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	6051      	str	r1, [r2, #4]
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	79fa      	ldrb	r2, [r7, #7]
 8001d8e:	721a      	strb	r2, [r3, #8]
			if(pr->ctr >= (bytesToShort((uint8_t *)&(pr->buf[2])) + 4)) pr->state=SM_UBX_CHK1;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685c      	ldr	r4, [r3, #4]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	330a      	adds	r3, #10
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 f8ce 	bl	8001f3a <bytesToShort>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	3304      	adds	r3, #4
 8001da2:	429c      	cmp	r4, r3
 8001da4:	db03      	blt.n	8001dae <addUBXpktByte+0x102>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
			else if(pr->ctr >= (UART_BUF_SIZE-10)) pr->state=SM_UBX_ERR;
			break;
 8001dac:	e02b      	b.n	8001e06 <addUBXpktByte+0x15a>
			else if(pr->ctr >= (UART_BUF_SIZE-10)) pr->state=SM_UBX_ERR;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2bf5      	cmp	r3, #245	; 0xf5
 8001db4:	dd27      	ble.n	8001e06 <addUBXpktByte+0x15a>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2209      	movs	r2, #9
 8001dba:	601a      	str	r2, [r3, #0]
			break;
 8001dbc:	e023      	b.n	8001e06 <addUBXpktByte+0x15a>
		case SM_UBX_CHK1:
			pr->buf[pr->ctr++]=ch;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	1c59      	adds	r1, r3, #1
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	6051      	str	r1, [r2, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	79fa      	ldrb	r2, [r7, #7]
 8001dce:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_CHK2;			//CHECKSUM1
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	601a      	str	r2, [r3, #0]
			break;
 8001dd6:	e017      	b.n	8001e08 <addUBXpktByte+0x15c>
		case SM_UBX_CHK2:
			pr->buf[pr->ctr++]=ch;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	1c59      	adds	r1, r3, #1
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	6051      	str	r1, [r2, #4]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	79fa      	ldrb	r2, [r7, #7]
 8001de8:	721a      	strb	r2, [r3, #8]
			pr->state=SM_UBX_END;			//CHECKSUM1
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	220a      	movs	r2, #10
 8001dee:	601a      	str	r2, [r3, #0]
			break;
 8001df0:	e00a      	b.n	8001e08 <addUBXpktByte+0x15c>
		case SM_UBX_ERR:
			pr->state=SM_UBX_BEFORE;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
			break;
 8001df8:	e006      	b.n	8001e08 <addUBXpktByte+0x15c>
		default:
			pr->state=SM_UBX_ERR;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2209      	movs	r2, #9
 8001dfe:	601a      	str	r2, [r3, #0]
			break;
 8001e00:	e002      	b.n	8001e08 <addUBXpktByte+0x15c>
			break;
 8001e02:	bf00      	nop
 8001e04:	e000      	b.n	8001e08 <addUBXpktByte+0x15c>
			break;
 8001e06:	bf00      	nop
		}
		if(pr->state==SM_UBX_ERR || pr->state==SM_UBX_BEFORE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d003      	beq.n	8001e18 <addUBXpktByte+0x16c>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <addUBXpktByte+0x172>
		{
			return(-1);
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1c:	e00a      	b.n	8001e34 <addUBXpktByte+0x188>
		}
		else if(pr->state==SM_UBX_END)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b0a      	cmp	r3, #10
 8001e24:	d105      	bne.n	8001e32 <addUBXpktByte+0x186>
		{
			pr->state=SM_UBX_BEFORE;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
			return(pr->ctr);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	e000      	b.n	8001e34 <addUBXpktByte+0x188>
		}
		else return(0);
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <checkUBX>:

int checkUBX(uint8_t *buf, int cnt)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
	uint8_t cha=0, chb=0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73bb      	strb	r3, [r7, #14]

	crcUBX(buf,cnt-2,&cha,&chb);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	1e99      	subs	r1, r3, #2
 8001e52:	f107 030e 	add.w	r3, r7, #14
 8001e56:	f107 020f 	add.w	r2, r7, #15
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f818 	bl	8001e90 <crcUBX>
	if((cha == buf[cnt-2]) && (chb == buf[cnt-1])) return(0);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	3b02      	subs	r3, #2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d109      	bne.n	8001e84 <checkUBX+0x48>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	7bbb      	ldrb	r3, [r7, #14]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d101      	bne.n	8001e84 <checkUBX+0x48>
 8001e80:	2300      	movs	r3, #0
 8001e82:	e001      	b.n	8001e88 <checkUBX+0x4c>
	return(-1);
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <crcUBX>:

void crcUBX(uint8_t *buf, int cnt, uint8_t *pcha, uint8_t *pchb)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
	int i=0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
	*pcha=0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
	*pchb=0;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
	for(i=0 ; i<cnt ; i++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e014      	b.n	8001ede <crcUBX+0x4e>
	{
		(*pcha) = (uint8_t)((*pcha) + buf[i]);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	68f9      	ldr	r1, [r7, #12]
 8001ebc:	440b      	add	r3, r1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	701a      	strb	r2, [r3, #0]
		(*pchb) = (uint8_t)((*pchb) + (*pcha));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	701a      	strb	r2, [r3, #0]
	for(i=0 ; i<cnt ; i++)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbe6      	blt.n	8001eb4 <crcUBX+0x24>
	}
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <bytesToLong>:

int32_t bytesToLong(uint8_t *b)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	int8_t i;
	mlong x;
	for(i=0 ; i<4 ; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	e011      	b.n	8001f24 <bytesToLong+0x32>
	{
		x.b[i] = b[i];
 8001f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	441a      	add	r2, r3
 8001f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	f107 0110 	add.w	r1, r7, #16
 8001f12:	440b      	add	r3, r1
 8001f14:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0 ; i<4 ; i++)
 8001f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	dde9      	ble.n	8001f00 <bytesToLong+0xe>
	}
	return(x.i);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <bytesToShort>:

int16_t bytesToShort(uint8_t *b)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
	mshort x;
	x.b[1] = b[1];
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3301      	adds	r3, #1
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b25b      	sxtb	r3, r3
 8001f4a:	737b      	strb	r3, [r7, #13]
	x.b[0] = b[0];
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	733b      	strb	r3, [r7, #12]
	return(x.i);
 8001f54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <MX_DMA_Init+0x78>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a1a      	ldr	r2, [pc, #104]	; (8001fdc <MX_DMA_Init+0x78>)
 8001f74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_DMA_Init+0x78>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <MX_DMA_Init+0x78>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <MX_DMA_Init+0x78>)
 8001f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_DMA_Init+0x78>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2010      	movs	r0, #16
 8001fa8:	f001 f959 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001fac:	2010      	movs	r0, #16
 8001fae:	f001 f972 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2038      	movs	r0, #56	; 0x38
 8001fb8:	f001 f951 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fbc:	2038      	movs	r0, #56	; 0x38
 8001fbe:	f001 f96a 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	203b      	movs	r0, #59	; 0x3b
 8001fc8:	f001 f949 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001fcc:	203b      	movs	r0, #59	; 0x3b
 8001fce:	f001 f962 	bl	8003296 <HAL_NVIC_EnableIRQ>

}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b71      	ldr	r3, [pc, #452]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a70      	ldr	r2, [pc, #448]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 8002000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b6e      	ldr	r3, [pc, #440]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a69      	ldr	r2, [pc, #420]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a62      	ldr	r2, [pc, #392]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	4b5c      	ldr	r3, [pc, #368]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a5b      	ldr	r2, [pc, #364]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b59      	ldr	r3, [pc, #356]	; (80021c0 <MX_GPIO_Init+0x1e0>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 800206c:	4855      	ldr	r0, [pc, #340]	; (80021c4 <MX_GPIO_Init+0x1e4>)
 800206e:	f001 fe57 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RPI_INT_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002078:	4853      	ldr	r0, [pc, #332]	; (80021c8 <MX_GPIO_Init+0x1e8>)
 800207a:	f001 fe51 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|BNO_RST_Pin, GPIO_PIN_SET);
 800207e:	2201      	movs	r2, #1
 8002080:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002084:	4850      	ldr	r0, [pc, #320]	; (80021c8 <MX_GPIO_Init+0x1e8>)
 8002086:	f001 fe4b 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800208a:	2201      	movs	r2, #1
 800208c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002090:	484e      	ldr	r0, [pc, #312]	; (80021cc <MX_GPIO_Init+0x1ec>)
 8002092:	f001 fe45 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800209c:	484b      	ldr	r0, [pc, #300]	; (80021cc <MX_GPIO_Init+0x1ec>)
 800209e:	f001 fe3f 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 80020a2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80020a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a8:	2301      	movs	r3, #1
 80020aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	4842      	ldr	r0, [pc, #264]	; (80021c4 <MX_GPIO_Init+0x1e4>)
 80020bc:	f001 fc96 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020ca:	2302      	movs	r3, #2
 80020cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	483a      	ldr	r0, [pc, #232]	; (80021c4 <MX_GPIO_Init+0x1e4>)
 80020da:	f001 fc87 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPI_INT_Pin;
 80020de:	2340      	movs	r3, #64	; 0x40
 80020e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e2:	2301      	movs	r3, #1
 80020e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RPI_INT_GPIO_Port, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	4834      	ldr	r0, [pc, #208]	; (80021c8 <MX_GPIO_Init+0x1e8>)
 80020f6:	f001 fc79 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002106:	2302      	movs	r3, #2
 8002108:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	482d      	ldr	r0, [pc, #180]	; (80021c8 <MX_GPIO_Init+0x1e8>)
 8002112:	f001 fc6b 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800211a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211c:	2301      	movs	r3, #1
 800211e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	4826      	ldr	r0, [pc, #152]	; (80021c8 <MX_GPIO_Init+0x1e8>)
 8002130:	f001 fc5c 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BNO_RST_Pin;
 8002134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002142:	2301      	movs	r3, #1
 8002144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BNO_RST_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	481e      	ldr	r0, [pc, #120]	; (80021c8 <MX_GPIO_Init+0x1e8>)
 800214e:	f001 fc4d 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	4818      	ldr	r0, [pc, #96]	; (80021cc <MX_GPIO_Init+0x1ec>)
 800216c:	f001 fc3e 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <MX_GPIO_Init+0x1f0>)
 8002178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4811      	ldr	r0, [pc, #68]	; (80021cc <MX_GPIO_Init+0x1ec>)
 8002186:	f001 fc31 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800218a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002190:	2301      	movs	r3, #1
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	480a      	ldr	r0, [pc, #40]	; (80021cc <MX_GPIO_Init+0x1ec>)
 80021a4:	f001 fc22 	bl	80039ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	2028      	movs	r0, #40	; 0x28
 80021ae:	f001 f856 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021b2:	2028      	movs	r0, #40	; 0x28
 80021b4:	f001 f86f 	bl	8003296 <HAL_NVIC_EnableIRQ>

}
 80021b8:	bf00      	nop
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	10110000 	.word	0x10110000

080021d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <MX_I2C1_Init+0x50>)
 80021da:	4a13      	ldr	r2, [pc, #76]	; (8002228 <MX_I2C1_Init+0x54>)
 80021dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_I2C1_Init+0x50>)
 80021e0:	4a12      	ldr	r2, [pc, #72]	; (800222c <MX_I2C1_Init+0x58>)
 80021e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_I2C1_Init+0x50>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_I2C1_Init+0x50>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_I2C1_Init+0x50>)
 80021f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <MX_I2C1_Init+0x50>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_I2C1_Init+0x50>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <MX_I2C1_Init+0x50>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_I2C1_Init+0x50>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002210:	4804      	ldr	r0, [pc, #16]	; (8002224 <MX_I2C1_Init+0x50>)
 8002212:	f001 fdb7 	bl	8003d84 <HAL_I2C_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800221c:	f000 fa28 	bl	8002670 <Error_Handler>
  }

}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	200003d4 	.word	0x200003d4
 8002228:	40005400 	.word	0x40005400
 800222c:	000186a0 	.word	0x000186a0

08002230 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_I2C_MspInit+0x84>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d12b      	bne.n	80022aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_I2C_MspInit+0x88>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_I2C_MspInit+0x88>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_I2C_MspInit+0x88>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002272:	2312      	movs	r3, #18
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002276:	2301      	movs	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800227e:	2304      	movs	r3, #4
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	480c      	ldr	r0, [pc, #48]	; (80022bc <HAL_I2C_MspInit+0x8c>)
 800228a:	f001 fbaf 	bl	80039ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_I2C_MspInit+0x88>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <HAL_I2C_MspInit+0x88>)
 8002298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_I2C_MspInit+0x88>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022aa:	bf00      	nop
 80022ac:	3728      	adds	r7, #40	; 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40005400 	.word	0x40005400
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020400 	.word	0x40020400

080022c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022c4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <__NVIC_SystemReset+0x20>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80022d0:	4903      	ldr	r1, [pc, #12]	; (80022e0 <__NVIC_SystemReset+0x20>)
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__NVIC_SystemReset+0x24>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60cb      	str	r3, [r1, #12]
 80022d8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <__NVIC_SystemReset+0x1c>
 80022e0:	e000ed00 	.word	0xe000ed00
 80022e4:	05fa0004 	.word	0x05fa0004

080022e8 <HAL_SPI_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi){
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart);
void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart);
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022fc:	b598      	push	{r3, r4, r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002300:	f000 fe3e 	bl	8002f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002304:	f000 f8ae 	bl	8002464 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(5000);
 8002308:	f241 3088 	movw	r0, #5000	; 0x1388
 800230c:	f000 feaa 	bl	8003064 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002310:	f7ff fe66 	bl	8001fe0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002314:	f7ff fe26 	bl	8001f64 <MX_DMA_Init>
  MX_I2C1_Init();
 8002318:	f7ff ff5c 	bl	80021d4 <MX_I2C1_Init>
  MX_SPI2_Init();
 800231c:	f000 fa22 	bl	8002764 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002320:	f000 f9ee 	bl	8002700 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002324:	f000 fd5e 	bl	8002de4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002328:	f000 fbfa 	bl	8002b20 <MX_TIM2_Init>
  MX_TIM3_Init();
 800232c:	f000 fc68 	bl	8002c00 <MX_TIM3_Init>
  bno080_start_IT();
  ODKOMENTIRAJ */

  // RTK
  //sensorRTK = copy_struct(); // Tukaj se nahajajo vsi podatki
  HAL_UART_Receive_DMA(&huart2, &spi_data.gnss_sensor.rx_byte, 1);
 8002330:	2201      	movs	r2, #1
 8002332:	4941      	ldr	r1, [pc, #260]	; (8002438 <main+0x13c>)
 8002334:	4841      	ldr	r0, [pc, #260]	; (800243c <main+0x140>)
 8002336:	f004 fc89 	bl	8006c4c <HAL_UART_Receive_DMA>

  HAL_Delay(5000);
 800233a:	f241 3088 	movw	r0, #5000	; 0x1388
 800233e:	f000 fe91 	bl	8003064 <HAL_Delay>

  /* TerraBeeOne */
  sens[0].i2cHandle = &hi2c1;
 8002342:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <main+0x144>)
 8002344:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <main+0x148>)
 8002346:	601a      	str	r2, [r3, #0]
  sens[0].Address = 0x40 << 1;  // default 0x30 << 1;
 8002348:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <main+0x144>)
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	711a      	strb	r2, [r3, #4]
  res = TrOne_WhoAmI(&sens[0]);
 800234e:	483c      	ldr	r0, [pc, #240]	; (8002440 <main+0x144>)
 8002350:	f7fe ff04 	bl	800115c <TrOne_WhoAmI>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <main+0x14c>)
 800235a:	701a      	strb	r2, [r3, #0]

  // Capture PWM Duty Cycle
  if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 800235c:	2100      	movs	r1, #0
 800235e:	483b      	ldr	r0, [pc, #236]	; (800244c <main+0x150>)
 8002360:	f003 fddc 	bl	8005f1c <HAL_TIM_IC_Start_IT>
  {
	  //Error_Handler();
  }

  if(HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4) != HAL_OK)
 8002364:	210c      	movs	r1, #12
 8002366:	483a      	ldr	r0, [pc, #232]	; (8002450 <main+0x154>)
 8002368:	f003 fdd8 	bl	8005f1c <HAL_TIM_IC_Start_IT>
  {
	  //Error_Handler();
  }

  pack_sz = sizeof(spi_data);
 800236c:	4b39      	ldr	r3, [pc, #228]	; (8002454 <main+0x158>)
 800236e:	2258      	movs	r2, #88	; 0x58
 8002370:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 TrOne_ReadDist(&sens[0]);
 8002372:	4833      	ldr	r0, [pc, #204]	; (8002440 <main+0x144>)
 8002374:	f7fe ff18 	bl	80011a8 <TrOne_ReadDist>
	 spi_data.tof_sens[0] = sens[0].distance;
 8002378:	4b31      	ldr	r3, [pc, #196]	; (8002440 <main+0x144>)
 800237a:	88db      	ldrh	r3, [r3, #6]
 800237c:	b21a      	sxth	r2, r3
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <main+0x15c>)
 8002380:	801a      	strh	r2, [r3, #0]
	 spi_data.gnss_sensor.vel.velocity = sqrt (spi_data.gnss_sensor.vel.N*spi_data.gnss_sensor.vel.N + spi_data.gnss_sensor.vel.E*spi_data.gnss_sensor.vel.E + spi_data.gnss_sensor.vel.E*spi_data.gnss_sensor.vel.E);
 8002382:	4b35      	ldr	r3, [pc, #212]	; (8002458 <main+0x15c>)
 8002384:	ed93 7a06 	vldr	s14, [r3, #24]
 8002388:	4b33      	ldr	r3, [pc, #204]	; (8002458 <main+0x15c>)
 800238a:	edd3 7a06 	vldr	s15, [r3, #24]
 800238e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002392:	4b31      	ldr	r3, [pc, #196]	; (8002458 <main+0x15c>)
 8002394:	edd3 6a07 	vldr	s13, [r3, #28]
 8002398:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <main+0x15c>)
 800239a:	edd3 7a07 	vldr	s15, [r3, #28]
 800239e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <main+0x15c>)
 80023a8:	edd3 6a07 	vldr	s13, [r3, #28]
 80023ac:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <main+0x15c>)
 80023ae:	edd3 7a07 	vldr	s15, [r3, #28]
 80023b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ba:	ee17 0a90 	vmov	r0, s15
 80023be:	f7fe f867 	bl	8000490 <__aeabi_f2d>
 80023c2:	4603      	mov	r3, r0
 80023c4:	460c      	mov	r4, r1
 80023c6:	ec44 3b10 	vmov	d0, r3, r4
 80023ca:	f005 fb2f 	bl	8007a2c <sqrt>
 80023ce:	ec54 3b10 	vmov	r3, r4, d0
 80023d2:	4618      	mov	r0, r3
 80023d4:	4621      	mov	r1, r4
 80023d6:	f7fe fb63 	bl	8000aa0 <__aeabi_d2f>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <main+0x15c>)
 80023de:	625a      	str	r2, [r3, #36]	; 0x24


	 //spi_data.gnss_sensor.vel.velocity = sqrt (spi_data.gnss_sensor.vel.N*spi_data.gnss_sensor.vel.N + spi_data.gnss_sensor.vel.E*spi_data.gnss_sensor.vel.E + spi_data.gnss_sensor.vel.E*spi_data.gnss_sensor.vel.E);

	 HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)&spi_data, pack_sz);
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <main+0x158>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	491b      	ldr	r1, [pc, #108]	; (8002458 <main+0x15c>)
 80023ea:	481c      	ldr	r0, [pc, #112]	; (800245c <main+0x160>)
 80023ec:	f003 fa3c 	bl	8005868 <HAL_SPI_Transmit_DMA>

	 HAL_GPIO_WritePin(RPI_INT_GPIO_Port, RPI_INT_Pin, 1);
 80023f0:	2201      	movs	r2, #1
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	481a      	ldr	r0, [pc, #104]	; (8002460 <main+0x164>)
 80023f6:	f001 fc93 	bl	8003d20 <HAL_GPIO_WritePin>
	 HAL_Delay(50);
 80023fa:	2032      	movs	r0, #50	; 0x32
 80023fc:	f000 fe32 	bl	8003064 <HAL_Delay>
	 HAL_GPIO_WritePin(RPI_INT_GPIO_Port, RPI_INT_Pin, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2140      	movs	r1, #64	; 0x40
 8002404:	4816      	ldr	r0, [pc, #88]	; (8002460 <main+0x164>)
 8002406:	f001 fc8b 	bl	8003d20 <HAL_GPIO_WritePin>
	 HAL_Delay(50);
 800240a:	2032      	movs	r0, #50	; 0x32
 800240c:	f000 fe2a 	bl	8003064 <HAL_Delay>

	 //pin_state = HAL_GPIO_ReadPin (RPI_INT_GPIO_Port, RPI_INT_Pin);

	 spi_data.bno_sens += 3;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <main+0x15c>)
 8002412:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002416:	b29b      	uxth	r3, r3
 8002418:	3303      	adds	r3, #3
 800241a:	b29b      	uxth	r3, r3
 800241c:	b21a      	sxth	r2, r3
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <main+0x15c>)
 8002420:	811a      	strh	r2, [r3, #8]
	 if (spi_data.bno_sens > 50) {spi_data.bno_sens = -50;}
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <main+0x15c>)
 8002424:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002428:	2b32      	cmp	r3, #50	; 0x32
 800242a:	dda2      	ble.n	8002372 <main+0x76>
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <main+0x15c>)
 800242e:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8002432:	811a      	strh	r2, [r3, #8]
	 TrOne_ReadDist(&sens[0]);
 8002434:	e79d      	b.n	8002372 <main+0x76>
 8002436:	bf00      	nop
 8002438:	20000478 	.word	0x20000478
 800243c:	2000068c 	.word	0x2000068c
 8002440:	20000484 	.word	0x20000484
 8002444:	200003d4 	.word	0x200003d4
 8002448:	200000b0 	.word	0x200000b0
 800244c:	200005ec 	.word	0x200005ec
 8002450:	200005ac 	.word	0x200005ac
 8002454:	20000480 	.word	0x20000480
 8002458:	20000428 	.word	0x20000428
 800245c:	20000494 	.word	0x20000494
 8002460:	40020800 	.word	0x40020800

08002464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b094      	sub	sp, #80	; 0x50
 8002468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246a:	f107 0320 	add.w	r3, r7, #32
 800246e:	2230      	movs	r2, #48	; 0x30
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f005 fad2 	bl	8007a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	4b28      	ldr	r3, [pc, #160]	; (8002530 <SystemClock_Config+0xcc>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	4a27      	ldr	r2, [pc, #156]	; (8002530 <SystemClock_Config+0xcc>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	6413      	str	r3, [r2, #64]	; 0x40
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <SystemClock_Config+0xcc>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	4b22      	ldr	r3, [pc, #136]	; (8002534 <SystemClock_Config+0xd0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a21      	ldr	r2, [pc, #132]	; (8002534 <SystemClock_Config+0xd0>)
 80024ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <SystemClock_Config+0xd0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ca:	2302      	movs	r3, #2
 80024cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80024d4:	2306      	movs	r3, #6
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024d8:	23a8      	movs	r3, #168	; 0xa8
 80024da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024dc:	2302      	movs	r3, #2
 80024de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024e0:	2304      	movs	r3, #4
 80024e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e4:	f107 0320 	add.w	r3, r7, #32
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fd1d 	bl	8004f28 <HAL_RCC_OscConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024f4:	f000 f8bc 	bl	8002670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f8:	230f      	movs	r3, #15
 80024fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024fc:	2302      	movs	r3, #2
 80024fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002504:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800250a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800250e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	2105      	movs	r1, #5
 8002516:	4618      	mov	r0, r3
 8002518:	f002 ff76 	bl	8005408 <HAL_RCC_ClockConfig>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002522:	f000 f8a5 	bl	8002670 <Error_Handler>
  }
}
 8002526:	bf00      	nop
 8002528:	3750      	adds	r7, #80	; 0x50
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	40007000 	.word	0x40007000

08002538 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)		//GNSS
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <HAL_UART_RxCpltCallback+0x20>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d102      	bne.n	800254e <HAL_UART_RxCpltCallback+0x16>
	{
		ubx_handleGNSS(&spi_data.gnss_sensor);
 8002548:	4804      	ldr	r0, [pc, #16]	; (800255c <HAL_UART_RxCpltCallback+0x24>)
 800254a:	f7ff f9bb 	bl	80018c4 <ubx_handleGNSS>
	}
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000068c 	.word	0x2000068c
 800255c:	20000434 	.word	0x20000434

08002560 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode
  * @param  htim: TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7f1b      	ldrb	r3, [r3, #28]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d131      	bne.n	80025d4 <HAL_TIM_IC_CaptureCallback+0x74>
  {
	  uwDutyCycleCur1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002570:	2100      	movs	r1, #0
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f003 ff96 	bl	80064a4 <HAL_TIM_ReadCapturedValue>
 8002578:	4602      	mov	r2, r0
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800257c:	601a      	str	r2, [r3, #0]
	  uwDutyCycle1 = uwDutyCycleCur1 - uwDutyCyclePre1;
 800257e:	4b35      	ldr	r3, [pc, #212]	; (8002654 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4b35      	ldr	r3, [pc, #212]	; (8002658 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	4a34      	ldr	r2, [pc, #208]	; (800265c <HAL_TIM_IC_CaptureCallback+0xfc>)
 800258a:	6013      	str	r3, [r2, #0]
	  uwDutyCyclePre1 = uwDutyCycleCur1;
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a31      	ldr	r2, [pc, #196]	; (8002658 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8002592:	6013      	str	r3, [r2, #0]

	  // 16800 - Number of counts for 1ms (OFF), 33600 Number of counts for 2ms (ON)
	  if(uwDutyCycle1 == 33600){
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f248 3240 	movw	r2, #33600	; 0x8340
 800259c:	4293      	cmp	r3, r2
 800259e:	d109      	bne.n	80025b4 <HAL_TIM_IC_CaptureCallback+0x54>
		  spi_data.pwm_val |= 0x02;
 80025a0:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <HAL_TIM_IC_CaptureCallback+0x100>)
 80025a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b2c      	ldr	r3, [pc, #176]	; (8002660 <HAL_TIM_IC_CaptureCallback+0x100>)
 80025ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	  }else if(uwDutyCycle2 == 16800){
		  spi_data.pwm_val &= 0xFE;
	  }
  }

}
 80025b2:	e04b      	b.n	800264c <HAL_TIM_IC_CaptureCallback+0xec>
	  }else if(uwDutyCycle1 == 16800){
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_TIM_IC_CaptureCallback+0xfc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80025bc:	4293      	cmp	r3, r2
 80025be:	d145      	bne.n	800264c <HAL_TIM_IC_CaptureCallback+0xec>
		  spi_data.pwm_val &= 0xFD;
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_TIM_IC_CaptureCallback+0x100>)
 80025c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025c6:	f023 0302 	bic.w	r3, r3, #2
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_TIM_IC_CaptureCallback+0x100>)
 80025ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 80025d2:	e03b      	b.n	800264c <HAL_TIM_IC_CaptureCallback+0xec>
  }else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7f1b      	ldrb	r3, [r3, #28]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d137      	bne.n	800264c <HAL_TIM_IC_CaptureCallback+0xec>
	  uwDutyCycleCur2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80025dc:	210c      	movs	r1, #12
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f003 ff60 	bl	80064a4 <HAL_TIM_ReadCapturedValue>
 80025e4:	4603      	mov	r3, r0
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <HAL_TIM_IC_CaptureCallback+0x104>)
 80025ea:	801a      	strh	r2, [r3, #0]
	  uwDutyCycle2 = uwDutyCycleCur2 - uwDutyCyclePre2;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_TIM_IC_CaptureCallback+0x104>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_TIM_IC_CaptureCallback+0x108>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80025fe:	801a      	strh	r2, [r3, #0]
	  uwDutyCyclePre2 = uwDutyCycleCur2;
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <HAL_TIM_IC_CaptureCallback+0x104>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002608:	801a      	strh	r2, [r3, #0]
	  if(uwDutyCycle2 == 33600){
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_TIM_IC_CaptureCallback+0x10c>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	f248 3240 	movw	r2, #33600	; 0x8340
 8002614:	4293      	cmp	r3, r2
 8002616:	d109      	bne.n	800262c <HAL_TIM_IC_CaptureCallback+0xcc>
		  spi_data.pwm_val |= 0x01;
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_TIM_IC_CaptureCallback+0x100>)
 800261a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_TIM_IC_CaptureCallback+0x100>)
 8002626:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 800262a:	e00f      	b.n	800264c <HAL_TIM_IC_CaptureCallback+0xec>
	  }else if(uwDutyCycle2 == 16800){
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_TIM_IC_CaptureCallback+0x10c>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8002636:	4293      	cmp	r3, r2
 8002638:	d108      	bne.n	800264c <HAL_TIM_IC_CaptureCallback+0xec>
		  spi_data.pwm_val &= 0xFE;
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_TIM_IC_CaptureCallback+0x100>)
 800263c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_TIM_IC_CaptureCallback+0x100>)
 8002648:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200000c4 	.word	0x200000c4
 8002658:	200000bc 	.word	0x200000bc
 800265c:	200000b4 	.word	0x200000b4
 8002660:	20000428 	.word	0x20000428
 8002664:	200000c8 	.word	0x200000c8
 8002668:	200000c0 	.word	0x200000c0
 800266c:	200000b8 	.word	0x200000b8

08002670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  NVIC_SystemReset();
 8002674:	f7ff fe24 	bl	80022c0 <__NVIC_SystemReset>

08002678 <LL_SPI_SetStandard>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f023 0210 	bic.w	r2, r3, #16
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	605a      	str	r2, [r3, #4]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40023800 	.word	0x40023800

080026d0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80026da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026dc:	4907      	ldr	r1, [pc, #28]	; (80026fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80026e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4013      	ands	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40023800 	.word	0x40023800

08002700 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <MX_SPI1_Init+0x5c>)
 8002706:	4a16      	ldr	r2, [pc, #88]	; (8002760 <MX_SPI1_Init+0x60>)
 8002708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <MX_SPI1_Init+0x5c>)
 800270c:	2200      	movs	r2, #0
 800270e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <MX_SPI1_Init+0x5c>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_SPI1_Init+0x5c>)
 8002718:	2200      	movs	r2, #0
 800271a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <MX_SPI1_Init+0x5c>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_SPI1_Init+0x5c>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <MX_SPI1_Init+0x5c>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <MX_SPI1_Init+0x5c>)
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <MX_SPI1_Init+0x5c>)
 8002736:	2200      	movs	r2, #0
 8002738:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <MX_SPI1_Init+0x5c>)
 800273c:	2200      	movs	r2, #0
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_SPI1_Init+0x5c>)
 8002742:	220a      	movs	r2, #10
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_SPI1_Init+0x5c>)
 8002748:	f003 f82a 	bl	80057a0 <HAL_SPI_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8002752:	f7ff ff8d 	bl	8002670 <Error_Handler>
  }

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000494 	.word	0x20000494
 8002760:	40013000 	.word	0x40013000

08002764 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b090      	sub	sp, #64	; 0x40
 8002768:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800276a:	f107 0318 	add.w	r3, r7, #24
 800276e:	2228      	movs	r2, #40	; 0x28
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f005 f952 	bl	8007a1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	463b      	mov	r3, r7
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002788:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800278c:	f7ff ffa0 	bl	80026d0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002790:	2004      	movs	r0, #4
 8002792:	f7ff ff85 	bl	80026a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002796:	2002      	movs	r0, #2
 8002798:	f7ff ff82 	bl	80026a0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800279c:	230c      	movs	r3, #12
 800279e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027a0:	2302      	movs	r3, #2
 80027a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80027b0:	2305      	movs	r3, #5
 80027b2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b4:	463b      	mov	r3, r7
 80027b6:	4619      	mov	r1, r3
 80027b8:	481c      	ldr	r0, [pc, #112]	; (800282c <MX_SPI2_Init+0xc8>)
 80027ba:	f005 f81c 	bl	80077f6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80027be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027c4:	2302      	movs	r3, #2
 80027c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80027d4:	2305      	movs	r3, #5
 80027d6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d8:	463b      	mov	r3, r7
 80027da:	4619      	mov	r1, r3
 80027dc:	4814      	ldr	r0, [pc, #80]	; (8002830 <MX_SPI2_Init+0xcc>)
 80027de:	f005 f80a 	bl	80077f6 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80027e6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80027ea:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80027ec:	2300      	movs	r3, #0
 80027ee:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80027f0:	2302      	movs	r3, #2
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80027f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80027fe:	2318      	movs	r3, #24
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002802:	2300      	movs	r3, #0
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002806:	2300      	movs	r3, #0
 8002808:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800280a:	230a      	movs	r3, #10
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800280e:	f107 0318 	add.w	r3, r7, #24
 8002812:	4619      	mov	r1, r3
 8002814:	4807      	ldr	r0, [pc, #28]	; (8002834 <MX_SPI2_Init+0xd0>)
 8002816:	f005 f884 	bl	8007922 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800281a:	2100      	movs	r1, #0
 800281c:	4805      	ldr	r0, [pc, #20]	; (8002834 <MX_SPI2_Init+0xd0>)
 800281e:	f7ff ff2b 	bl	8002678 <LL_SPI_SetStandard>

}
 8002822:	bf00      	nop
 8002824:	3740      	adds	r7, #64	; 0x40
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40020800 	.word	0x40020800
 8002830:	40020400 	.word	0x40020400
 8002834:	40003800 	.word	0x40003800

08002838 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a53      	ldr	r2, [pc, #332]	; (80029a4 <HAL_SPI_MspInit+0x16c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	f040 80a0 	bne.w	800299c <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	4b51      	ldr	r3, [pc, #324]	; (80029a8 <HAL_SPI_MspInit+0x170>)
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <HAL_SPI_MspInit+0x170>)
 8002866:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800286a:	6453      	str	r3, [r2, #68]	; 0x44
 800286c:	4b4e      	ldr	r3, [pc, #312]	; (80029a8 <HAL_SPI_MspInit+0x170>)
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	4b4a      	ldr	r3, [pc, #296]	; (80029a8 <HAL_SPI_MspInit+0x170>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4a49      	ldr	r2, [pc, #292]	; (80029a8 <HAL_SPI_MspInit+0x170>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6313      	str	r3, [r2, #48]	; 0x30
 8002888:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_SPI_MspInit+0x170>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002894:	2310      	movs	r3, #16
 8002896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800289c:	2301      	movs	r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a0:	2303      	movs	r3, #3
 80028a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028a4:	2305      	movs	r3, #5
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	4619      	mov	r1, r3
 80028ae:	483f      	ldr	r0, [pc, #252]	; (80029ac <HAL_SPI_MspInit+0x174>)
 80028b0:	f001 f89c 	bl	80039ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028b4:	23e0      	movs	r3, #224	; 0xe0
 80028b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028bc:	2302      	movs	r3, #2
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c0:	2303      	movs	r3, #3
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028c4:	2305      	movs	r3, #5
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	4837      	ldr	r0, [pc, #220]	; (80029ac <HAL_SPI_MspInit+0x174>)
 80028d0:	f001 f88c 	bl	80039ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80028d4:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 80028d6:	4a37      	ldr	r2, [pc, #220]	; (80029b4 <HAL_SPI_MspInit+0x17c>)
 80028d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 80028dc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80028e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028e2:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028e8:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 80028f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028f6:	4b2e      	ldr	r3, [pc, #184]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028fc:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 80028fe:	2200      	movs	r2, #0
 8002900:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002902:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 8002904:	2200      	movs	r2, #0
 8002906:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 8002910:	2200      	movs	r2, #0
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002914:	4826      	ldr	r0, [pc, #152]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 8002916:	f000 fcd9 	bl	80032cc <HAL_DMA_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 8002920:	f7ff fea6 	bl	8002670 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 8002928:	64da      	str	r2, [r3, #76]	; 0x4c
 800292a:	4a21      	ldr	r2, [pc, #132]	; (80029b0 <HAL_SPI_MspInit+0x178>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 8002932:	4a22      	ldr	r2, [pc, #136]	; (80029bc <HAL_SPI_MspInit+0x184>)
 8002934:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 8002938:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800293c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 8002940:	2240      	movs	r2, #64	; 0x40
 8002942:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002944:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800294a:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 800294c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002950:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002952:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 8002954:	2200      	movs	r2, #0
 8002956:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 800295a:	2200      	movs	r2, #0
 800295c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 8002960:	2200      	movs	r2, #0
 8002962:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 8002966:	2200      	movs	r2, #0
 8002968:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 800296c:	2200      	movs	r2, #0
 800296e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002970:	4811      	ldr	r0, [pc, #68]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 8002972:	f000 fcab 	bl	80032cc <HAL_DMA_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 800297c:	f7ff fe78 	bl	8002670 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 8002984:	649a      	str	r2, [r3, #72]	; 0x48
 8002986:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <HAL_SPI_MspInit+0x180>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2100      	movs	r1, #0
 8002990:	2023      	movs	r0, #35	; 0x23
 8002992:	f000 fc64 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002996:	2023      	movs	r0, #35	; 0x23
 8002998:	f000 fc7d 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800299c:	bf00      	nop
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40013000 	.word	0x40013000
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	200004ec 	.word	0x200004ec
 80029b4:	40026410 	.word	0x40026410
 80029b8:	2000054c 	.word	0x2000054c
 80029bc:	40026458 	.word	0x40026458

080029c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_MspInit+0x4c>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <HAL_MspInit+0x4c>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_MspInit+0x4c>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_MspInit+0x4c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_MspInit+0x4c>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_MspInit+0x4c>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <HardFault_Handler+0x4>

08002a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <MemManage_Handler+0x4>

08002a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <BusFault_Handler+0x4>

08002a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <UsageFault_Handler+0x4>

08002a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a64:	f000 fade 	bl	8003024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <DMA1_Stream5_IRQHandler+0x10>)
 8002a72:	f000 fd53 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000062c 	.word	0x2000062c

08002a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <TIM2_IRQHandler+0x10>)
 8002a86:	f003 fab1 	bl	8005fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200005ec 	.word	0x200005ec

08002a94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <TIM3_IRQHandler+0x10>)
 8002a9a:	f003 faa7 	bl	8005fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200005ac 	.word	0x200005ac

08002aa8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <SPI1_IRQHandler+0x10>)
 8002aae:	f002 ff89 	bl	80059c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000494 	.word	0x20000494

08002abc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002ac0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ac4:	f001 f946 	bl	8003d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}

08002acc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <DMA2_Stream0_IRQHandler+0x10>)
 8002ad2:	f000 fd23 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200004ec 	.word	0x200004ec

08002ae0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <DMA2_Stream3_IRQHandler+0x10>)
 8002ae6:	f000 fd19 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000054c 	.word	0x2000054c

08002af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <SystemInit+0x28>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <SystemInit+0x28>)
 8002b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SystemInit+0x28>)
 8002b0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b0e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b26:	f107 0318 	add.w	r3, r7, #24
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b3e:	463b      	mov	r3, r7
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8002b4a:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002b4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8002b52:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002b54:	2204      	movs	r2, #4
 8002b56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b72:	4822      	ldr	r0, [pc, #136]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002b74:	f003 f97c 	bl	8005e70 <HAL_TIM_Base_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002b7e:	f7ff fd77 	bl	8002670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b86:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b88:	f107 0318 	add.w	r3, r7, #24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	481b      	ldr	r0, [pc, #108]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002b90:	f003 fbd0 	bl	8006334 <HAL_TIM_ConfigClockSource>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b9a:	f7ff fd69 	bl	8002670 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002b9e:	4817      	ldr	r0, [pc, #92]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002ba0:	f003 f991 	bl	8005ec6 <HAL_TIM_IC_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002baa:	f7ff fd61 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480f      	ldr	r0, [pc, #60]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002bbe:	f003 ff67 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002bc8:	f7ff fd52 	bl	8002670 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002bcc:	230a      	movs	r3, #10
 8002bce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002bdc:	463b      	mov	r3, r7
 8002bde:	2200      	movs	r2, #0
 8002be0:	4619      	mov	r1, r3
 8002be2:	4806      	ldr	r0, [pc, #24]	; (8002bfc <MX_TIM2_Init+0xdc>)
 8002be4:	f003 fb0a 	bl	80061fc <HAL_TIM_IC_ConfigChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002bee:	f7ff fd3f 	bl	8002670 <Error_Handler>
  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200005ec 	.word	0x200005ec

08002c00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c06:	f107 0310 	add.w	r3, r7, #16
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c10:	463b      	mov	r3, r7
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	609a      	str	r2, [r3, #8]
 8002c1a:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8002c1c:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <MX_TIM3_Init+0xa0>)
 8002c1e:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <MX_TIM3_Init+0xa4>)
 8002c20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <MX_TIM3_Init+0xa0>)
 8002c24:	2204      	movs	r2, #4
 8002c26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <MX_TIM3_Init+0xa0>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <MX_TIM3_Init+0xa0>)
 8002c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <MX_TIM3_Init+0xa0>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <MX_TIM3_Init+0xa0>)
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002c42:	4817      	ldr	r0, [pc, #92]	; (8002ca0 <MX_TIM3_Init+0xa0>)
 8002c44:	f003 f93f 	bl	8005ec6 <HAL_TIM_IC_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c4e:	f7ff fd0f 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c5a:	f107 0310 	add.w	r3, r7, #16
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480f      	ldr	r0, [pc, #60]	; (8002ca0 <MX_TIM3_Init+0xa0>)
 8002c62:	f003 ff15 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002c6c:	f7ff fd00 	bl	8002670 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002c70:	230a      	movs	r3, #10
 8002c72:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c74:	2301      	movs	r3, #1
 8002c76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002c80:	463b      	mov	r3, r7
 8002c82:	220c      	movs	r2, #12
 8002c84:	4619      	mov	r1, r3
 8002c86:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <MX_TIM3_Init+0xa0>)
 8002c88:	f003 fab8 	bl	80061fc <HAL_TIM_IC_ConfigChannel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002c92:	f7ff fced 	bl	8002670 <Error_Handler>
  }

}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200005ac 	.word	0x200005ac
 8002ca4:	40000400 	.word	0x40000400

08002ca8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc8:	d134      	bne.n	8002d34 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_TIM_Base_MspInit+0x94>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <HAL_TIM_Base_MspInit+0x94>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_TIM_Base_MspInit+0x94>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_TIM_Base_MspInit+0x94>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <HAL_TIM_Base_MspInit+0x94>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_TIM_Base_MspInit+0x94>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d14:	2301      	movs	r3, #1
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4808      	ldr	r0, [pc, #32]	; (8002d40 <HAL_TIM_Base_MspInit+0x98>)
 8002d20:	f000 fe64 	bl	80039ec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2101      	movs	r1, #1
 8002d28:	201c      	movs	r0, #28
 8002d2a:	f000 fa98 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d2e:	201c      	movs	r0, #28
 8002d30:	f000 fab1 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002d34:	bf00      	nop
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000

08002d44 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_TIM_IC_MspInit+0x94>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d133      	bne.n	8002dce <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <HAL_TIM_IC_MspInit+0x98>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_TIM_IC_MspInit+0x98>)
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_TIM_IC_MspInit+0x98>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_TIM_IC_MspInit+0x98>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <HAL_TIM_IC_MspInit+0x98>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_TIM_IC_MspInit+0x98>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dae:	2302      	movs	r3, #2
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	4809      	ldr	r0, [pc, #36]	; (8002de0 <HAL_TIM_IC_MspInit+0x9c>)
 8002dba:	f000 fe17 	bl	80039ec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	201d      	movs	r0, #29
 8002dc4:	f000 fa4b 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dc8:	201d      	movs	r0, #29
 8002dca:	f000 fa64 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002dce:	bf00      	nop
 8002dd0:	3728      	adds	r7, #40	; 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40020400 	.word	0x40020400

08002de4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <MX_USART2_UART_Init+0x50>)
 8002dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002e1c:	f003 fec8 	bl	8006bb0 <HAL_UART_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e26:	f7ff fc23 	bl	8002670 <Error_Handler>
  }

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	2000068c 	.word	0x2000068c
 8002e34:	40004400 	.word	0x40004400

08002e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <HAL_UART_MspInit+0xe0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d15a      	bne.n	8002f10 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <HAL_UART_MspInit+0xe4>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a2e      	ldr	r2, [pc, #184]	; (8002f1c <HAL_UART_MspInit+0xe4>)
 8002e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <HAL_UART_MspInit+0xe4>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_UART_MspInit+0xe4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a27      	ldr	r2, [pc, #156]	; (8002f1c <HAL_UART_MspInit+0xe4>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_UART_MspInit+0xe4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e92:	230c      	movs	r3, #12
 8002e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ea2:	2307      	movs	r3, #7
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	4619      	mov	r1, r3
 8002eac:	481c      	ldr	r0, [pc, #112]	; (8002f20 <HAL_UART_MspInit+0xe8>)
 8002eae:	f000 fd9d 	bl	80039ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002eb2:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_UART_MspInit+0xf0>)
 8002eb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ebe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ec6:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ecc:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002ee0:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ee8:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ef4:	480b      	ldr	r0, [pc, #44]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002ef6:	f000 f9e9 	bl	80032cc <HAL_DMA_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002f00:	f7ff fbb6 	bl	8002670 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0a:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <HAL_UART_MspInit+0xec>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f10:	bf00      	nop
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40004400 	.word	0x40004400
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	2000062c 	.word	0x2000062c
 8002f28:	40026088 	.word	0x40026088

08002f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f32:	e003      	b.n	8002f3c <LoopCopyDataInit>

08002f34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f3a:	3104      	adds	r1, #4

08002f3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f3c:	480b      	ldr	r0, [pc, #44]	; (8002f6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f44:	d3f6      	bcc.n	8002f34 <CopyDataInit>
  ldr  r2, =_sbss
 8002f46:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f48:	e002      	b.n	8002f50 <LoopFillZerobss>

08002f4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f4c:	f842 3b04 	str.w	r3, [r2], #4

08002f50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f54:	d3f9      	bcc.n	8002f4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f56:	f7ff fdcd 	bl	8002af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f5a:	f004 fd3b 	bl	80079d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5e:	f7ff f9cd 	bl	80022fc <main>
  bx  lr    
 8002f62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f68:	08008d84 	.word	0x08008d84
  ldr  r0, =_sdata
 8002f6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f70:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8002f74:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002f78:	200006d0 	.word	0x200006d0

08002f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC_IRQHandler>
	...

08002f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <HAL_Init+0x40>)
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_Init+0x40>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_Init+0x40>)
 8002f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <HAL_Init+0x40>)
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa8:	2003      	movs	r0, #3
 8002faa:	f000 f94d 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f000 f808 	bl	8002fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb4:	f7ff fd04 	bl	80029c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023c00 	.word	0x40023c00

08002fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_InitTick+0x54>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_InitTick+0x58>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f965 	bl	80032b2 <HAL_SYSTICK_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00e      	b.n	8003010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d80a      	bhi.n	800300e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003000:	f000 f92d 	bl	800325e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003004:	4a06      	ldr	r2, [pc, #24]	; (8003020 <HAL_InitTick+0x5c>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000014 	.word	0x20000014
 800301c:	2000001c 	.word	0x2000001c
 8003020:	20000018 	.word	0x20000018

08003024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_IncTick+0x20>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_IncTick+0x24>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <HAL_IncTick+0x24>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	2000001c 	.word	0x2000001c
 8003048:	200006cc 	.word	0x200006cc

0800304c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return uwTick;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_GetTick+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	200006cc 	.word	0x200006cc

08003064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff ffee 	bl	800304c <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800307c:	d005      	beq.n	800308a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_Delay+0x40>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800308a:	bf00      	nop
 800308c:	f7ff ffde 	bl	800304c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d8f7      	bhi.n	800308c <HAL_Delay+0x28>
  {
  }
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000001c 	.word	0x2000001c

080030a8 <__NVIC_SetPriorityGrouping>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_GetPriorityGrouping>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <__NVIC_GetPriorityGrouping+0x18>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0307 	and.w	r3, r3, #7
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_EnableIRQ>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db0b      	blt.n	8003136 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4907      	ldr	r1, [pc, #28]	; (8003144 <__NVIC_EnableIRQ+0x38>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_SetPriority>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	; (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	; (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003214:	d301      	bcc.n	800321a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003216:	2301      	movs	r3, #1
 8003218:	e00f      	b.n	800323a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <SysTick_Config+0x40>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003222:	210f      	movs	r1, #15
 8003224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003228:	f7ff ff8e 	bl	8003148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <SysTick_Config+0x40>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <SysTick_Config+0x40>)
 8003234:	2207      	movs	r2, #7
 8003236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000e010 	.word	0xe000e010

08003248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff29 	bl	80030a8 <__NVIC_SetPriorityGrouping>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003270:	f7ff ff3e 	bl	80030f0 <__NVIC_GetPriorityGrouping>
 8003274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff8e 	bl	800319c <NVIC_EncodePriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff5d 	bl	8003148 <__NVIC_SetPriority>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff31 	bl	800310c <__NVIC_EnableIRQ>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffa2 	bl	8003204 <SysTick_Config>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff feb8 	bl	800304c <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e099      	b.n	800341c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003308:	e00f      	b.n	800332a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800330a:	f7ff fe9f 	bl	800304c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b05      	cmp	r3, #5
 8003316:	d908      	bls.n	800332a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2203      	movs	r2, #3
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e078      	b.n	800341c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e8      	bne.n	800330a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4b38      	ldr	r3, [pc, #224]	; (8003424 <HAL_DMA_Init+0x158>)
 8003344:	4013      	ands	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003356:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2b04      	cmp	r3, #4
 8003382:	d107      	bne.n	8003394 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	4313      	orrs	r3, r2
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0307 	bic.w	r3, r3, #7
 80033aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d117      	bne.n	80033ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fa91 	bl	80038f8 <DMA_CheckFifoParam>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2240      	movs	r2, #64	; 0x40
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033ea:	2301      	movs	r3, #1
 80033ec:	e016      	b.n	800341c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa48 	bl	800388c <DMA_CalcBaseAndBitshift>
 80033fc:	4603      	mov	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	223f      	movs	r2, #63	; 0x3f
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	f010803f 	.word	0xf010803f

08003428 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_DMA_Start_IT+0x26>
 800344a:	2302      	movs	r3, #2
 800344c:	e040      	b.n	80034d0 <HAL_DMA_Start_IT+0xa8>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d12f      	bne.n	80034c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f9da 	bl	8003830 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	223f      	movs	r2, #63	; 0x3f
 8003482:	409a      	lsls	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0216 	orr.w	r2, r2, #22
 8003496:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0208 	orr.w	r2, r2, #8
 80034ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e005      	b.n	80034ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d004      	beq.n	80034f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2280      	movs	r2, #128	; 0x80
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00c      	b.n	8003510 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2205      	movs	r2, #5
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003528:	4b92      	ldr	r3, [pc, #584]	; (8003774 <HAL_DMA_IRQHandler+0x258>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a92      	ldr	r2, [pc, #584]	; (8003778 <HAL_DMA_IRQHandler+0x25c>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	2208      	movs	r2, #8
 8003548:	409a      	lsls	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01a      	beq.n	8003588 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0204 	bic.w	r2, r2, #4
 800356e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	2208      	movs	r2, #8
 8003576:	409a      	lsls	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	2201      	movs	r2, #1
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d012      	beq.n	80035be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	2201      	movs	r2, #1
 80035ac:	409a      	lsls	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0202 	orr.w	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2204      	movs	r2, #4
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d012      	beq.n	80035f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00b      	beq.n	80035f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	2204      	movs	r2, #4
 80035e2:	409a      	lsls	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	f043 0204 	orr.w	r2, r3, #4
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	2210      	movs	r2, #16
 80035fa:	409a      	lsls	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d043      	beq.n	800368c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d03c      	beq.n	800368c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003616:	2210      	movs	r2, #16
 8003618:	409a      	lsls	r2, r3
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d018      	beq.n	800365e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d024      	beq.n	800368c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
 800364a:	e01f      	b.n	800368c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
 800365c:	e016      	b.n	800368c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d107      	bne.n	800367c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0208 	bic.w	r2, r2, #8
 800367a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	2220      	movs	r2, #32
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 808e 	beq.w	80037ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8086 	beq.w	80037ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	2220      	movs	r2, #32
 80036b4:	409a      	lsls	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	d136      	bne.n	8003734 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0216 	bic.w	r2, r2, #22
 80036d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <HAL_DMA_IRQHandler+0x1da>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0208 	bic.w	r2, r2, #8
 8003704:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370a:	223f      	movs	r2, #63	; 0x3f
 800370c:	409a      	lsls	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003726:	2b00      	cmp	r3, #0
 8003728:	d07d      	beq.n	8003826 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
        }
        return;
 8003732:	e078      	b.n	8003826 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d01c      	beq.n	800377c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d108      	bne.n	8003762 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	2b00      	cmp	r3, #0
 8003756:	d030      	beq.n	80037ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
 8003760:	e02b      	b.n	80037ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d027      	beq.n	80037ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	e022      	b.n	80037ba <HAL_DMA_IRQHandler+0x29e>
 8003774:	20000014 	.word	0x20000014
 8003778:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10f      	bne.n	80037aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0210 	bic.w	r2, r2, #16
 8003798:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d032      	beq.n	8003828 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d022      	beq.n	8003814 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2205      	movs	r2, #5
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3301      	adds	r3, #1
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d307      	bcc.n	8003802 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f2      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x2ca>
 8003800:	e000      	b.n	8003804 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003802:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
 8003824:	e000      	b.n	8003828 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003826:	bf00      	nop
    }
  }
}
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop

08003830 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800384c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d108      	bne.n	8003870 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800386e:	e007      	b.n	8003880 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	3b10      	subs	r3, #16
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <DMA_CalcBaseAndBitshift+0x64>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <DMA_CalcBaseAndBitshift+0x68>)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d909      	bls.n	80038ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	1d1a      	adds	r2, r3, #4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	659a      	str	r2, [r3, #88]	; 0x58
 80038cc:	e007      	b.n	80038de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	aaaaaaab 	.word	0xaaaaaaab
 80038f4:	08008d1c 	.word	0x08008d1c

080038f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11f      	bne.n	8003952 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d855      	bhi.n	80039c4 <DMA_CheckFifoParam+0xcc>
 8003918:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <DMA_CheckFifoParam+0x28>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003931 	.word	0x08003931
 8003924:	08003943 	.word	0x08003943
 8003928:	08003931 	.word	0x08003931
 800392c:	080039c5 	.word	0x080039c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d045      	beq.n	80039c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003940:	e042      	b.n	80039c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800394a:	d13f      	bne.n	80039cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003950:	e03c      	b.n	80039cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395a:	d121      	bne.n	80039a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d836      	bhi.n	80039d0 <DMA_CheckFifoParam+0xd8>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <DMA_CheckFifoParam+0x70>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	08003979 	.word	0x08003979
 800396c:	0800397f 	.word	0x0800397f
 8003970:	08003979 	.word	0x08003979
 8003974:	08003991 	.word	0x08003991
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
      break;
 800397c:	e02f      	b.n	80039de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d024      	beq.n	80039d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398e:	e021      	b.n	80039d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003998:	d11e      	bne.n	80039d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800399e:	e01b      	b.n	80039d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d902      	bls.n	80039ac <DMA_CheckFifoParam+0xb4>
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d003      	beq.n	80039b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039aa:	e018      	b.n	80039de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      break;
 80039b0:	e015      	b.n	80039de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00e      	beq.n	80039dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
      break;
 80039c2:	e00b      	b.n	80039dc <DMA_CheckFifoParam+0xe4>
      break;
 80039c4:	bf00      	nop
 80039c6:	e00a      	b.n	80039de <DMA_CheckFifoParam+0xe6>
      break;
 80039c8:	bf00      	nop
 80039ca:	e008      	b.n	80039de <DMA_CheckFifoParam+0xe6>
      break;
 80039cc:	bf00      	nop
 80039ce:	e006      	b.n	80039de <DMA_CheckFifoParam+0xe6>
      break;
 80039d0:	bf00      	nop
 80039d2:	e004      	b.n	80039de <DMA_CheckFifoParam+0xe6>
      break;
 80039d4:	bf00      	nop
 80039d6:	e002      	b.n	80039de <DMA_CheckFifoParam+0xe6>
      break;   
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <DMA_CheckFifoParam+0xe6>
      break;
 80039dc:	bf00      	nop
    }
  } 
  
  return status; 
 80039de:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e16b      	b.n	8003ce0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	f040 815a 	bne.w	8003cda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d00b      	beq.n	8003a46 <HAL_GPIO_Init+0x5a>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d007      	beq.n	8003a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a3a:	2b11      	cmp	r3, #17
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b12      	cmp	r3, #18
 8003a44:	d130      	bne.n	8003aa8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	2203      	movs	r2, #3
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 0201 	and.w	r2, r3, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0xfc>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b12      	cmp	r3, #18
 8003ae6:	d123      	bne.n	8003b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	08da      	lsrs	r2, r3, #3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3208      	adds	r2, #8
 8003af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	220f      	movs	r2, #15
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	08da      	lsrs	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3208      	adds	r2, #8
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0203 	and.w	r2, r3, #3
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80b4 	beq.w	8003cda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	4b5f      	ldr	r3, [pc, #380]	; (8003cf4 <HAL_GPIO_Init+0x308>)
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	4a5e      	ldr	r2, [pc, #376]	; (8003cf4 <HAL_GPIO_Init+0x308>)
 8003b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b80:	6453      	str	r3, [r2, #68]	; 0x44
 8003b82:	4b5c      	ldr	r3, [pc, #368]	; (8003cf4 <HAL_GPIO_Init+0x308>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8e:	4a5a      	ldr	r2, [pc, #360]	; (8003cf8 <HAL_GPIO_Init+0x30c>)
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	3302      	adds	r3, #2
 8003b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a51      	ldr	r2, [pc, #324]	; (8003cfc <HAL_GPIO_Init+0x310>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d02b      	beq.n	8003c12 <HAL_GPIO_Init+0x226>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a50      	ldr	r2, [pc, #320]	; (8003d00 <HAL_GPIO_Init+0x314>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d025      	beq.n	8003c0e <HAL_GPIO_Init+0x222>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4f      	ldr	r2, [pc, #316]	; (8003d04 <HAL_GPIO_Init+0x318>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01f      	beq.n	8003c0a <HAL_GPIO_Init+0x21e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a4e      	ldr	r2, [pc, #312]	; (8003d08 <HAL_GPIO_Init+0x31c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d019      	beq.n	8003c06 <HAL_GPIO_Init+0x21a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a4d      	ldr	r2, [pc, #308]	; (8003d0c <HAL_GPIO_Init+0x320>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_GPIO_Init+0x216>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a4c      	ldr	r2, [pc, #304]	; (8003d10 <HAL_GPIO_Init+0x324>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00d      	beq.n	8003bfe <HAL_GPIO_Init+0x212>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4b      	ldr	r2, [pc, #300]	; (8003d14 <HAL_GPIO_Init+0x328>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <HAL_GPIO_Init+0x20e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4a      	ldr	r2, [pc, #296]	; (8003d18 <HAL_GPIO_Init+0x32c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d101      	bne.n	8003bf6 <HAL_GPIO_Init+0x20a>
 8003bf2:	2307      	movs	r3, #7
 8003bf4:	e00e      	b.n	8003c14 <HAL_GPIO_Init+0x228>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	e00c      	b.n	8003c14 <HAL_GPIO_Init+0x228>
 8003bfa:	2306      	movs	r3, #6
 8003bfc:	e00a      	b.n	8003c14 <HAL_GPIO_Init+0x228>
 8003bfe:	2305      	movs	r3, #5
 8003c00:	e008      	b.n	8003c14 <HAL_GPIO_Init+0x228>
 8003c02:	2304      	movs	r3, #4
 8003c04:	e006      	b.n	8003c14 <HAL_GPIO_Init+0x228>
 8003c06:	2303      	movs	r3, #3
 8003c08:	e004      	b.n	8003c14 <HAL_GPIO_Init+0x228>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e002      	b.n	8003c14 <HAL_GPIO_Init+0x228>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <HAL_GPIO_Init+0x228>
 8003c12:	2300      	movs	r3, #0
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	f002 0203 	and.w	r2, r2, #3
 8003c1a:	0092      	lsls	r2, r2, #2
 8003c1c:	4093      	lsls	r3, r2
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c24:	4934      	ldr	r1, [pc, #208]	; (8003cf8 <HAL_GPIO_Init+0x30c>)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	089b      	lsrs	r3, r3, #2
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c32:	4b3a      	ldr	r3, [pc, #232]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c56:	4a31      	ldr	r2, [pc, #196]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c5c:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c80:	4a26      	ldr	r2, [pc, #152]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c86:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b0f      	cmp	r3, #15
 8003ce4:	f67f ae90 	bls.w	8003a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3724      	adds	r7, #36	; 0x24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40013800 	.word	0x40013800
 8003cfc:	40020000 	.word	0x40020000
 8003d00:	40020400 	.word	0x40020400
 8003d04:	40020800 	.word	0x40020800
 8003d08:	40020c00 	.word	0x40020c00
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40021400 	.word	0x40021400
 8003d14:	40021800 	.word	0x40021800
 8003d18:	40021c00 	.word	0x40021c00
 8003d1c:	40013c00 	.word	0x40013c00

08003d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d30:	787b      	ldrb	r3, [r7, #1]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d3c:	e003      	b.n	8003d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d3e:	887b      	ldrh	r3, [r7, #2]
 8003d40:	041a      	lsls	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	619a      	str	r2, [r3, #24]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d006      	beq.n	8003d78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d6a:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd fd6c 	bl	8001850 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e11f      	b.n	8003fd6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fe fa40 	bl	8002230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003de8:	f001 fcb2 	bl	8005750 <HAL_RCC_GetPCLK1Freq>
 8003dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4a7b      	ldr	r2, [pc, #492]	; (8003fe0 <HAL_I2C_Init+0x25c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d807      	bhi.n	8003e08 <HAL_I2C_Init+0x84>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4a7a      	ldr	r2, [pc, #488]	; (8003fe4 <HAL_I2C_Init+0x260>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	bf94      	ite	ls
 8003e00:	2301      	movls	r3, #1
 8003e02:	2300      	movhi	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e006      	b.n	8003e16 <HAL_I2C_Init+0x92>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a77      	ldr	r2, [pc, #476]	; (8003fe8 <HAL_I2C_Init+0x264>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bf94      	ite	ls
 8003e10:	2301      	movls	r3, #1
 8003e12:	2300      	movhi	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0db      	b.n	8003fd6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a72      	ldr	r2, [pc, #456]	; (8003fec <HAL_I2C_Init+0x268>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0c9b      	lsrs	r3, r3, #18
 8003e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a64      	ldr	r2, [pc, #400]	; (8003fe0 <HAL_I2C_Init+0x25c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d802      	bhi.n	8003e58 <HAL_I2C_Init+0xd4>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3301      	adds	r3, #1
 8003e56:	e009      	b.n	8003e6c <HAL_I2C_Init+0xe8>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	4a63      	ldr	r2, [pc, #396]	; (8003ff0 <HAL_I2C_Init+0x26c>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4956      	ldr	r1, [pc, #344]	; (8003fe0 <HAL_I2C_Init+0x25c>)
 8003e88:	428b      	cmp	r3, r1
 8003e8a:	d80d      	bhi.n	8003ea8 <HAL_I2C_Init+0x124>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e59      	subs	r1, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	bf38      	it	cc
 8003ea4:	2304      	movcc	r3, #4
 8003ea6:	e04f      	b.n	8003f48 <HAL_I2C_Init+0x1c4>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d111      	bne.n	8003ed4 <HAL_I2C_Init+0x150>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e58      	subs	r0, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	440b      	add	r3, r1
 8003ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e012      	b.n	8003efa <HAL_I2C_Init+0x176>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1e58      	subs	r0, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	0099      	lsls	r1, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eea:	3301      	adds	r3, #1
 8003eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Init+0x17e>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e022      	b.n	8003f48 <HAL_I2C_Init+0x1c4>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10e      	bne.n	8003f28 <HAL_I2C_Init+0x1a4>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1e58      	subs	r0, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	460b      	mov	r3, r1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	440b      	add	r3, r1
 8003f18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f26:	e00f      	b.n	8003f48 <HAL_I2C_Init+0x1c4>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1e58      	subs	r0, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6859      	ldr	r1, [r3, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	0099      	lsls	r1, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	6809      	ldr	r1, [r1, #0]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6911      	ldr	r1, [r2, #16]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68d2      	ldr	r2, [r2, #12]
 8003f82:	4311      	orrs	r1, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	000186a0 	.word	0x000186a0
 8003fe4:	001e847f 	.word	0x001e847f
 8003fe8:	003d08ff 	.word	0x003d08ff
 8003fec:	431bde83 	.word	0x431bde83
 8003ff0:	10624dd3 	.word	0x10624dd3

08003ff4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08c      	sub	sp, #48	; 0x30
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	461a      	mov	r2, r3
 8004000:	460b      	mov	r3, r1
 8004002:	817b      	strh	r3, [r7, #10]
 8004004:	4613      	mov	r3, r2
 8004006:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004008:	f7ff f820 	bl	800304c <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b20      	cmp	r3, #32
 8004018:	f040 820b 	bne.w	8004432 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	2319      	movs	r3, #25
 8004022:	2201      	movs	r2, #1
 8004024:	497c      	ldr	r1, [pc, #496]	; (8004218 <HAL_I2C_Master_Receive+0x224>)
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fde2 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004032:	2302      	movs	r3, #2
 8004034:	e1fe      	b.n	8004434 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_I2C_Master_Receive+0x50>
 8004040:	2302      	movs	r3, #2
 8004042:	e1f7      	b.n	8004434 <HAL_I2C_Master_Receive+0x440>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b01      	cmp	r3, #1
 8004058:	d007      	beq.n	800406a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004078:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2222      	movs	r2, #34	; 0x22
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2210      	movs	r2, #16
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	893a      	ldrh	r2, [r7, #8]
 800409a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a5c      	ldr	r2, [pc, #368]	; (800421c <HAL_I2C_Master_Receive+0x228>)
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040ac:	8979      	ldrh	r1, [r7, #10]
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fbea 	bl	800488c <I2C_MasterRequestRead>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e1b8      	b.n	8004434 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d113      	bne.n	80040f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	623b      	str	r3, [r7, #32]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	623b      	str	r3, [r7, #32]
 80040de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	e18c      	b.n	800440c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d11b      	bne.n	8004132 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e16c      	b.n	800440c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004136:	2b02      	cmp	r3, #2
 8004138:	d11b      	bne.n	8004172 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004148:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	e14c      	b.n	800440c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004198:	e138      	b.n	800440c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	2b03      	cmp	r3, #3
 80041a0:	f200 80f1 	bhi.w	8004386 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d123      	bne.n	80041f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fe34 	bl	8004e1e <I2C_WaitOnRXNEFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e139      	b.n	8004434 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041f2:	e10b      	b.n	800440c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d14e      	bne.n	800429a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	2200      	movs	r2, #0
 8004204:	4906      	ldr	r1, [pc, #24]	; (8004220 <HAL_I2C_Master_Receive+0x22c>)
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fcf2 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e10e      	b.n	8004434 <HAL_I2C_Master_Receive+0x440>
 8004216:	bf00      	nop
 8004218:	00100002 	.word	0x00100002
 800421c:	ffff0000 	.word	0xffff0000
 8004220:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004298:	e0b8      	b.n	800440c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	2200      	movs	r2, #0
 80042a2:	4966      	ldr	r1, [pc, #408]	; (800443c <HAL_I2C_Master_Receive+0x448>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fca3 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0bf      	b.n	8004434 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	2200      	movs	r2, #0
 80042fe:	494f      	ldr	r1, [pc, #316]	; (800443c <HAL_I2C_Master_Receive+0x448>)
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fc75 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e091      	b.n	8004434 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004384:	e042      	b.n	800440c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fd47 	bl	8004e1e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e04c      	b.n	8004434 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d118      	bne.n	800440c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	f47f aec2 	bne.w	800419a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	e000      	b.n	8004434 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004432:	2302      	movs	r3, #2
  }
}
 8004434:	4618      	mov	r0, r3
 8004436:	3728      	adds	r7, #40	; 0x28
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	00010004 	.word	0x00010004

08004440 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08c      	sub	sp, #48	; 0x30
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	461a      	mov	r2, r3
 800444e:	4603      	mov	r3, r0
 8004450:	817b      	strh	r3, [r7, #10]
 8004452:	460b      	mov	r3, r1
 8004454:	813b      	strh	r3, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800445a:	f7fe fdf7 	bl	800304c <HAL_GetTick>
 800445e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b20      	cmp	r3, #32
 800446a:	f040 8208 	bne.w	800487e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	2319      	movs	r3, #25
 8004474:	2201      	movs	r2, #1
 8004476:	497b      	ldr	r1, [pc, #492]	; (8004664 <HAL_I2C_Mem_Read+0x224>)
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fbb9 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
 8004486:	e1fb      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_I2C_Mem_Read+0x56>
 8004492:	2302      	movs	r3, #2
 8004494:	e1f4      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d007      	beq.n	80044bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2222      	movs	r2, #34	; 0x22
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a5b      	ldr	r2, [pc, #364]	; (8004668 <HAL_I2C_Mem_Read+0x228>)
 80044fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044fe:	88f8      	ldrh	r0, [r7, #6]
 8004500:	893a      	ldrh	r2, [r7, #8]
 8004502:	8979      	ldrh	r1, [r7, #10]
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4603      	mov	r3, r0
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fa88 	bl	8004a24 <I2C_RequestMemoryRead>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1b0      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d113      	bne.n	800454e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	623b      	str	r3, [r7, #32]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e184      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004552:	2b01      	cmp	r3, #1
 8004554:	d11b      	bne.n	800458e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e164      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	2b02      	cmp	r3, #2
 8004594:	d11b      	bne.n	80045ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	e144      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045e4:	e138      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	f200 80f1 	bhi.w	80047d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d123      	bne.n	8004640 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fc0e 	bl	8004e1e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e139      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800463e:	e10b      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	2b02      	cmp	r3, #2
 8004646:	d14e      	bne.n	80046e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	2200      	movs	r2, #0
 8004650:	4906      	ldr	r1, [pc, #24]	; (800466c <HAL_I2C_Mem_Read+0x22c>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 facc 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e10e      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
 8004662:	bf00      	nop
 8004664:	00100002 	.word	0x00100002
 8004668:	ffff0000 	.word	0xffff0000
 800466c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e4:	e0b8      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	2200      	movs	r2, #0
 80046ee:	4966      	ldr	r1, [pc, #408]	; (8004888 <HAL_I2C_Mem_Read+0x448>)
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fa7d 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0bf      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	2200      	movs	r2, #0
 800474a:	494f      	ldr	r1, [pc, #316]	; (8004888 <HAL_I2C_Mem_Read+0x448>)
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fa4f 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e091      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047d0:	e042      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fb21 	bl	8004e1e <I2C_WaitOnRXNEFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e04c      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d118      	bne.n	8004858 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	f47f aec2 	bne.w	80045e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e000      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800487e:	2302      	movs	r3, #2
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3728      	adds	r7, #40	; 0x28
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	00010004 	.word	0x00010004

0800488c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	460b      	mov	r3, r1
 800489a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d006      	beq.n	80048c6 <I2C_MasterRequestRead+0x3a>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d003      	beq.n	80048c6 <I2C_MasterRequestRead+0x3a>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048c4:	d108      	bne.n	80048d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e00b      	b.n	80048f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	2b11      	cmp	r3, #17
 80048de:	d107      	bne.n	80048f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f977 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00c      	beq.n	8004922 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e078      	b.n	8004a14 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800492a:	d108      	bne.n	800493e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800492c:	897b      	ldrh	r3, [r7, #10]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]
 800493c:	e05e      	b.n	80049fc <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800493e:	897b      	ldrh	r3, [r7, #10]
 8004940:	11db      	asrs	r3, r3, #7
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 0306 	and.w	r3, r3, #6
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f063 030f 	orn	r3, r3, #15
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	4930      	ldr	r1, [pc, #192]	; (8004a1c <I2C_MasterRequestRead+0x190>)
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f99e 	bl	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e053      	b.n	8004a14 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800496c:	897b      	ldrh	r3, [r7, #10]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4929      	ldr	r1, [pc, #164]	; (8004a20 <I2C_MasterRequestRead+0x194>)
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f98e 	bl	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e043      	b.n	8004a14 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b0:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f916 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00c      	beq.n	80049e4 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e017      	b.n	8004a14 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049e4:	897b      	ldrh	r3, [r7, #10]
 80049e6:	11db      	asrs	r3, r3, #7
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f003 0306 	and.w	r3, r3, #6
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	f063 030e 	orn	r3, r3, #14
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4907      	ldr	r1, [pc, #28]	; (8004a20 <I2C_MasterRequestRead+0x194>)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f94b 	bl	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	00010008 	.word	0x00010008
 8004a20:	00010002 	.word	0x00010002

08004a24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	461a      	mov	r2, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	817b      	strh	r3, [r7, #10]
 8004a36:	460b      	mov	r3, r1
 8004a38:	813b      	strh	r3, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f8c0 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00c      	beq.n	8004a90 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e0a9      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a90:	897b      	ldrh	r3, [r7, #10]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	6a3a      	ldr	r2, [r7, #32]
 8004aa4:	4951      	ldr	r1, [pc, #324]	; (8004bec <I2C_RequestMemoryRead+0x1c8>)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f8f9 	bl	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e096      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ace:	6a39      	ldr	r1, [r7, #32]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f963 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d107      	bne.n	8004af4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e075      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004afe:	893b      	ldrh	r3, [r7, #8]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	611a      	str	r2, [r3, #16]
 8004b08:	e021      	b.n	8004b4e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b0a:	893b      	ldrh	r3, [r7, #8]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1a:	6a39      	ldr	r1, [r7, #32]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f93d 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d107      	bne.n	8004b40 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e04f      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b44:	893b      	ldrh	r3, [r7, #8]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b50:	6a39      	ldr	r1, [r7, #32]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f922 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00d      	beq.n	8004b7a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d107      	bne.n	8004b76 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e034      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f82a 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e013      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bbc:	897b      	ldrh	r3, [r7, #10]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	4906      	ldr	r1, [pc, #24]	; (8004bec <I2C_RequestMemoryRead+0x1c8>)
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f863 	bl	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	00010002 	.word	0x00010002

08004bf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c00:	e025      	b.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c08:	d021      	beq.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0a:	f7fe fa1f 	bl	800304c <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d116      	bne.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f043 0220 	orr.w	r2, r3, #32
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e023      	b.n	8004c96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d10d      	bne.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4013      	ands	r3, r2
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bf0c      	ite	eq
 8004c6a:	2301      	moveq	r3, #1
 8004c6c:	2300      	movne	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	e00c      	b.n	8004c8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	43da      	mvns	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d0b6      	beq.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cac:	e051      	b.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbc:	d123      	bne.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ccc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f043 0204 	orr.w	r2, r3, #4
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e046      	b.n	8004d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0c:	d021      	beq.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0e:	f7fe f99d 	bl	800304c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d116      	bne.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f043 0220 	orr.w	r2, r3, #32
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e020      	b.n	8004d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d10c      	bne.n	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	43da      	mvns	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4013      	ands	r3, r2
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bf14      	ite	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	2300      	moveq	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	e00b      	b.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	43da      	mvns	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4013      	ands	r3, r2
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d18d      	bne.n	8004cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da8:	e02d      	b.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f88d 	bl	8004eca <I2C_IsAcknowledgeFailed>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e02d      	b.n	8004e16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dc0:	d021      	beq.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fe f943 	bl	800304c <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d116      	bne.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f043 0220 	orr.w	r2, r3, #32
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e007      	b.n	8004e16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e10:	2b80      	cmp	r3, #128	; 0x80
 8004e12:	d1ca      	bne.n	8004daa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e2a:	e042      	b.n	8004eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d119      	bne.n	8004e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f06f 0210 	mvn.w	r2, #16
 8004e42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e029      	b.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fe f8ed 	bl	800304c <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d116      	bne.n	8004eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e007      	b.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d1b5      	bne.n	8004e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee0:	d11b      	bne.n	8004f1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f043 0204 	orr.w	r2, r3, #4
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e25b      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d075      	beq.n	8005032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f46:	4ba3      	ldr	r3, [pc, #652]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d00c      	beq.n	8004f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f52:	4ba0      	ldr	r3, [pc, #640]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d112      	bne.n	8004f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4b9d      	ldr	r3, [pc, #628]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f6a:	d10b      	bne.n	8004f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	4b99      	ldr	r3, [pc, #612]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d05b      	beq.n	8005030 <HAL_RCC_OscConfig+0x108>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d157      	bne.n	8005030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e236      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8c:	d106      	bne.n	8004f9c <HAL_RCC_OscConfig+0x74>
 8004f8e:	4b91      	ldr	r3, [pc, #580]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a90      	ldr	r2, [pc, #576]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	e01d      	b.n	8004fd8 <HAL_RCC_OscConfig+0xb0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x98>
 8004fa6:	4b8b      	ldr	r3, [pc, #556]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a8a      	ldr	r2, [pc, #552]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	4b88      	ldr	r3, [pc, #544]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a87      	ldr	r2, [pc, #540]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e00b      	b.n	8004fd8 <HAL_RCC_OscConfig+0xb0>
 8004fc0:	4b84      	ldr	r3, [pc, #528]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a83      	ldr	r2, [pc, #524]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	4b81      	ldr	r3, [pc, #516]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a80      	ldr	r2, [pc, #512]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d013      	beq.n	8005008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7fe f834 	bl	800304c <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe8:	f7fe f830 	bl	800304c <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b64      	cmp	r3, #100	; 0x64
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e1fb      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	4b76      	ldr	r3, [pc, #472]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0xc0>
 8005006:	e014      	b.n	8005032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7fe f820 	bl	800304c <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005010:	f7fe f81c 	bl	800304c <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	; 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e1e7      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005022:	4b6c      	ldr	r3, [pc, #432]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0xe8>
 800502e:	e000      	b.n	8005032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d063      	beq.n	8005106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800503e:	4b65      	ldr	r3, [pc, #404]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504a:	4b62      	ldr	r3, [pc, #392]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005052:	2b08      	cmp	r3, #8
 8005054:	d11c      	bne.n	8005090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005056:	4b5f      	ldr	r3, [pc, #380]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d116      	bne.n	8005090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005062:	4b5c      	ldr	r3, [pc, #368]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_RCC_OscConfig+0x152>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d001      	beq.n	800507a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e1bb      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507a:	4b56      	ldr	r3, [pc, #344]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4952      	ldr	r1, [pc, #328]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 800508a:	4313      	orrs	r3, r2
 800508c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508e:	e03a      	b.n	8005106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d020      	beq.n	80050da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005098:	4b4f      	ldr	r3, [pc, #316]	; (80051d8 <HAL_RCC_OscConfig+0x2b0>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fd ffd5 	bl	800304c <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a6:	f7fd ffd1 	bl	800304c <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e19c      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b8:	4b46      	ldr	r3, [pc, #280]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c4:	4b43      	ldr	r3, [pc, #268]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4940      	ldr	r1, [pc, #256]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]
 80050d8:	e015      	b.n	8005106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050da:	4b3f      	ldr	r3, [pc, #252]	; (80051d8 <HAL_RCC_OscConfig+0x2b0>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fd ffb4 	bl	800304c <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050e8:	f7fd ffb0 	bl	800304c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e17b      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fa:	4b36      	ldr	r3, [pc, #216]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d030      	beq.n	8005174 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511a:	4b30      	ldr	r3, [pc, #192]	; (80051dc <HAL_RCC_OscConfig+0x2b4>)
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fd ff94 	bl	800304c <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005128:	f7fd ff90 	bl	800304c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e15b      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513a:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 800513c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x200>
 8005146:	e015      	b.n	8005174 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005148:	4b24      	ldr	r3, [pc, #144]	; (80051dc <HAL_RCC_OscConfig+0x2b4>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514e:	f7fd ff7d 	bl	800304c <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005156:	f7fd ff79 	bl	800304c <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e144      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005168:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 800516a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80a0 	beq.w	80052c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005186:	4b13      	ldr	r3, [pc, #76]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10f      	bne.n	80051b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005192:	2300      	movs	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	4a0e      	ldr	r2, [pc, #56]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 800519c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a0:	6413      	str	r3, [r2, #64]	; 0x40
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051aa:	60bb      	str	r3, [r7, #8]
 80051ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b2:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <HAL_RCC_OscConfig+0x2b8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d121      	bne.n	8005202 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <HAL_RCC_OscConfig+0x2b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a07      	ldr	r2, [pc, #28]	; (80051e0 <HAL_RCC_OscConfig+0x2b8>)
 80051c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ca:	f7fd ff3f 	bl	800304c <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d0:	e011      	b.n	80051f6 <HAL_RCC_OscConfig+0x2ce>
 80051d2:	bf00      	nop
 80051d4:	40023800 	.word	0x40023800
 80051d8:	42470000 	.word	0x42470000
 80051dc:	42470e80 	.word	0x42470e80
 80051e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e4:	f7fd ff32 	bl	800304c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e0fd      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f6:	4b81      	ldr	r3, [pc, #516]	; (80053fc <HAL_RCC_OscConfig+0x4d4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d106      	bne.n	8005218 <HAL_RCC_OscConfig+0x2f0>
 800520a:	4b7d      	ldr	r3, [pc, #500]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	4a7c      	ldr	r2, [pc, #496]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	6713      	str	r3, [r2, #112]	; 0x70
 8005216:	e01c      	b.n	8005252 <HAL_RCC_OscConfig+0x32a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b05      	cmp	r3, #5
 800521e:	d10c      	bne.n	800523a <HAL_RCC_OscConfig+0x312>
 8005220:	4b77      	ldr	r3, [pc, #476]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	4a76      	ldr	r2, [pc, #472]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	6713      	str	r3, [r2, #112]	; 0x70
 800522c:	4b74      	ldr	r3, [pc, #464]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a73      	ldr	r2, [pc, #460]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
 8005238:	e00b      	b.n	8005252 <HAL_RCC_OscConfig+0x32a>
 800523a:	4b71      	ldr	r3, [pc, #452]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	4a70      	ldr	r2, [pc, #448]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	6713      	str	r3, [r2, #112]	; 0x70
 8005246:	4b6e      	ldr	r3, [pc, #440]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a6d      	ldr	r2, [pc, #436]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d015      	beq.n	8005286 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525a:	f7fd fef7 	bl	800304c <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005260:	e00a      	b.n	8005278 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005262:	f7fd fef3 	bl	800304c <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e0bc      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005278:	4b61      	ldr	r3, [pc, #388]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0ee      	beq.n	8005262 <HAL_RCC_OscConfig+0x33a>
 8005284:	e014      	b.n	80052b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005286:	f7fd fee1 	bl	800304c <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800528c:	e00a      	b.n	80052a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800528e:	f7fd fedd 	bl	800304c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	f241 3288 	movw	r2, #5000	; 0x1388
 800529c:	4293      	cmp	r3, r2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e0a6      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a4:	4b56      	ldr	r3, [pc, #344]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ee      	bne.n	800528e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d105      	bne.n	80052c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b6:	4b52      	ldr	r3, [pc, #328]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	4a51      	ldr	r2, [pc, #324]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 80052bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 8092 	beq.w	80053f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052cc:	4b4c      	ldr	r3, [pc, #304]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 030c 	and.w	r3, r3, #12
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d05c      	beq.n	8005392 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d141      	bne.n	8005364 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e0:	4b48      	ldr	r3, [pc, #288]	; (8005404 <HAL_RCC_OscConfig+0x4dc>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e6:	f7fd feb1 	bl	800304c <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ee:	f7fd fead 	bl	800304c <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e078      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005300:	4b3f      	ldr	r3, [pc, #252]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f0      	bne.n	80052ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	019b      	lsls	r3, r3, #6
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	3b01      	subs	r3, #1
 8005326:	041b      	lsls	r3, r3, #16
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	061b      	lsls	r3, r3, #24
 8005330:	4933      	ldr	r1, [pc, #204]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 8005332:	4313      	orrs	r3, r2
 8005334:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005336:	4b33      	ldr	r3, [pc, #204]	; (8005404 <HAL_RCC_OscConfig+0x4dc>)
 8005338:	2201      	movs	r2, #1
 800533a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fd fe86 	bl	800304c <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005344:	f7fd fe82 	bl	800304c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e04d      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005356:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x41c>
 8005362:	e045      	b.n	80053f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005364:	4b27      	ldr	r3, [pc, #156]	; (8005404 <HAL_RCC_OscConfig+0x4dc>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536a:	f7fd fe6f 	bl	800304c <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005372:	f7fd fe6b 	bl	800304c <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e036      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005384:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f0      	bne.n	8005372 <HAL_RCC_OscConfig+0x44a>
 8005390:	e02e      	b.n	80053f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e029      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800539e:	4b18      	ldr	r3, [pc, #96]	; (8005400 <HAL_RCC_OscConfig+0x4d8>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d11c      	bne.n	80053ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d115      	bne.n	80053ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053c6:	4013      	ands	r3, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10d      	bne.n	80053ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d106      	bne.n	80053ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40007000 	.word	0x40007000
 8005400:	40023800 	.word	0x40023800
 8005404:	42470060 	.word	0x42470060

08005408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0cc      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800541c:	4b68      	ldr	r3, [pc, #416]	; (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d90c      	bls.n	8005444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b65      	ldr	r3, [pc, #404]	; (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005432:	4b63      	ldr	r3, [pc, #396]	; (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d001      	beq.n	8005444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0b8      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d020      	beq.n	8005492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800545c:	4b59      	ldr	r3, [pc, #356]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4a58      	ldr	r2, [pc, #352]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005474:	4b53      	ldr	r3, [pc, #332]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4a52      	ldr	r2, [pc, #328]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800547e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005480:	4b50      	ldr	r3, [pc, #320]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	494d      	ldr	r1, [pc, #308]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d044      	beq.n	8005528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d107      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a6:	4b47      	ldr	r3, [pc, #284]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d119      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e07f      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d003      	beq.n	80054c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d107      	bne.n	80054d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c6:	4b3f      	ldr	r3, [pc, #252]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e06f      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d6:	4b3b      	ldr	r3, [pc, #236]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e067      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054e6:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f023 0203 	bic.w	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4934      	ldr	r1, [pc, #208]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f8:	f7fd fda8 	bl	800304c <HAL_GetTick>
 80054fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005500:	f7fd fda4 	bl	800304c <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	; 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e04f      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005516:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 020c 	and.w	r2, r3, #12
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	429a      	cmp	r2, r3
 8005526:	d1eb      	bne.n	8005500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005528:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d20c      	bcs.n	8005550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005536:	4b22      	ldr	r3, [pc, #136]	; (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553e:	4b20      	ldr	r3, [pc, #128]	; (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e032      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800555c:	4b19      	ldr	r3, [pc, #100]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4916      	ldr	r1, [pc, #88]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800557a:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	490e      	ldr	r1, [pc, #56]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800558e:	f000 f821 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 8005592:	4601      	mov	r1, r0
 8005594:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <HAL_RCC_ClockConfig+0x1c0>)
 80055a0:	5cd3      	ldrb	r3, [r2, r3]
 80055a2:	fa21 f303 	lsr.w	r3, r1, r3
 80055a6:	4a09      	ldr	r2, [pc, #36]	; (80055cc <HAL_RCC_ClockConfig+0x1c4>)
 80055a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055aa:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <HAL_RCC_ClockConfig+0x1c8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fd fd08 	bl	8002fc4 <HAL_InitTick>

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40023c00 	.word	0x40023c00
 80055c4:	40023800 	.word	0x40023800
 80055c8:	08008d04 	.word	0x08008d04
 80055cc:	20000014 	.word	0x20000014
 80055d0:	20000018 	.word	0x20000018

080055d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	2300      	movs	r3, #0
 80055e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ea:	4b50      	ldr	r3, [pc, #320]	; (800572c <HAL_RCC_GetSysClockFreq+0x158>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d007      	beq.n	8005606 <HAL_RCC_GetSysClockFreq+0x32>
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d008      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0x38>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f040 808d 	bne.w	800571a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005600:	4b4b      	ldr	r3, [pc, #300]	; (8005730 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005602:	60bb      	str	r3, [r7, #8]
       break;
 8005604:	e08c      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005606:	4b4b      	ldr	r3, [pc, #300]	; (8005734 <HAL_RCC_GetSysClockFreq+0x160>)
 8005608:	60bb      	str	r3, [r7, #8]
      break;
 800560a:	e089      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800560c:	4b47      	ldr	r3, [pc, #284]	; (800572c <HAL_RCC_GetSysClockFreq+0x158>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005614:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005616:	4b45      	ldr	r3, [pc, #276]	; (800572c <HAL_RCC_GetSysClockFreq+0x158>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d023      	beq.n	800566a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005622:	4b42      	ldr	r3, [pc, #264]	; (800572c <HAL_RCC_GetSysClockFreq+0x158>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	099b      	lsrs	r3, r3, #6
 8005628:	f04f 0400 	mov.w	r4, #0
 800562c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	ea03 0501 	and.w	r5, r3, r1
 8005638:	ea04 0602 	and.w	r6, r4, r2
 800563c:	4a3d      	ldr	r2, [pc, #244]	; (8005734 <HAL_RCC_GetSysClockFreq+0x160>)
 800563e:	fb02 f106 	mul.w	r1, r2, r6
 8005642:	2200      	movs	r2, #0
 8005644:	fb02 f205 	mul.w	r2, r2, r5
 8005648:	440a      	add	r2, r1
 800564a:	493a      	ldr	r1, [pc, #232]	; (8005734 <HAL_RCC_GetSysClockFreq+0x160>)
 800564c:	fba5 0101 	umull	r0, r1, r5, r1
 8005650:	1853      	adds	r3, r2, r1
 8005652:	4619      	mov	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f04f 0400 	mov.w	r4, #0
 800565a:	461a      	mov	r2, r3
 800565c:	4623      	mov	r3, r4
 800565e:	f7fb fa6f 	bl	8000b40 <__aeabi_uldivmod>
 8005662:	4603      	mov	r3, r0
 8005664:	460c      	mov	r4, r1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	e049      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800566a:	4b30      	ldr	r3, [pc, #192]	; (800572c <HAL_RCC_GetSysClockFreq+0x158>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	099b      	lsrs	r3, r3, #6
 8005670:	f04f 0400 	mov.w	r4, #0
 8005674:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	ea03 0501 	and.w	r5, r3, r1
 8005680:	ea04 0602 	and.w	r6, r4, r2
 8005684:	4629      	mov	r1, r5
 8005686:	4632      	mov	r2, r6
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	f04f 0400 	mov.w	r4, #0
 8005690:	0154      	lsls	r4, r2, #5
 8005692:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005696:	014b      	lsls	r3, r1, #5
 8005698:	4619      	mov	r1, r3
 800569a:	4622      	mov	r2, r4
 800569c:	1b49      	subs	r1, r1, r5
 800569e:	eb62 0206 	sbc.w	r2, r2, r6
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	f04f 0400 	mov.w	r4, #0
 80056aa:	0194      	lsls	r4, r2, #6
 80056ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056b0:	018b      	lsls	r3, r1, #6
 80056b2:	1a5b      	subs	r3, r3, r1
 80056b4:	eb64 0402 	sbc.w	r4, r4, r2
 80056b8:	f04f 0100 	mov.w	r1, #0
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	00e2      	lsls	r2, r4, #3
 80056c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056c6:	00d9      	lsls	r1, r3, #3
 80056c8:	460b      	mov	r3, r1
 80056ca:	4614      	mov	r4, r2
 80056cc:	195b      	adds	r3, r3, r5
 80056ce:	eb44 0406 	adc.w	r4, r4, r6
 80056d2:	f04f 0100 	mov.w	r1, #0
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	02a2      	lsls	r2, r4, #10
 80056dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80056e0:	0299      	lsls	r1, r3, #10
 80056e2:	460b      	mov	r3, r1
 80056e4:	4614      	mov	r4, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	4621      	mov	r1, r4
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f04f 0400 	mov.w	r4, #0
 80056f0:	461a      	mov	r2, r3
 80056f2:	4623      	mov	r3, r4
 80056f4:	f7fb fa24 	bl	8000b40 <__aeabi_uldivmod>
 80056f8:	4603      	mov	r3, r0
 80056fa:	460c      	mov	r4, r1
 80056fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <HAL_RCC_GetSysClockFreq+0x158>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	3301      	adds	r3, #1
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	fbb2 f3f3 	udiv	r3, r2, r3
 8005716:	60bb      	str	r3, [r7, #8]
      break;
 8005718:	e002      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <HAL_RCC_GetSysClockFreq+0x15c>)
 800571c:	60bb      	str	r3, [r7, #8]
      break;
 800571e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005720:	68bb      	ldr	r3, [r7, #8]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800572a:	bf00      	nop
 800572c:	40023800 	.word	0x40023800
 8005730:	00f42400 	.word	0x00f42400
 8005734:	00b71b00 	.word	0x00b71b00

08005738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800573c:	4b03      	ldr	r3, [pc, #12]	; (800574c <HAL_RCC_GetHCLKFreq+0x14>)
 800573e:	681b      	ldr	r3, [r3, #0]
}
 8005740:	4618      	mov	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000014 	.word	0x20000014

08005750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005754:	f7ff fff0 	bl	8005738 <HAL_RCC_GetHCLKFreq>
 8005758:	4601      	mov	r1, r0
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	0a9b      	lsrs	r3, r3, #10
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	4a03      	ldr	r2, [pc, #12]	; (8005774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005766:	5cd3      	ldrb	r3, [r2, r3]
 8005768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800576c:	4618      	mov	r0, r3
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40023800 	.word	0x40023800
 8005774:	08008d14 	.word	0x08008d14

08005778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800577c:	f7ff ffdc 	bl	8005738 <HAL_RCC_GetHCLKFreq>
 8005780:	4601      	mov	r1, r0
 8005782:	4b05      	ldr	r3, [pc, #20]	; (8005798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	0b5b      	lsrs	r3, r3, #13
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	4a03      	ldr	r2, [pc, #12]	; (800579c <HAL_RCC_GetPCLK2Freq+0x24>)
 800578e:	5cd3      	ldrb	r3, [r2, r3]
 8005790:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005794:	4618      	mov	r0, r3
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40023800 	.word	0x40023800
 800579c:	08008d14 	.word	0x08008d14

080057a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e056      	b.n	8005860 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fd f833 	bl	8002838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	ea42 0103 	orr.w	r1, r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	0c1b      	lsrs	r3, r3, #16
 8005830:	f003 0104 	and.w	r1, r3, #4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69da      	ldr	r2, [r3, #28]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800584e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_SPI_Transmit_DMA+0x20>
 8005884:	2302      	movs	r3, #2
 8005886:	e093      	b.n	80059b0 <HAL_SPI_Transmit_DMA+0x148>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d002      	beq.n	80058a2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800589c:	2302      	movs	r3, #2
 800589e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058a0:	e081      	b.n	80059a6 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_SPI_Transmit_DMA+0x46>
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d102      	bne.n	80058b4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058b2:	e078      	b.n	80059a6 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2203      	movs	r2, #3
 80058b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	88fa      	ldrh	r2, [r7, #6]
 80058d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fa:	d107      	bne.n	800590c <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800590a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005910:	4a29      	ldr	r2, [pc, #164]	; (80059b8 <HAL_SPI_Transmit_DMA+0x150>)
 8005912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005918:	4a28      	ldr	r2, [pc, #160]	; (80059bc <HAL_SPI_Transmit_DMA+0x154>)
 800591a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005920:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <HAL_SPI_Transmit_DMA+0x158>)
 8005922:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005928:	2200      	movs	r2, #0
 800592a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	4619      	mov	r1, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005942:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005944:	f7fd fd70 	bl	8003428 <HAL_DMA_Start_IT>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	f043 0210 	orr.w	r2, r3, #16
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005966:	e01e      	b.n	80059a6 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d007      	beq.n	8005986 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005984:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0220 	orr.w	r2, r2, #32
 8005994:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0202 	orr.w	r2, r2, #2
 80059a4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	08005c95 	.word	0x08005c95
 80059bc:	08005bed 	.word	0x08005bed
 80059c0:	08005cb1 	.word	0x08005cb1

080059c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	099b      	lsrs	r3, r3, #6
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10f      	bne.n	8005a08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	099b      	lsrs	r3, r3, #6
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
    return;
 8005a06:	e0d8      	b.n	8005bba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <HAL_SPI_IRQHandler+0x66>
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	09db      	lsrs	r3, r3, #7
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4798      	blx	r3
    return;
 8005a28:	e0c7      	b.n	8005bba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10c      	bne.n	8005a50 <HAL_SPI_IRQHandler+0x8c>
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	099b      	lsrs	r3, r3, #6
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80b5 	beq.w	8005bba <HAL_SPI_IRQHandler+0x1f6>
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80ae 	beq.w	8005bba <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	099b      	lsrs	r3, r3, #6
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d023      	beq.n	8005ab2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d011      	beq.n	8005a9a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	f043 0204 	orr.w	r2, r3, #4
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	e00b      	b.n	8005ab2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	693b      	ldr	r3, [r7, #16]
        return;
 8005ab0:	e083      	b.n	8005bba <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d014      	beq.n	8005ae8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	f043 0201 	orr.w	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00c      	beq.n	8005b0e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af8:	f043 0208 	orr.w	r2, r3, #8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b00:	2300      	movs	r3, #0
 8005b02:	60bb      	str	r3, [r7, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d050      	beq.n	8005bb8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b24:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d104      	bne.n	8005b42 <HAL_SPI_IRQHandler+0x17e>
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d034      	beq.n	8005bac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0203 	bic.w	r2, r2, #3
 8005b50:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d011      	beq.n	8005b7e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5e:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <HAL_SPI_IRQHandler+0x1fc>)
 8005b60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fd fcb6 	bl	80034d8 <HAL_DMA_Abort_IT>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d016      	beq.n	8005bb4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8a:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <HAL_SPI_IRQHandler+0x1fc>)
 8005b8c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fd fca0 	bl	80034d8 <HAL_DMA_Abort_IT>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005baa:	e003      	b.n	8005bb4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f813 	bl	8005bd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005bb2:	e000      	b.n	8005bb6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005bb4:	bf00      	nop
    return;
 8005bb6:	bf00      	nop
 8005bb8:	bf00      	nop
  }
}
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	08005cf1 	.word	0x08005cf1

08005bc4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bfa:	f7fd fa27 	bl	800304c <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0e:	d03b      	beq.n	8005c88 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0220 	bic.w	r2, r2, #32
 8005c1e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0202 	bic.w	r2, r2, #2
 8005c2e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	2164      	movs	r1, #100	; 0x64
 8005c34:	6978      	ldr	r0, [r7, #20]
 8005c36:	f000 f8d9 	bl	8005dec <SPI_EndRxTxTransaction>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c80:	6978      	ldr	r0, [r7, #20]
 8005c82:	f7ff ffa9 	bl	8005bd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c86:	e002      	b.n	8005c8e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005c88:	6978      	ldr	r0, [r7, #20]
 8005c8a:	f7fc fb2d 	bl	80022e8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7ff ff8e 	bl	8005bc4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0203 	bic.w	r2, r2, #3
 8005ccc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	f043 0210 	orr.w	r2, r3, #16
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff ff78 	bl	8005bd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff ff64 	bl	8005bd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4613      	mov	r3, r2
 8005d26:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d28:	e04c      	b.n	8005dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d30:	d048      	beq.n	8005dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d32:	f7fd f98b 	bl	800304c <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d902      	bls.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d13d      	bne.n	8005dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d60:	d111      	bne.n	8005d86 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6a:	d004      	beq.n	8005d76 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d74:	d107      	bne.n	8005d86 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8e:	d10f      	bne.n	8005db0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e00f      	b.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d1a3      	bne.n	8005d2a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005df8:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <SPI_EndRxTxTransaction+0x7c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1b      	ldr	r2, [pc, #108]	; (8005e6c <SPI_EndRxTxTransaction+0x80>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	0d5b      	lsrs	r3, r3, #21
 8005e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e08:	fb02 f303 	mul.w	r3, r2, r3
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e16:	d112      	bne.n	8005e3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2180      	movs	r1, #128	; 0x80
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff ff78 	bl	8005d18 <SPI_WaitFlagStateUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d016      	beq.n	8005e5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	f043 0220 	orr.w	r2, r3, #32
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e00f      	b.n	8005e5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e54:	2b80      	cmp	r3, #128	; 0x80
 8005e56:	d0f2      	beq.n	8005e3e <SPI_EndRxTxTransaction+0x52>
 8005e58:	e000      	b.n	8005e5c <SPI_EndRxTxTransaction+0x70>
        break;
 8005e5a:	bf00      	nop
  }

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000014 	.word	0x20000014
 8005e6c:	165e9f81 	.word	0x165e9f81

08005e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e01d      	b.n	8005ebe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fc ff06 	bl	8002ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f000 fb64 	bl	800657c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e01d      	b.n	8005f14 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7fc ff29 	bl	8002d44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f000 fb39 	bl	800657c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b0c      	cmp	r3, #12
 8005f2a:	d841      	bhi.n	8005fb0 <HAL_TIM_IC_Start_IT+0x94>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <HAL_TIM_IC_Start_IT+0x18>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f69 	.word	0x08005f69
 8005f38:	08005fb1 	.word	0x08005fb1
 8005f3c:	08005fb1 	.word	0x08005fb1
 8005f40:	08005fb1 	.word	0x08005fb1
 8005f44:	08005f7b 	.word	0x08005f7b
 8005f48:	08005fb1 	.word	0x08005fb1
 8005f4c:	08005fb1 	.word	0x08005fb1
 8005f50:	08005fb1 	.word	0x08005fb1
 8005f54:	08005f8d 	.word	0x08005f8d
 8005f58:	08005fb1 	.word	0x08005fb1
 8005f5c:	08005fb1 	.word	0x08005fb1
 8005f60:	08005fb1 	.word	0x08005fb1
 8005f64:	08005f9f 	.word	0x08005f9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0202 	orr.w	r2, r2, #2
 8005f76:	60da      	str	r2, [r3, #12]
      break;
 8005f78:	e01b      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0204 	orr.w	r2, r2, #4
 8005f88:	60da      	str	r2, [r3, #12]
      break;
 8005f8a:	e012      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0208 	orr.w	r2, r2, #8
 8005f9a:	60da      	str	r2, [r3, #12]
      break;
 8005f9c:	e009      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0210 	orr.w	r2, r2, #16
 8005fac:	60da      	str	r2, [r3, #12]
      break;
 8005fae:	e000      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005fb0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fd42 	bl	8006a44 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b06      	cmp	r3, #6
 8005fd0:	d007      	beq.n	8005fe2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0201 	orr.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d122      	bne.n	8006048 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b02      	cmp	r3, #2
 800600e:	d11b      	bne.n	8006048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0202 	mvn.w	r2, #2
 8006018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fc fa96 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 8006034:	e005      	b.n	8006042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa82 	bl	8006540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fa89 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b04      	cmp	r3, #4
 8006054:	d122      	bne.n	800609c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b04      	cmp	r3, #4
 8006062:	d11b      	bne.n	800609c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0204 	mvn.w	r2, #4
 800606c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2202      	movs	r2, #2
 8006072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fc fa6c 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 8006088:	e005      	b.n	8006096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa58 	bl	8006540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fa5f 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d122      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d11b      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0208 	mvn.w	r2, #8
 80060c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2204      	movs	r2, #4
 80060c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fc fa42 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 80060dc:	e005      	b.n	80060ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa2e 	bl	8006540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fa35 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	d122      	bne.n	8006144 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b10      	cmp	r3, #16
 800610a:	d11b      	bne.n	8006144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0210 	mvn.w	r2, #16
 8006114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2208      	movs	r2, #8
 800611a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fc fa18 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 8006130:	e005      	b.n	800613e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa04 	bl	8006540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa0b 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b01      	cmp	r3, #1
 8006150:	d10e      	bne.n	8006170 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b01      	cmp	r3, #1
 800615e:	d107      	bne.n	8006170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0201 	mvn.w	r2, #1
 8006168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f9de 	bl	800652c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617a:	2b80      	cmp	r3, #128	; 0x80
 800617c:	d10e      	bne.n	800619c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	d107      	bne.n	800619c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fd00 	bl	8006b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d10e      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d107      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f9d0 	bl	8006568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d10e      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d107      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0220 	mvn.w	r2, #32
 80061ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fcca 	bl	8006b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006212:	2302      	movs	r3, #2
 8006214:	e08a      	b.n	800632c <HAL_TIM_IC_ConfigChannel+0x130>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2202      	movs	r2, #2
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d11b      	bne.n	8006264 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	6819      	ldr	r1, [r3, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f000 fa3e 	bl	80066bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 020c 	bic.w	r2, r2, #12
 800624e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6999      	ldr	r1, [r3, #24]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	619a      	str	r2, [r3, #24]
 8006262:	e05a      	b.n	800631a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b04      	cmp	r3, #4
 8006268:	d11c      	bne.n	80062a4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6819      	ldr	r1, [r3, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f000 fac2 	bl	8006802 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800628c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6999      	ldr	r1, [r3, #24]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	021a      	lsls	r2, r3, #8
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	619a      	str	r2, [r3, #24]
 80062a2:	e03a      	b.n	800631a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d11b      	bne.n	80062e2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6819      	ldr	r1, [r3, #0]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f000 fb0f 	bl	80068dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 020c 	bic.w	r2, r2, #12
 80062cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69d9      	ldr	r1, [r3, #28]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	61da      	str	r2, [r3, #28]
 80062e0:	e01b      	b.n	800631a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6819      	ldr	r1, [r3, #0]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f000 fb2f 	bl	8006954 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006304:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	021a      	lsls	r2, r3, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_TIM_ConfigClockSource+0x18>
 8006348:	2302      	movs	r3, #2
 800634a:	e0a6      	b.n	800649a <HAL_TIM_ConfigClockSource+0x166>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800636a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006372:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	d067      	beq.n	8006454 <HAL_TIM_ConfigClockSource+0x120>
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d80b      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x6c>
 8006388:	2b10      	cmp	r3, #16
 800638a:	d073      	beq.n	8006474 <HAL_TIM_ConfigClockSource+0x140>
 800638c:	2b10      	cmp	r3, #16
 800638e:	d802      	bhi.n	8006396 <HAL_TIM_ConfigClockSource+0x62>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d06f      	beq.n	8006474 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006394:	e078      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006396:	2b20      	cmp	r3, #32
 8006398:	d06c      	beq.n	8006474 <HAL_TIM_ConfigClockSource+0x140>
 800639a:	2b30      	cmp	r3, #48	; 0x30
 800639c:	d06a      	beq.n	8006474 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800639e:	e073      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063a0:	2b70      	cmp	r3, #112	; 0x70
 80063a2:	d00d      	beq.n	80063c0 <HAL_TIM_ConfigClockSource+0x8c>
 80063a4:	2b70      	cmp	r3, #112	; 0x70
 80063a6:	d804      	bhi.n	80063b2 <HAL_TIM_ConfigClockSource+0x7e>
 80063a8:	2b50      	cmp	r3, #80	; 0x50
 80063aa:	d033      	beq.n	8006414 <HAL_TIM_ConfigClockSource+0xe0>
 80063ac:	2b60      	cmp	r3, #96	; 0x60
 80063ae:	d041      	beq.n	8006434 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80063b0:	e06a      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	d066      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0x152>
 80063b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063bc:	d017      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80063be:	e063      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	6899      	ldr	r1, [r3, #8]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f000 fb18 	bl	8006a04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	609a      	str	r2, [r3, #8]
      break;
 80063ec:	e04c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6899      	ldr	r1, [r3, #8]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f000 fb01 	bl	8006a04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006410:	609a      	str	r2, [r3, #8]
      break;
 8006412:	e039      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	6859      	ldr	r1, [r3, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	461a      	mov	r2, r3
 8006422:	f000 f9bf 	bl	80067a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2150      	movs	r1, #80	; 0x50
 800642c:	4618      	mov	r0, r3
 800642e:	f000 face 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006432:	e029      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	6859      	ldr	r1, [r3, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	461a      	mov	r2, r3
 8006442:	f000 fa1b 	bl	800687c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2160      	movs	r1, #96	; 0x60
 800644c:	4618      	mov	r0, r3
 800644e:	f000 fabe 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006452:	e019      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	6859      	ldr	r1, [r3, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	461a      	mov	r2, r3
 8006462:	f000 f99f 	bl	80067a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2140      	movs	r1, #64	; 0x40
 800646c:	4618      	mov	r0, r3
 800646e:	f000 faae 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006472:	e009      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f000 faa5 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006484:	e000      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b0c      	cmp	r3, #12
 80064b6:	d831      	bhi.n	800651c <HAL_TIM_ReadCapturedValue+0x78>
 80064b8:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064f5 	.word	0x080064f5
 80064c4:	0800651d 	.word	0x0800651d
 80064c8:	0800651d 	.word	0x0800651d
 80064cc:	0800651d 	.word	0x0800651d
 80064d0:	080064ff 	.word	0x080064ff
 80064d4:	0800651d 	.word	0x0800651d
 80064d8:	0800651d 	.word	0x0800651d
 80064dc:	0800651d 	.word	0x0800651d
 80064e0:	08006509 	.word	0x08006509
 80064e4:	0800651d 	.word	0x0800651d
 80064e8:	0800651d 	.word	0x0800651d
 80064ec:	0800651d 	.word	0x0800651d
 80064f0:	08006513 	.word	0x08006513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	60fb      	str	r3, [r7, #12]

      break;
 80064fc:	e00f      	b.n	800651e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	60fb      	str	r3, [r7, #12]

      break;
 8006506:	e00a      	b.n	800651e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650e:	60fb      	str	r3, [r7, #12]

      break;
 8006510:	e005      	b.n	800651e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	60fb      	str	r3, [r7, #12]

      break;
 800651a:	e000      	b.n	800651e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800651c:	bf00      	nop
  }

  return tmpreg;
 800651e:	68fb      	ldr	r3, [r7, #12]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a40      	ldr	r2, [pc, #256]	; (8006690 <TIM_Base_SetConfig+0x114>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d013      	beq.n	80065bc <TIM_Base_SetConfig+0x40>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659a:	d00f      	beq.n	80065bc <TIM_Base_SetConfig+0x40>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a3d      	ldr	r2, [pc, #244]	; (8006694 <TIM_Base_SetConfig+0x118>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00b      	beq.n	80065bc <TIM_Base_SetConfig+0x40>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a3c      	ldr	r2, [pc, #240]	; (8006698 <TIM_Base_SetConfig+0x11c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d007      	beq.n	80065bc <TIM_Base_SetConfig+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a3b      	ldr	r2, [pc, #236]	; (800669c <TIM_Base_SetConfig+0x120>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_Base_SetConfig+0x40>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a3a      	ldr	r2, [pc, #232]	; (80066a0 <TIM_Base_SetConfig+0x124>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d108      	bne.n	80065ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a2f      	ldr	r2, [pc, #188]	; (8006690 <TIM_Base_SetConfig+0x114>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d02b      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065dc:	d027      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a2c      	ldr	r2, [pc, #176]	; (8006694 <TIM_Base_SetConfig+0x118>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d023      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a2b      	ldr	r2, [pc, #172]	; (8006698 <TIM_Base_SetConfig+0x11c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d01f      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a2a      	ldr	r2, [pc, #168]	; (800669c <TIM_Base_SetConfig+0x120>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01b      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a29      	ldr	r2, [pc, #164]	; (80066a0 <TIM_Base_SetConfig+0x124>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d017      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a28      	ldr	r2, [pc, #160]	; (80066a4 <TIM_Base_SetConfig+0x128>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a27      	ldr	r2, [pc, #156]	; (80066a8 <TIM_Base_SetConfig+0x12c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00f      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a26      	ldr	r2, [pc, #152]	; (80066ac <TIM_Base_SetConfig+0x130>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00b      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <TIM_Base_SetConfig+0x134>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d007      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a24      	ldr	r2, [pc, #144]	; (80066b4 <TIM_Base_SetConfig+0x138>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a23      	ldr	r2, [pc, #140]	; (80066b8 <TIM_Base_SetConfig+0x13c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d108      	bne.n	8006640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a0a      	ldr	r2, [pc, #40]	; (8006690 <TIM_Base_SetConfig+0x114>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_Base_SetConfig+0xf8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a0c      	ldr	r2, [pc, #48]	; (80066a0 <TIM_Base_SetConfig+0x124>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d103      	bne.n	800667c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	615a      	str	r2, [r3, #20]
}
 8006682:	bf00      	nop
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40010000 	.word	0x40010000
 8006694:	40000400 	.word	0x40000400
 8006698:	40000800 	.word	0x40000800
 800669c:	40000c00 	.word	0x40000c00
 80066a0:	40010400 	.word	0x40010400
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800
 80066b0:	40001800 	.word	0x40001800
 80066b4:	40001c00 	.word	0x40001c00
 80066b8:	40002000 	.word	0x40002000

080066bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f023 0201 	bic.w	r2, r3, #1
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4a28      	ldr	r2, [pc, #160]	; (8006788 <TIM_TI1_SetConfig+0xcc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d01b      	beq.n	8006722 <TIM_TI1_SetConfig+0x66>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f0:	d017      	beq.n	8006722 <TIM_TI1_SetConfig+0x66>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a25      	ldr	r2, [pc, #148]	; (800678c <TIM_TI1_SetConfig+0xd0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <TIM_TI1_SetConfig+0x66>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4a24      	ldr	r2, [pc, #144]	; (8006790 <TIM_TI1_SetConfig+0xd4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00f      	beq.n	8006722 <TIM_TI1_SetConfig+0x66>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4a23      	ldr	r2, [pc, #140]	; (8006794 <TIM_TI1_SetConfig+0xd8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00b      	beq.n	8006722 <TIM_TI1_SetConfig+0x66>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4a22      	ldr	r2, [pc, #136]	; (8006798 <TIM_TI1_SetConfig+0xdc>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d007      	beq.n	8006722 <TIM_TI1_SetConfig+0x66>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4a21      	ldr	r2, [pc, #132]	; (800679c <TIM_TI1_SetConfig+0xe0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_TI1_SetConfig+0x66>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4a20      	ldr	r2, [pc, #128]	; (80067a0 <TIM_TI1_SetConfig+0xe4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <TIM_TI1_SetConfig+0x6a>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <TIM_TI1_SetConfig+0x6c>
 8006726:	2300      	movs	r3, #0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f023 0303 	bic.w	r3, r3, #3
 8006732:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	e003      	b.n	8006746 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f043 0301 	orr.w	r3, r3, #1
 8006744:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800674c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	b2db      	uxtb	r3, r3
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f023 030a 	bic.w	r3, r3, #10
 8006760:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f003 030a 	and.w	r3, r3, #10
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	621a      	str	r2, [r3, #32]
}
 800677a:	bf00      	nop
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	40010000 	.word	0x40010000
 800678c:	40000400 	.word	0x40000400
 8006790:	40000800 	.word	0x40000800
 8006794:	40000c00 	.word	0x40000c00
 8006798:	40010400 	.word	0x40010400
 800679c:	40014000 	.word	0x40014000
 80067a0:	40001800 	.word	0x40001800

080067a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0201 	bic.w	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 030a 	bic.w	r3, r3, #10
 80067e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006802:	b480      	push	{r7}
 8006804:	b087      	sub	sp, #28
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f023 0210 	bic.w	r2, r3, #16
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006840:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	031b      	lsls	r3, r3, #12
 8006846:	b29b      	uxth	r3, r3
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006854:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	f023 0210 	bic.w	r2, r3, #16
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	031b      	lsls	r3, r3, #12
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	621a      	str	r2, [r3, #32]
}
 80068d0:	bf00      	nop
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f023 0303 	bic.w	r3, r3, #3
 8006908:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006918:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	b2db      	uxtb	r3, r3
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800692c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	621a      	str	r2, [r3, #32]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006980:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006992:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	031b      	lsls	r3, r3, #12
 8006998:	b29b      	uxth	r3, r3
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80069a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	031b      	lsls	r3, r3, #12
 80069ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f043 0307 	orr.w	r3, r3, #7
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	609a      	str	r2, [r3, #8]
}
 80069f8:	bf00      	nop
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	609a      	str	r2, [r3, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2201      	movs	r2, #1
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1a      	ldr	r2, [r3, #32]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	43db      	mvns	r3, r3
 8006a66:	401a      	ands	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a1a      	ldr	r2, [r3, #32]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e05a      	b.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a21      	ldr	r2, [pc, #132]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af4:	d01d      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1d      	ldr	r2, [pc, #116]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d018      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1b      	ldr	r2, [pc, #108]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1a      	ldr	r2, [pc, #104]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00e      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a18      	ldr	r2, [pc, #96]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d004      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a15      	ldr	r2, [pc, #84]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d10c      	bne.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40000400 	.word	0x40000400
 8006b74:	40000800 	.word	0x40000800
 8006b78:	40000c00 	.word	0x40000c00
 8006b7c:	40010400 	.word	0x40010400
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40001800 	.word	0x40001800

08006b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e03f      	b.n	8006c42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fc f92e 	bl	8002e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2224      	movs	r2, #36	; 0x24
 8006be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f97d 	bl	8006ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	4613      	mov	r3, r2
 8006c58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d166      	bne.n	8006d34 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <HAL_UART_Receive_DMA+0x26>
 8006c6c:	88fb      	ldrh	r3, [r7, #6]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e05f      	b.n	8006d36 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_UART_Receive_DMA+0x38>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e058      	b.n	8006d36 <HAL_UART_Receive_DMA+0xea>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	88fa      	ldrh	r2, [r7, #6]
 8006c96:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2222      	movs	r2, #34	; 0x22
 8006ca2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006caa:	4a25      	ldr	r2, [pc, #148]	; (8006d40 <HAL_UART_Receive_DMA+0xf4>)
 8006cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb2:	4a24      	ldr	r2, [pc, #144]	; (8006d44 <HAL_UART_Receive_DMA+0xf8>)
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cba:	4a23      	ldr	r2, [pc, #140]	; (8006d48 <HAL_UART_Receive_DMA+0xfc>)
 8006cbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006cc6:	f107 0308 	add.w	r3, r7, #8
 8006cca:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	88fb      	ldrh	r3, [r7, #6]
 8006cde:	f7fc fba3 	bl	8003428 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d0e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695a      	ldr	r2, [r3, #20]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d2e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	e000      	b.n	8006d36 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
  }
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	08006d75 	.word	0x08006d75
 8006d44:	08006ddd 	.word	0x08006ddd
 8006d48:	08006df9 	.word	0x08006df9

08006d4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d11e      	bne.n	8006dce <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006da4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695a      	ldr	r2, [r3, #20]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0201 	bic.w	r2, r2, #1
 8006db4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695a      	ldr	r2, [r3, #20]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7fb fbb2 	bl	8002538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff ffae 	bl	8006d4c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e14:	2b80      	cmp	r3, #128	; 0x80
 8006e16:	bf0c      	ite	eq
 8006e18:	2301      	moveq	r3, #1
 8006e1a:	2300      	movne	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b21      	cmp	r3, #33	; 0x21
 8006e2a:	d108      	bne.n	8006e3e <UART_DMAError+0x46>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006e38:	68b8      	ldr	r0, [r7, #8]
 8006e3a:	f000 f827 	bl	8006e8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b40      	cmp	r3, #64	; 0x40
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b22      	cmp	r3, #34	; 0x22
 8006e5e:	d108      	bne.n	8006e72 <UART_DMAError+0x7a>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e6c:	68b8      	ldr	r0, [r7, #8]
 8006e6e:	f000 f823 	bl	8006eb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	f043 0210 	orr.w	r2, r3, #16
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e7e:	68b8      	ldr	r0, [r7, #8]
 8006e80:	f7ff ff6e 	bl	8006d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e84:	bf00      	nop
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006ea2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ece:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0201 	bic.w	r2, r2, #1
 8006ede:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006f36:	f023 030c 	bic.w	r3, r3, #12
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	430b      	orrs	r3, r1
 8006f42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699a      	ldr	r2, [r3, #24]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f62:	f040 818b 	bne.w	800727c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4ac1      	ldr	r2, [pc, #772]	; (8007270 <UART_SetConfig+0x37c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d005      	beq.n	8006f7c <UART_SetConfig+0x88>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4abf      	ldr	r2, [pc, #764]	; (8007274 <UART_SetConfig+0x380>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	f040 80bd 	bne.w	80070f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f7c:	f7fe fbfc 	bl	8005778 <HAL_RCC_GetPCLK2Freq>
 8006f80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	461d      	mov	r5, r3
 8006f86:	f04f 0600 	mov.w	r6, #0
 8006f8a:	46a8      	mov	r8, r5
 8006f8c:	46b1      	mov	r9, r6
 8006f8e:	eb18 0308 	adds.w	r3, r8, r8
 8006f92:	eb49 0409 	adc.w	r4, r9, r9
 8006f96:	4698      	mov	r8, r3
 8006f98:	46a1      	mov	r9, r4
 8006f9a:	eb18 0805 	adds.w	r8, r8, r5
 8006f9e:	eb49 0906 	adc.w	r9, r9, r6
 8006fa2:	f04f 0100 	mov.w	r1, #0
 8006fa6:	f04f 0200 	mov.w	r2, #0
 8006faa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006fae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006fb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006fb6:	4688      	mov	r8, r1
 8006fb8:	4691      	mov	r9, r2
 8006fba:	eb18 0005 	adds.w	r0, r8, r5
 8006fbe:	eb49 0106 	adc.w	r1, r9, r6
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	461d      	mov	r5, r3
 8006fc8:	f04f 0600 	mov.w	r6, #0
 8006fcc:	196b      	adds	r3, r5, r5
 8006fce:	eb46 0406 	adc.w	r4, r6, r6
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4623      	mov	r3, r4
 8006fd6:	f7f9 fdb3 	bl	8000b40 <__aeabi_uldivmod>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4ba5      	ldr	r3, [pc, #660]	; (8007278 <UART_SetConfig+0x384>)
 8006fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	461d      	mov	r5, r3
 8006ff0:	f04f 0600 	mov.w	r6, #0
 8006ff4:	46a9      	mov	r9, r5
 8006ff6:	46b2      	mov	sl, r6
 8006ff8:	eb19 0309 	adds.w	r3, r9, r9
 8006ffc:	eb4a 040a 	adc.w	r4, sl, sl
 8007000:	4699      	mov	r9, r3
 8007002:	46a2      	mov	sl, r4
 8007004:	eb19 0905 	adds.w	r9, r9, r5
 8007008:	eb4a 0a06 	adc.w	sl, sl, r6
 800700c:	f04f 0100 	mov.w	r1, #0
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007018:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800701c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007020:	4689      	mov	r9, r1
 8007022:	4692      	mov	sl, r2
 8007024:	eb19 0005 	adds.w	r0, r9, r5
 8007028:	eb4a 0106 	adc.w	r1, sl, r6
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	461d      	mov	r5, r3
 8007032:	f04f 0600 	mov.w	r6, #0
 8007036:	196b      	adds	r3, r5, r5
 8007038:	eb46 0406 	adc.w	r4, r6, r6
 800703c:	461a      	mov	r2, r3
 800703e:	4623      	mov	r3, r4
 8007040:	f7f9 fd7e 	bl	8000b40 <__aeabi_uldivmod>
 8007044:	4603      	mov	r3, r0
 8007046:	460c      	mov	r4, r1
 8007048:	461a      	mov	r2, r3
 800704a:	4b8b      	ldr	r3, [pc, #556]	; (8007278 <UART_SetConfig+0x384>)
 800704c:	fba3 1302 	umull	r1, r3, r3, r2
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	2164      	movs	r1, #100	; 0x64
 8007054:	fb01 f303 	mul.w	r3, r1, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	3332      	adds	r3, #50	; 0x32
 800705e:	4a86      	ldr	r2, [pc, #536]	; (8007278 <UART_SetConfig+0x384>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800706c:	4498      	add	r8, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	461d      	mov	r5, r3
 8007072:	f04f 0600 	mov.w	r6, #0
 8007076:	46a9      	mov	r9, r5
 8007078:	46b2      	mov	sl, r6
 800707a:	eb19 0309 	adds.w	r3, r9, r9
 800707e:	eb4a 040a 	adc.w	r4, sl, sl
 8007082:	4699      	mov	r9, r3
 8007084:	46a2      	mov	sl, r4
 8007086:	eb19 0905 	adds.w	r9, r9, r5
 800708a:	eb4a 0a06 	adc.w	sl, sl, r6
 800708e:	f04f 0100 	mov.w	r1, #0
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800709a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800709e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070a2:	4689      	mov	r9, r1
 80070a4:	4692      	mov	sl, r2
 80070a6:	eb19 0005 	adds.w	r0, r9, r5
 80070aa:	eb4a 0106 	adc.w	r1, sl, r6
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	461d      	mov	r5, r3
 80070b4:	f04f 0600 	mov.w	r6, #0
 80070b8:	196b      	adds	r3, r5, r5
 80070ba:	eb46 0406 	adc.w	r4, r6, r6
 80070be:	461a      	mov	r2, r3
 80070c0:	4623      	mov	r3, r4
 80070c2:	f7f9 fd3d 	bl	8000b40 <__aeabi_uldivmod>
 80070c6:	4603      	mov	r3, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	461a      	mov	r2, r3
 80070cc:	4b6a      	ldr	r3, [pc, #424]	; (8007278 <UART_SetConfig+0x384>)
 80070ce:	fba3 1302 	umull	r1, r3, r3, r2
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	2164      	movs	r1, #100	; 0x64
 80070d6:	fb01 f303 	mul.w	r3, r1, r3
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	3332      	adds	r3, #50	; 0x32
 80070e0:	4a65      	ldr	r2, [pc, #404]	; (8007278 <UART_SetConfig+0x384>)
 80070e2:	fba2 2303 	umull	r2, r3, r2, r3
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	f003 0207 	and.w	r2, r3, #7
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4442      	add	r2, r8
 80070f2:	609a      	str	r2, [r3, #8]
 80070f4:	e26f      	b.n	80075d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070f6:	f7fe fb2b 	bl	8005750 <HAL_RCC_GetPCLK1Freq>
 80070fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	461d      	mov	r5, r3
 8007100:	f04f 0600 	mov.w	r6, #0
 8007104:	46a8      	mov	r8, r5
 8007106:	46b1      	mov	r9, r6
 8007108:	eb18 0308 	adds.w	r3, r8, r8
 800710c:	eb49 0409 	adc.w	r4, r9, r9
 8007110:	4698      	mov	r8, r3
 8007112:	46a1      	mov	r9, r4
 8007114:	eb18 0805 	adds.w	r8, r8, r5
 8007118:	eb49 0906 	adc.w	r9, r9, r6
 800711c:	f04f 0100 	mov.w	r1, #0
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007128:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800712c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007130:	4688      	mov	r8, r1
 8007132:	4691      	mov	r9, r2
 8007134:	eb18 0005 	adds.w	r0, r8, r5
 8007138:	eb49 0106 	adc.w	r1, r9, r6
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	461d      	mov	r5, r3
 8007142:	f04f 0600 	mov.w	r6, #0
 8007146:	196b      	adds	r3, r5, r5
 8007148:	eb46 0406 	adc.w	r4, r6, r6
 800714c:	461a      	mov	r2, r3
 800714e:	4623      	mov	r3, r4
 8007150:	f7f9 fcf6 	bl	8000b40 <__aeabi_uldivmod>
 8007154:	4603      	mov	r3, r0
 8007156:	460c      	mov	r4, r1
 8007158:	461a      	mov	r2, r3
 800715a:	4b47      	ldr	r3, [pc, #284]	; (8007278 <UART_SetConfig+0x384>)
 800715c:	fba3 2302 	umull	r2, r3, r3, r2
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	461d      	mov	r5, r3
 800716a:	f04f 0600 	mov.w	r6, #0
 800716e:	46a9      	mov	r9, r5
 8007170:	46b2      	mov	sl, r6
 8007172:	eb19 0309 	adds.w	r3, r9, r9
 8007176:	eb4a 040a 	adc.w	r4, sl, sl
 800717a:	4699      	mov	r9, r3
 800717c:	46a2      	mov	sl, r4
 800717e:	eb19 0905 	adds.w	r9, r9, r5
 8007182:	eb4a 0a06 	adc.w	sl, sl, r6
 8007186:	f04f 0100 	mov.w	r1, #0
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800719a:	4689      	mov	r9, r1
 800719c:	4692      	mov	sl, r2
 800719e:	eb19 0005 	adds.w	r0, r9, r5
 80071a2:	eb4a 0106 	adc.w	r1, sl, r6
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	461d      	mov	r5, r3
 80071ac:	f04f 0600 	mov.w	r6, #0
 80071b0:	196b      	adds	r3, r5, r5
 80071b2:	eb46 0406 	adc.w	r4, r6, r6
 80071b6:	461a      	mov	r2, r3
 80071b8:	4623      	mov	r3, r4
 80071ba:	f7f9 fcc1 	bl	8000b40 <__aeabi_uldivmod>
 80071be:	4603      	mov	r3, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	461a      	mov	r2, r3
 80071c4:	4b2c      	ldr	r3, [pc, #176]	; (8007278 <UART_SetConfig+0x384>)
 80071c6:	fba3 1302 	umull	r1, r3, r3, r2
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	2164      	movs	r1, #100	; 0x64
 80071ce:	fb01 f303 	mul.w	r3, r1, r3
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	3332      	adds	r3, #50	; 0x32
 80071d8:	4a27      	ldr	r2, [pc, #156]	; (8007278 <UART_SetConfig+0x384>)
 80071da:	fba2 2303 	umull	r2, r3, r2, r3
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071e6:	4498      	add	r8, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	461d      	mov	r5, r3
 80071ec:	f04f 0600 	mov.w	r6, #0
 80071f0:	46a9      	mov	r9, r5
 80071f2:	46b2      	mov	sl, r6
 80071f4:	eb19 0309 	adds.w	r3, r9, r9
 80071f8:	eb4a 040a 	adc.w	r4, sl, sl
 80071fc:	4699      	mov	r9, r3
 80071fe:	46a2      	mov	sl, r4
 8007200:	eb19 0905 	adds.w	r9, r9, r5
 8007204:	eb4a 0a06 	adc.w	sl, sl, r6
 8007208:	f04f 0100 	mov.w	r1, #0
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007214:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007218:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800721c:	4689      	mov	r9, r1
 800721e:	4692      	mov	sl, r2
 8007220:	eb19 0005 	adds.w	r0, r9, r5
 8007224:	eb4a 0106 	adc.w	r1, sl, r6
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	461d      	mov	r5, r3
 800722e:	f04f 0600 	mov.w	r6, #0
 8007232:	196b      	adds	r3, r5, r5
 8007234:	eb46 0406 	adc.w	r4, r6, r6
 8007238:	461a      	mov	r2, r3
 800723a:	4623      	mov	r3, r4
 800723c:	f7f9 fc80 	bl	8000b40 <__aeabi_uldivmod>
 8007240:	4603      	mov	r3, r0
 8007242:	460c      	mov	r4, r1
 8007244:	461a      	mov	r2, r3
 8007246:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <UART_SetConfig+0x384>)
 8007248:	fba3 1302 	umull	r1, r3, r3, r2
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	2164      	movs	r1, #100	; 0x64
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	3332      	adds	r3, #50	; 0x32
 800725a:	4a07      	ldr	r2, [pc, #28]	; (8007278 <UART_SetConfig+0x384>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	f003 0207 	and.w	r2, r3, #7
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4442      	add	r2, r8
 800726c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800726e:	e1b2      	b.n	80075d6 <UART_SetConfig+0x6e2>
 8007270:	40011000 	.word	0x40011000
 8007274:	40011400 	.word	0x40011400
 8007278:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4ad7      	ldr	r2, [pc, #860]	; (80075e0 <UART_SetConfig+0x6ec>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d005      	beq.n	8007292 <UART_SetConfig+0x39e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4ad6      	ldr	r2, [pc, #856]	; (80075e4 <UART_SetConfig+0x6f0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	f040 80d1 	bne.w	8007434 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007292:	f7fe fa71 	bl	8005778 <HAL_RCC_GetPCLK2Freq>
 8007296:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	469a      	mov	sl, r3
 800729c:	f04f 0b00 	mov.w	fp, #0
 80072a0:	46d0      	mov	r8, sl
 80072a2:	46d9      	mov	r9, fp
 80072a4:	eb18 0308 	adds.w	r3, r8, r8
 80072a8:	eb49 0409 	adc.w	r4, r9, r9
 80072ac:	4698      	mov	r8, r3
 80072ae:	46a1      	mov	r9, r4
 80072b0:	eb18 080a 	adds.w	r8, r8, sl
 80072b4:	eb49 090b 	adc.w	r9, r9, fp
 80072b8:	f04f 0100 	mov.w	r1, #0
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80072c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80072c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072cc:	4688      	mov	r8, r1
 80072ce:	4691      	mov	r9, r2
 80072d0:	eb1a 0508 	adds.w	r5, sl, r8
 80072d4:	eb4b 0609 	adc.w	r6, fp, r9
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	4619      	mov	r1, r3
 80072de:	f04f 0200 	mov.w	r2, #0
 80072e2:	f04f 0300 	mov.w	r3, #0
 80072e6:	f04f 0400 	mov.w	r4, #0
 80072ea:	0094      	lsls	r4, r2, #2
 80072ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072f0:	008b      	lsls	r3, r1, #2
 80072f2:	461a      	mov	r2, r3
 80072f4:	4623      	mov	r3, r4
 80072f6:	4628      	mov	r0, r5
 80072f8:	4631      	mov	r1, r6
 80072fa:	f7f9 fc21 	bl	8000b40 <__aeabi_uldivmod>
 80072fe:	4603      	mov	r3, r0
 8007300:	460c      	mov	r4, r1
 8007302:	461a      	mov	r2, r3
 8007304:	4bb8      	ldr	r3, [pc, #736]	; (80075e8 <UART_SetConfig+0x6f4>)
 8007306:	fba3 2302 	umull	r2, r3, r3, r2
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	469b      	mov	fp, r3
 8007314:	f04f 0c00 	mov.w	ip, #0
 8007318:	46d9      	mov	r9, fp
 800731a:	46e2      	mov	sl, ip
 800731c:	eb19 0309 	adds.w	r3, r9, r9
 8007320:	eb4a 040a 	adc.w	r4, sl, sl
 8007324:	4699      	mov	r9, r3
 8007326:	46a2      	mov	sl, r4
 8007328:	eb19 090b 	adds.w	r9, r9, fp
 800732c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007330:	f04f 0100 	mov.w	r1, #0
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800733c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007344:	4689      	mov	r9, r1
 8007346:	4692      	mov	sl, r2
 8007348:	eb1b 0509 	adds.w	r5, fp, r9
 800734c:	eb4c 060a 	adc.w	r6, ip, sl
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	4619      	mov	r1, r3
 8007356:	f04f 0200 	mov.w	r2, #0
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	f04f 0400 	mov.w	r4, #0
 8007362:	0094      	lsls	r4, r2, #2
 8007364:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007368:	008b      	lsls	r3, r1, #2
 800736a:	461a      	mov	r2, r3
 800736c:	4623      	mov	r3, r4
 800736e:	4628      	mov	r0, r5
 8007370:	4631      	mov	r1, r6
 8007372:	f7f9 fbe5 	bl	8000b40 <__aeabi_uldivmod>
 8007376:	4603      	mov	r3, r0
 8007378:	460c      	mov	r4, r1
 800737a:	461a      	mov	r2, r3
 800737c:	4b9a      	ldr	r3, [pc, #616]	; (80075e8 <UART_SetConfig+0x6f4>)
 800737e:	fba3 1302 	umull	r1, r3, r3, r2
 8007382:	095b      	lsrs	r3, r3, #5
 8007384:	2164      	movs	r1, #100	; 0x64
 8007386:	fb01 f303 	mul.w	r3, r1, r3
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	3332      	adds	r3, #50	; 0x32
 8007390:	4a95      	ldr	r2, [pc, #596]	; (80075e8 <UART_SetConfig+0x6f4>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800739c:	4498      	add	r8, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	469b      	mov	fp, r3
 80073a2:	f04f 0c00 	mov.w	ip, #0
 80073a6:	46d9      	mov	r9, fp
 80073a8:	46e2      	mov	sl, ip
 80073aa:	eb19 0309 	adds.w	r3, r9, r9
 80073ae:	eb4a 040a 	adc.w	r4, sl, sl
 80073b2:	4699      	mov	r9, r3
 80073b4:	46a2      	mov	sl, r4
 80073b6:	eb19 090b 	adds.w	r9, r9, fp
 80073ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80073be:	f04f 0100 	mov.w	r1, #0
 80073c2:	f04f 0200 	mov.w	r2, #0
 80073c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073d2:	4689      	mov	r9, r1
 80073d4:	4692      	mov	sl, r2
 80073d6:	eb1b 0509 	adds.w	r5, fp, r9
 80073da:	eb4c 060a 	adc.w	r6, ip, sl
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	4619      	mov	r1, r3
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	f04f 0400 	mov.w	r4, #0
 80073f0:	0094      	lsls	r4, r2, #2
 80073f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073f6:	008b      	lsls	r3, r1, #2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4623      	mov	r3, r4
 80073fc:	4628      	mov	r0, r5
 80073fe:	4631      	mov	r1, r6
 8007400:	f7f9 fb9e 	bl	8000b40 <__aeabi_uldivmod>
 8007404:	4603      	mov	r3, r0
 8007406:	460c      	mov	r4, r1
 8007408:	461a      	mov	r2, r3
 800740a:	4b77      	ldr	r3, [pc, #476]	; (80075e8 <UART_SetConfig+0x6f4>)
 800740c:	fba3 1302 	umull	r1, r3, r3, r2
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	2164      	movs	r1, #100	; 0x64
 8007414:	fb01 f303 	mul.w	r3, r1, r3
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	3332      	adds	r3, #50	; 0x32
 800741e:	4a72      	ldr	r2, [pc, #456]	; (80075e8 <UART_SetConfig+0x6f4>)
 8007420:	fba2 2303 	umull	r2, r3, r2, r3
 8007424:	095b      	lsrs	r3, r3, #5
 8007426:	f003 020f 	and.w	r2, r3, #15
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4442      	add	r2, r8
 8007430:	609a      	str	r2, [r3, #8]
 8007432:	e0d0      	b.n	80075d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007434:	f7fe f98c 	bl	8005750 <HAL_RCC_GetPCLK1Freq>
 8007438:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	469a      	mov	sl, r3
 800743e:	f04f 0b00 	mov.w	fp, #0
 8007442:	46d0      	mov	r8, sl
 8007444:	46d9      	mov	r9, fp
 8007446:	eb18 0308 	adds.w	r3, r8, r8
 800744a:	eb49 0409 	adc.w	r4, r9, r9
 800744e:	4698      	mov	r8, r3
 8007450:	46a1      	mov	r9, r4
 8007452:	eb18 080a 	adds.w	r8, r8, sl
 8007456:	eb49 090b 	adc.w	r9, r9, fp
 800745a:	f04f 0100 	mov.w	r1, #0
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007466:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800746a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800746e:	4688      	mov	r8, r1
 8007470:	4691      	mov	r9, r2
 8007472:	eb1a 0508 	adds.w	r5, sl, r8
 8007476:	eb4b 0609 	adc.w	r6, fp, r9
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4619      	mov	r1, r3
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	f04f 0300 	mov.w	r3, #0
 8007488:	f04f 0400 	mov.w	r4, #0
 800748c:	0094      	lsls	r4, r2, #2
 800748e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007492:	008b      	lsls	r3, r1, #2
 8007494:	461a      	mov	r2, r3
 8007496:	4623      	mov	r3, r4
 8007498:	4628      	mov	r0, r5
 800749a:	4631      	mov	r1, r6
 800749c:	f7f9 fb50 	bl	8000b40 <__aeabi_uldivmod>
 80074a0:	4603      	mov	r3, r0
 80074a2:	460c      	mov	r4, r1
 80074a4:	461a      	mov	r2, r3
 80074a6:	4b50      	ldr	r3, [pc, #320]	; (80075e8 <UART_SetConfig+0x6f4>)
 80074a8:	fba3 2302 	umull	r2, r3, r3, r2
 80074ac:	095b      	lsrs	r3, r3, #5
 80074ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	469b      	mov	fp, r3
 80074b6:	f04f 0c00 	mov.w	ip, #0
 80074ba:	46d9      	mov	r9, fp
 80074bc:	46e2      	mov	sl, ip
 80074be:	eb19 0309 	adds.w	r3, r9, r9
 80074c2:	eb4a 040a 	adc.w	r4, sl, sl
 80074c6:	4699      	mov	r9, r3
 80074c8:	46a2      	mov	sl, r4
 80074ca:	eb19 090b 	adds.w	r9, r9, fp
 80074ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074d2:	f04f 0100 	mov.w	r1, #0
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074e6:	4689      	mov	r9, r1
 80074e8:	4692      	mov	sl, r2
 80074ea:	eb1b 0509 	adds.w	r5, fp, r9
 80074ee:	eb4c 060a 	adc.w	r6, ip, sl
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	4619      	mov	r1, r3
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	f04f 0400 	mov.w	r4, #0
 8007504:	0094      	lsls	r4, r2, #2
 8007506:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800750a:	008b      	lsls	r3, r1, #2
 800750c:	461a      	mov	r2, r3
 800750e:	4623      	mov	r3, r4
 8007510:	4628      	mov	r0, r5
 8007512:	4631      	mov	r1, r6
 8007514:	f7f9 fb14 	bl	8000b40 <__aeabi_uldivmod>
 8007518:	4603      	mov	r3, r0
 800751a:	460c      	mov	r4, r1
 800751c:	461a      	mov	r2, r3
 800751e:	4b32      	ldr	r3, [pc, #200]	; (80075e8 <UART_SetConfig+0x6f4>)
 8007520:	fba3 1302 	umull	r1, r3, r3, r2
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	2164      	movs	r1, #100	; 0x64
 8007528:	fb01 f303 	mul.w	r3, r1, r3
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	3332      	adds	r3, #50	; 0x32
 8007532:	4a2d      	ldr	r2, [pc, #180]	; (80075e8 <UART_SetConfig+0x6f4>)
 8007534:	fba2 2303 	umull	r2, r3, r2, r3
 8007538:	095b      	lsrs	r3, r3, #5
 800753a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800753e:	4498      	add	r8, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	469b      	mov	fp, r3
 8007544:	f04f 0c00 	mov.w	ip, #0
 8007548:	46d9      	mov	r9, fp
 800754a:	46e2      	mov	sl, ip
 800754c:	eb19 0309 	adds.w	r3, r9, r9
 8007550:	eb4a 040a 	adc.w	r4, sl, sl
 8007554:	4699      	mov	r9, r3
 8007556:	46a2      	mov	sl, r4
 8007558:	eb19 090b 	adds.w	r9, r9, fp
 800755c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007560:	f04f 0100 	mov.w	r1, #0
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800756c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007570:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007574:	4689      	mov	r9, r1
 8007576:	4692      	mov	sl, r2
 8007578:	eb1b 0509 	adds.w	r5, fp, r9
 800757c:	eb4c 060a 	adc.w	r6, ip, sl
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4619      	mov	r1, r3
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	f04f 0400 	mov.w	r4, #0
 8007592:	0094      	lsls	r4, r2, #2
 8007594:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007598:	008b      	lsls	r3, r1, #2
 800759a:	461a      	mov	r2, r3
 800759c:	4623      	mov	r3, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	4631      	mov	r1, r6
 80075a2:	f7f9 facd 	bl	8000b40 <__aeabi_uldivmod>
 80075a6:	4603      	mov	r3, r0
 80075a8:	460c      	mov	r4, r1
 80075aa:	461a      	mov	r2, r3
 80075ac:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <UART_SetConfig+0x6f4>)
 80075ae:	fba3 1302 	umull	r1, r3, r3, r2
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	2164      	movs	r1, #100	; 0x64
 80075b6:	fb01 f303 	mul.w	r3, r1, r3
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	3332      	adds	r3, #50	; 0x32
 80075c0:	4a09      	ldr	r2, [pc, #36]	; (80075e8 <UART_SetConfig+0x6f4>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	f003 020f 	and.w	r2, r3, #15
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4442      	add	r2, r8
 80075d2:	609a      	str	r2, [r3, #8]
}
 80075d4:	e7ff      	b.n	80075d6 <UART_SetConfig+0x6e2>
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e0:	40011000 	.word	0x40011000
 80075e4:	40011400 	.word	0x40011400
 80075e8:	51eb851f 	.word	0x51eb851f

080075ec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b089      	sub	sp, #36	; 0x24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	fa93 f3a3 	rbit	r3, r3
 8007606:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	fab3 f383 	clz	r3, r3
 800760e:	b2db      	uxtb	r3, r3
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	2103      	movs	r1, #3
 8007614:	fa01 f303 	lsl.w	r3, r1, r3
 8007618:	43db      	mvns	r3, r3
 800761a:	401a      	ands	r2, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	fa93 f3a3 	rbit	r3, r3
 8007626:	61bb      	str	r3, [r7, #24]
  return result;
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	fab3 f383 	clz	r3, r3
 800762e:	b2db      	uxtb	r3, r3
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	fa01 f303 	lsl.w	r3, r1, r3
 8007638:	431a      	orrs	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	601a      	str	r2, [r3, #0]
}
 800763e:	bf00      	nop
 8007640:	3724      	adds	r7, #36	; 0x24
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	43db      	mvns	r3, r3
 800765e:	401a      	ands	r2, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	431a      	orrs	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	605a      	str	r2, [r3, #4]
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800767a:	b480      	push	{r7}
 800767c:	b089      	sub	sp, #36	; 0x24
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	fa93 f3a3 	rbit	r3, r3
 8007694:	613b      	str	r3, [r7, #16]
  return result;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	fab3 f383 	clz	r3, r3
 800769c:	b2db      	uxtb	r3, r3
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	2103      	movs	r1, #3
 80076a2:	fa01 f303 	lsl.w	r3, r1, r3
 80076a6:	43db      	mvns	r3, r3
 80076a8:	401a      	ands	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	fa93 f3a3 	rbit	r3, r3
 80076b4:	61bb      	str	r3, [r7, #24]
  return result;
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	fab3 f383 	clz	r3, r3
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	6879      	ldr	r1, [r7, #4]
 80076c2:	fa01 f303 	lsl.w	r3, r1, r3
 80076c6:	431a      	orrs	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80076cc:	bf00      	nop
 80076ce:	3724      	adds	r7, #36	; 0x24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80076d8:	b480      	push	{r7}
 80076da:	b089      	sub	sp, #36	; 0x24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	fa93 f3a3 	rbit	r3, r3
 80076f2:	613b      	str	r3, [r7, #16]
  return result;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	fab3 f383 	clz	r3, r3
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	2103      	movs	r1, #3
 8007700:	fa01 f303 	lsl.w	r3, r1, r3
 8007704:	43db      	mvns	r3, r3
 8007706:	401a      	ands	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	fa93 f3a3 	rbit	r3, r3
 8007712:	61bb      	str	r3, [r7, #24]
  return result;
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	fab3 f383 	clz	r3, r3
 800771a:	b2db      	uxtb	r3, r3
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	fa01 f303 	lsl.w	r3, r1, r3
 8007724:	431a      	orrs	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	60da      	str	r2, [r3, #12]
}
 800772a:	bf00      	nop
 800772c:	3724      	adds	r7, #36	; 0x24
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007736:	b480      	push	{r7}
 8007738:	b089      	sub	sp, #36	; 0x24
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a1a      	ldr	r2, [r3, #32]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	fa93 f3a3 	rbit	r3, r3
 8007750:	613b      	str	r3, [r7, #16]
  return result;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	fab3 f383 	clz	r3, r3
 8007758:	b2db      	uxtb	r3, r3
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	210f      	movs	r1, #15
 800775e:	fa01 f303 	lsl.w	r3, r1, r3
 8007762:	43db      	mvns	r3, r3
 8007764:	401a      	ands	r2, r3
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	fa93 f3a3 	rbit	r3, r3
 8007770:	61bb      	str	r3, [r7, #24]
  return result;
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	fab3 f383 	clz	r3, r3
 8007778:	b2db      	uxtb	r3, r3
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	fa01 f303 	lsl.w	r3, r1, r3
 8007782:	431a      	orrs	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007788:	bf00      	nop
 800778a:	3724      	adds	r7, #36	; 0x24
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007794:	b480      	push	{r7}
 8007796:	b089      	sub	sp, #36	; 0x24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	fa93 f3a3 	rbit	r3, r3
 80077b0:	613b      	str	r3, [r7, #16]
  return result;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	fab3 f383 	clz	r3, r3
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	210f      	movs	r1, #15
 80077be:	fa01 f303 	lsl.w	r3, r1, r3
 80077c2:	43db      	mvns	r3, r3
 80077c4:	401a      	ands	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	0a1b      	lsrs	r3, r3, #8
 80077ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	fa93 f3a3 	rbit	r3, r3
 80077d2:	61bb      	str	r3, [r7, #24]
  return result;
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	fab3 f383 	clz	r3, r3
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	fa01 f303 	lsl.w	r3, r1, r3
 80077e4:	431a      	orrs	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80077ea:	bf00      	nop
 80077ec:	3724      	adds	r7, #36	; 0x24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b088      	sub	sp, #32
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007800:	2300      	movs	r3, #0
 8007802:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8007804:	2300      	movs	r3, #0
 8007806:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	fa93 f3a3 	rbit	r3, r3
 8007814:	613b      	str	r3, [r7, #16]
  return result;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	fab3 f383 	clz	r3, r3
 800781c:	b2db      	uxtb	r3, r3
 800781e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007820:	e050      	b.n	80078c4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	2101      	movs	r1, #1
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	fa01 f303 	lsl.w	r3, r1, r3
 800782e:	4013      	ands	r3, r2
 8007830:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d042      	beq.n	80078be <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d003      	beq.n	8007848 <LL_GPIO_Init+0x52>
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d10d      	bne.n	8007864 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	461a      	mov	r2, r3
 800784e:	69b9      	ldr	r1, [r7, #24]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff ff12 	bl	800767a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	461a      	mov	r2, r3
 800785c:	69b9      	ldr	r1, [r7, #24]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fef3 	bl	800764a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	461a      	mov	r2, r3
 800786a:	69b9      	ldr	r1, [r7, #24]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff ff33 	bl	80076d8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d11a      	bne.n	80078b0 <LL_GPIO_Init+0xba>
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	fa93 f3a3 	rbit	r3, r3
 8007884:	60bb      	str	r3, [r7, #8]
  return result;
 8007886:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007888:	fab3 f383 	clz	r3, r3
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b07      	cmp	r3, #7
 8007890:	d807      	bhi.n	80078a2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	461a      	mov	r2, r3
 8007898:	69b9      	ldr	r1, [r7, #24]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff ff4b 	bl	8007736 <LL_GPIO_SetAFPin_0_7>
 80078a0:	e006      	b.n	80078b0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	461a      	mov	r2, r3
 80078a8:	69b9      	ldr	r1, [r7, #24]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff ff72 	bl	8007794 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	461a      	mov	r2, r3
 80078b6:	69b9      	ldr	r1, [r7, #24]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff fe97 	bl	80075ec <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	3301      	adds	r3, #1
 80078c2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	fa22 f303 	lsr.w	r3, r2, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1a7      	bne.n	8007822 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3720      	adds	r7, #32
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <LL_SPI_IsEnabled>:
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	d101      	bne.n	80078f4 <LL_SPI_IsEnabled+0x18>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <LL_SPI_IsEnabled+0x1a>
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <LL_SPI_SetCRCPolynomial>:
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	611a      	str	r2, [r3, #16]
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff ffd3 	bl	80078dc <LL_SPI_IsEnabled>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d139      	bne.n	80079b0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007944:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	6811      	ldr	r1, [r2, #0]
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	6852      	ldr	r2, [r2, #4]
 8007950:	4311      	orrs	r1, r2
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	6892      	ldr	r2, [r2, #8]
 8007956:	4311      	orrs	r1, r2
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	68d2      	ldr	r2, [r2, #12]
 800795c:	4311      	orrs	r1, r2
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	6912      	ldr	r2, [r2, #16]
 8007962:	4311      	orrs	r1, r2
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	6952      	ldr	r2, [r2, #20]
 8007968:	4311      	orrs	r1, r2
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	6992      	ldr	r2, [r2, #24]
 800796e:	4311      	orrs	r1, r2
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	69d2      	ldr	r2, [r2, #28]
 8007974:	4311      	orrs	r1, r2
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	6a12      	ldr	r2, [r2, #32]
 800797a:	430a      	orrs	r2, r1
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f023 0204 	bic.w	r2, r3, #4
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	0c1b      	lsrs	r3, r3, #16
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799e:	d105      	bne.n	80079ac <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff ffab 	bl	8007902 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	61da      	str	r2, [r3, #28]
  return status;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <__errno>:
 80079c8:	4b01      	ldr	r3, [pc, #4]	; (80079d0 <__errno+0x8>)
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	20000020 	.word	0x20000020

080079d4 <__libc_init_array>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	4e0d      	ldr	r6, [pc, #52]	; (8007a0c <__libc_init_array+0x38>)
 80079d8:	4c0d      	ldr	r4, [pc, #52]	; (8007a10 <__libc_init_array+0x3c>)
 80079da:	1ba4      	subs	r4, r4, r6
 80079dc:	10a4      	asrs	r4, r4, #2
 80079de:	2500      	movs	r5, #0
 80079e0:	42a5      	cmp	r5, r4
 80079e2:	d109      	bne.n	80079f8 <__libc_init_array+0x24>
 80079e4:	4e0b      	ldr	r6, [pc, #44]	; (8007a14 <__libc_init_array+0x40>)
 80079e6:	4c0c      	ldr	r4, [pc, #48]	; (8007a18 <__libc_init_array+0x44>)
 80079e8:	f001 f900 	bl	8008bec <_init>
 80079ec:	1ba4      	subs	r4, r4, r6
 80079ee:	10a4      	asrs	r4, r4, #2
 80079f0:	2500      	movs	r5, #0
 80079f2:	42a5      	cmp	r5, r4
 80079f4:	d105      	bne.n	8007a02 <__libc_init_array+0x2e>
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079fc:	4798      	blx	r3
 80079fe:	3501      	adds	r5, #1
 8007a00:	e7ee      	b.n	80079e0 <__libc_init_array+0xc>
 8007a02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a06:	4798      	blx	r3
 8007a08:	3501      	adds	r5, #1
 8007a0a:	e7f2      	b.n	80079f2 <__libc_init_array+0x1e>
 8007a0c:	08008d7c 	.word	0x08008d7c
 8007a10:	08008d7c 	.word	0x08008d7c
 8007a14:	08008d7c 	.word	0x08008d7c
 8007a18:	08008d80 	.word	0x08008d80

08007a1c <memset>:
 8007a1c:	4402      	add	r2, r0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d100      	bne.n	8007a26 <memset+0xa>
 8007a24:	4770      	bx	lr
 8007a26:	f803 1b01 	strb.w	r1, [r3], #1
 8007a2a:	e7f9      	b.n	8007a20 <memset+0x4>

08007a2c <sqrt>:
 8007a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a30:	ed2d 8b02 	vpush	{d8}
 8007a34:	b08b      	sub	sp, #44	; 0x2c
 8007a36:	ec55 4b10 	vmov	r4, r5, d0
 8007a3a:	f000 fa0f 	bl	8007e5c <__ieee754_sqrt>
 8007a3e:	4b26      	ldr	r3, [pc, #152]	; (8007ad8 <sqrt+0xac>)
 8007a40:	eeb0 8a40 	vmov.f32	s16, s0
 8007a44:	eef0 8a60 	vmov.f32	s17, s1
 8007a48:	f993 6000 	ldrsb.w	r6, [r3]
 8007a4c:	1c73      	adds	r3, r6, #1
 8007a4e:	d02a      	beq.n	8007aa6 <sqrt+0x7a>
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f9 f80c 	bl	8000a74 <__aeabi_dcmpun>
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	bb10      	cbnz	r0, 8007aa6 <sqrt+0x7a>
 8007a60:	f04f 0800 	mov.w	r8, #0
 8007a64:	f04f 0900 	mov.w	r9, #0
 8007a68:	4642      	mov	r2, r8
 8007a6a:	464b      	mov	r3, r9
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	f7f8 ffd8 	bl	8000a24 <__aeabi_dcmplt>
 8007a74:	b1b8      	cbz	r0, 8007aa6 <sqrt+0x7a>
 8007a76:	2301      	movs	r3, #1
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	4b18      	ldr	r3, [pc, #96]	; (8007adc <sqrt+0xb0>)
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	9708      	str	r7, [sp, #32]
 8007a80:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007a84:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007a88:	b9b6      	cbnz	r6, 8007ab8 <sqrt+0x8c>
 8007a8a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007a8e:	4668      	mov	r0, sp
 8007a90:	f000 feed 	bl	800886e <matherr>
 8007a94:	b1d0      	cbz	r0, 8007acc <sqrt+0xa0>
 8007a96:	9b08      	ldr	r3, [sp, #32]
 8007a98:	b11b      	cbz	r3, 8007aa2 <sqrt+0x76>
 8007a9a:	f7ff ff95 	bl	80079c8 <__errno>
 8007a9e:	9b08      	ldr	r3, [sp, #32]
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007aa6:	eeb0 0a48 	vmov.f32	s0, s16
 8007aaa:	eef0 0a68 	vmov.f32	s1, s17
 8007aae:	b00b      	add	sp, #44	; 0x2c
 8007ab0:	ecbd 8b02 	vpop	{d8}
 8007ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ab8:	4642      	mov	r2, r8
 8007aba:	464b      	mov	r3, r9
 8007abc:	4640      	mov	r0, r8
 8007abe:	4649      	mov	r1, r9
 8007ac0:	f7f8 fe68 	bl	8000794 <__aeabi_ddiv>
 8007ac4:	2e02      	cmp	r6, #2
 8007ac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007aca:	d1e0      	bne.n	8007a8e <sqrt+0x62>
 8007acc:	f7ff ff7c 	bl	80079c8 <__errno>
 8007ad0:	2321      	movs	r3, #33	; 0x21
 8007ad2:	6003      	str	r3, [r0, #0]
 8007ad4:	e7df      	b.n	8007a96 <sqrt+0x6a>
 8007ad6:	bf00      	nop
 8007ad8:	20000084 	.word	0x20000084
 8007adc:	08008d24 	.word	0x08008d24

08007ae0 <asinf>:
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	ed2d 8b02 	vpush	{d8}
 8007ae6:	4c27      	ldr	r4, [pc, #156]	; (8007b84 <asinf+0xa4>)
 8007ae8:	b08a      	sub	sp, #40	; 0x28
 8007aea:	eeb0 8a40 	vmov.f32	s16, s0
 8007aee:	f000 fa65 	bl	8007fbc <__ieee754_asinf>
 8007af2:	f994 3000 	ldrsb.w	r3, [r4]
 8007af6:	3301      	adds	r3, #1
 8007af8:	eef0 8a40 	vmov.f32	s17, s0
 8007afc:	d03c      	beq.n	8007b78 <asinf+0x98>
 8007afe:	eeb4 8a48 	vcmp.f32	s16, s16
 8007b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b06:	d637      	bvs.n	8007b78 <asinf+0x98>
 8007b08:	eeb0 0a48 	vmov.f32	s0, s16
 8007b0c:	f000 ff90 	bl	8008a30 <fabsf>
 8007b10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007b14:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1c:	dd2c      	ble.n	8007b78 <asinf+0x98>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	4b19      	ldr	r3, [pc, #100]	; (8007b88 <asinf+0xa8>)
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	ee18 0a10 	vmov	r0, s16
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	9308      	str	r3, [sp, #32]
 8007b2e:	f7f8 fcaf 	bl	8000490 <__aeabi_f2d>
 8007b32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b3a:	4814      	ldr	r0, [pc, #80]	; (8007b8c <asinf+0xac>)
 8007b3c:	f000 fe9c 	bl	8008878 <nan>
 8007b40:	f994 3000 	ldrsb.w	r3, [r4]
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007b4a:	d104      	bne.n	8007b56 <asinf+0x76>
 8007b4c:	f7ff ff3c 	bl	80079c8 <__errno>
 8007b50:	2321      	movs	r3, #33	; 0x21
 8007b52:	6003      	str	r3, [r0, #0]
 8007b54:	e004      	b.n	8007b60 <asinf+0x80>
 8007b56:	4668      	mov	r0, sp
 8007b58:	f000 fe89 	bl	800886e <matherr>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d0f5      	beq.n	8007b4c <asinf+0x6c>
 8007b60:	9b08      	ldr	r3, [sp, #32]
 8007b62:	b11b      	cbz	r3, 8007b6c <asinf+0x8c>
 8007b64:	f7ff ff30 	bl	80079c8 <__errno>
 8007b68:	9b08      	ldr	r3, [sp, #32]
 8007b6a:	6003      	str	r3, [r0, #0]
 8007b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b70:	f7f8 ff96 	bl	8000aa0 <__aeabi_d2f>
 8007b74:	ee08 0a90 	vmov	s17, r0
 8007b78:	eeb0 0a68 	vmov.f32	s0, s17
 8007b7c:	b00a      	add	sp, #40	; 0x28
 8007b7e:	ecbd 8b02 	vpop	{d8}
 8007b82:	bd10      	pop	{r4, pc}
 8007b84:	20000084 	.word	0x20000084
 8007b88:	08008d29 	.word	0x08008d29
 8007b8c:	08008d2e 	.word	0x08008d2e

08007b90 <atan2f>:
 8007b90:	f000 bafc 	b.w	800818c <__ieee754_atan2f>

08007b94 <powf>:
 8007b94:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8007b98:	ed2d 8b04 	vpush	{d8-d9}
 8007b9c:	4ca7      	ldr	r4, [pc, #668]	; (8007e3c <powf+0x2a8>)
 8007b9e:	b08a      	sub	sp, #40	; 0x28
 8007ba0:	eef0 8a40 	vmov.f32	s17, s0
 8007ba4:	eeb0 8a60 	vmov.f32	s16, s1
 8007ba8:	f000 fb9e 	bl	80082e8 <__ieee754_powf>
 8007bac:	f994 5000 	ldrsb.w	r5, [r4]
 8007bb0:	1c6b      	adds	r3, r5, #1
 8007bb2:	eeb0 9a40 	vmov.f32	s18, s0
 8007bb6:	4626      	mov	r6, r4
 8007bb8:	d05f      	beq.n	8007c7a <powf+0xe6>
 8007bba:	eeb4 8a48 	vcmp.f32	s16, s16
 8007bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc2:	d65a      	bvs.n	8007c7a <powf+0xe6>
 8007bc4:	eef4 8a68 	vcmp.f32	s17, s17
 8007bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bcc:	d721      	bvc.n	8007c12 <powf+0x7e>
 8007bce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd6:	d150      	bne.n	8007c7a <powf+0xe6>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	4b98      	ldr	r3, [pc, #608]	; (8007e40 <powf+0x2ac>)
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	ee18 0a90 	vmov	r0, s17
 8007be4:	2300      	movs	r3, #0
 8007be6:	9308      	str	r3, [sp, #32]
 8007be8:	f7f8 fc52 	bl	8000490 <__aeabi_f2d>
 8007bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bf0:	ee18 0a10 	vmov	r0, s16
 8007bf4:	f7f8 fc4c 	bl	8000490 <__aeabi_f2d>
 8007bf8:	4b92      	ldr	r3, [pc, #584]	; (8007e44 <powf+0x2b0>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2d02      	cmp	r5, #2
 8007bfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c06:	d032      	beq.n	8007c6e <powf+0xda>
 8007c08:	4668      	mov	r0, sp
 8007c0a:	f000 fe30 	bl	800886e <matherr>
 8007c0e:	bb40      	cbnz	r0, 8007c62 <powf+0xce>
 8007c10:	e065      	b.n	8007cde <powf+0x14a>
 8007c12:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8007e48 <powf+0x2b4>
 8007c16:	eef4 8a69 	vcmp.f32	s17, s19
 8007c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c1e:	d163      	bne.n	8007ce8 <powf+0x154>
 8007c20:	eeb4 8a69 	vcmp.f32	s16, s19
 8007c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c28:	d12e      	bne.n	8007c88 <powf+0xf4>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	4b84      	ldr	r3, [pc, #528]	; (8007e40 <powf+0x2ac>)
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	ee18 0a90 	vmov	r0, s17
 8007c36:	2300      	movs	r3, #0
 8007c38:	9308      	str	r3, [sp, #32]
 8007c3a:	f7f8 fc29 	bl	8000490 <__aeabi_f2d>
 8007c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c42:	ee18 0a10 	vmov	r0, s16
 8007c46:	f7f8 fc23 	bl	8000490 <__aeabi_f2d>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c56:	2d00      	cmp	r5, #0
 8007c58:	d0d6      	beq.n	8007c08 <powf+0x74>
 8007c5a:	4b7a      	ldr	r3, [pc, #488]	; (8007e44 <powf+0x2b0>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c62:	9b08      	ldr	r3, [sp, #32]
 8007c64:	b11b      	cbz	r3, 8007c6e <powf+0xda>
 8007c66:	f7ff feaf 	bl	80079c8 <__errno>
 8007c6a:	9b08      	ldr	r3, [sp, #32]
 8007c6c:	6003      	str	r3, [r0, #0]
 8007c6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c72:	f7f8 ff15 	bl	8000aa0 <__aeabi_d2f>
 8007c76:	ee09 0a10 	vmov	s18, r0
 8007c7a:	eeb0 0a49 	vmov.f32	s0, s18
 8007c7e:	b00a      	add	sp, #40	; 0x28
 8007c80:	ecbd 8b04 	vpop	{d8-d9}
 8007c84:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007c88:	eeb0 0a48 	vmov.f32	s0, s16
 8007c8c:	f000 fed7 	bl	8008a3e <finitef>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d0f2      	beq.n	8007c7a <powf+0xe6>
 8007c94:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c9c:	d5ed      	bpl.n	8007c7a <powf+0xe6>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	4b67      	ldr	r3, [pc, #412]	; (8007e40 <powf+0x2ac>)
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	ee18 0a90 	vmov	r0, s17
 8007caa:	2300      	movs	r3, #0
 8007cac:	9308      	str	r3, [sp, #32]
 8007cae:	f7f8 fbef 	bl	8000490 <__aeabi_f2d>
 8007cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cb6:	ee18 0a10 	vmov	r0, s16
 8007cba:	f7f8 fbe9 	bl	8000490 <__aeabi_f2d>
 8007cbe:	f994 3000 	ldrsb.w	r3, [r4]
 8007cc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cc6:	b923      	cbnz	r3, 8007cd2 <powf+0x13e>
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007cd0:	e79a      	b.n	8007c08 <powf+0x74>
 8007cd2:	495e      	ldr	r1, [pc, #376]	; (8007e4c <powf+0x2b8>)
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d194      	bne.n	8007c08 <powf+0x74>
 8007cde:	f7ff fe73 	bl	80079c8 <__errno>
 8007ce2:	2321      	movs	r3, #33	; 0x21
 8007ce4:	6003      	str	r3, [r0, #0]
 8007ce6:	e7bc      	b.n	8007c62 <powf+0xce>
 8007ce8:	f000 fea9 	bl	8008a3e <finitef>
 8007cec:	4605      	mov	r5, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d173      	bne.n	8007dda <powf+0x246>
 8007cf2:	eeb0 0a68 	vmov.f32	s0, s17
 8007cf6:	f000 fea2 	bl	8008a3e <finitef>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d06d      	beq.n	8007dda <powf+0x246>
 8007cfe:	eeb0 0a48 	vmov.f32	s0, s16
 8007d02:	f000 fe9c 	bl	8008a3e <finitef>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d067      	beq.n	8007dda <powf+0x246>
 8007d0a:	ee18 0a90 	vmov	r0, s17
 8007d0e:	f7f8 fbbf 	bl	8000490 <__aeabi_f2d>
 8007d12:	4680      	mov	r8, r0
 8007d14:	ee18 0a10 	vmov	r0, s16
 8007d18:	4689      	mov	r9, r1
 8007d1a:	f7f8 fbb9 	bl	8000490 <__aeabi_f2d>
 8007d1e:	eeb4 9a49 	vcmp.f32	s18, s18
 8007d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d26:	f994 4000 	ldrsb.w	r4, [r4]
 8007d2a:	4b45      	ldr	r3, [pc, #276]	; (8007e40 <powf+0x2ac>)
 8007d2c:	d713      	bvc.n	8007d56 <powf+0x1c2>
 8007d2e:	2201      	movs	r2, #1
 8007d30:	e9cd 2300 	strd	r2, r3, [sp]
 8007d34:	9508      	str	r5, [sp, #32]
 8007d36:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007d3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d3e:	2c00      	cmp	r4, #0
 8007d40:	d0c2      	beq.n	8007cc8 <powf+0x134>
 8007d42:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8007d46:	ee17 0a90 	vmov	r0, s15
 8007d4a:	f7f8 fba1 	bl	8000490 <__aeabi_f2d>
 8007d4e:	2c02      	cmp	r4, #2
 8007d50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d54:	e7c2      	b.n	8007cdc <powf+0x148>
 8007d56:	2203      	movs	r2, #3
 8007d58:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007d5c:	e9cd 2300 	strd	r2, r3, [sp]
 8007d60:	9508      	str	r5, [sp, #32]
 8007d62:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007d66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d6a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007d6e:	b9fc      	cbnz	r4, 8007db0 <powf+0x21c>
 8007d70:	4b37      	ldr	r3, [pc, #220]	; (8007e50 <powf+0x2bc>)
 8007d72:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007d76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d82:	d553      	bpl.n	8007e2c <powf+0x298>
 8007d84:	eeb0 0a48 	vmov.f32	s0, s16
 8007d88:	f000 fe6a 	bl	8008a60 <rintf>
 8007d8c:	eeb4 0a48 	vcmp.f32	s0, s16
 8007d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d94:	d004      	beq.n	8007da0 <powf+0x20c>
 8007d96:	4b2f      	ldr	r3, [pc, #188]	; (8007e54 <powf+0x2c0>)
 8007d98:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007d9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007da0:	f996 3000 	ldrsb.w	r3, [r6]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d141      	bne.n	8007e2c <powf+0x298>
 8007da8:	f7ff fe0e 	bl	80079c8 <__errno>
 8007dac:	2322      	movs	r3, #34	; 0x22
 8007dae:	e799      	b.n	8007ce4 <powf+0x150>
 8007db0:	4b29      	ldr	r3, [pc, #164]	; (8007e58 <powf+0x2c4>)
 8007db2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007db6:	2200      	movs	r2, #0
 8007db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007dc0:	d5ee      	bpl.n	8007da0 <powf+0x20c>
 8007dc2:	eeb0 0a48 	vmov.f32	s0, s16
 8007dc6:	f000 fe4b 	bl	8008a60 <rintf>
 8007dca:	eeb4 0a48 	vcmp.f32	s0, s16
 8007dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd2:	d0e5      	beq.n	8007da0 <powf+0x20c>
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <powf+0x2b8>)
 8007dd8:	e7e0      	b.n	8007d9c <powf+0x208>
 8007dda:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de2:	f47f af4a 	bne.w	8007c7a <powf+0xe6>
 8007de6:	eeb0 0a68 	vmov.f32	s0, s17
 8007dea:	f000 fe28 	bl	8008a3e <finitef>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f43f af43 	beq.w	8007c7a <powf+0xe6>
 8007df4:	eeb0 0a48 	vmov.f32	s0, s16
 8007df8:	f000 fe21 	bl	8008a3e <finitef>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f43f af3c 	beq.w	8007c7a <powf+0xe6>
 8007e02:	2304      	movs	r3, #4
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4b0e      	ldr	r3, [pc, #56]	; (8007e40 <powf+0x2ac>)
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	ee18 0a90 	vmov	r0, s17
 8007e0e:	2300      	movs	r3, #0
 8007e10:	9308      	str	r3, [sp, #32]
 8007e12:	f7f8 fb3d 	bl	8000490 <__aeabi_f2d>
 8007e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1a:	ee18 0a10 	vmov	r0, s16
 8007e1e:	f7f8 fb37 	bl	8000490 <__aeabi_f2d>
 8007e22:	2200      	movs	r2, #0
 8007e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e7b7      	b.n	8007d9c <powf+0x208>
 8007e2c:	4668      	mov	r0, sp
 8007e2e:	f000 fd1e 	bl	800886e <matherr>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	f47f af15 	bne.w	8007c62 <powf+0xce>
 8007e38:	e7b6      	b.n	8007da8 <powf+0x214>
 8007e3a:	bf00      	nop
 8007e3c:	20000084 	.word	0x20000084
 8007e40:	08008d2f 	.word	0x08008d2f
 8007e44:	3ff00000 	.word	0x3ff00000
 8007e48:	00000000 	.word	0x00000000
 8007e4c:	fff00000 	.word	0xfff00000
 8007e50:	47efffff 	.word	0x47efffff
 8007e54:	c7efffff 	.word	0xc7efffff
 8007e58:	7ff00000 	.word	0x7ff00000

08007e5c <__ieee754_sqrt>:
 8007e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e60:	4955      	ldr	r1, [pc, #340]	; (8007fb8 <__ieee754_sqrt+0x15c>)
 8007e62:	ec55 4b10 	vmov	r4, r5, d0
 8007e66:	43a9      	bics	r1, r5
 8007e68:	462b      	mov	r3, r5
 8007e6a:	462a      	mov	r2, r5
 8007e6c:	d112      	bne.n	8007e94 <__ieee754_sqrt+0x38>
 8007e6e:	ee10 2a10 	vmov	r2, s0
 8007e72:	ee10 0a10 	vmov	r0, s0
 8007e76:	4629      	mov	r1, r5
 8007e78:	f7f8 fb62 	bl	8000540 <__aeabi_dmul>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4620      	mov	r0, r4
 8007e82:	4629      	mov	r1, r5
 8007e84:	f7f8 f9a6 	bl	80001d4 <__adddf3>
 8007e88:	4604      	mov	r4, r0
 8007e8a:	460d      	mov	r5, r1
 8007e8c:	ec45 4b10 	vmov	d0, r4, r5
 8007e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e94:	2d00      	cmp	r5, #0
 8007e96:	ee10 0a10 	vmov	r0, s0
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	dc0f      	bgt.n	8007ebe <__ieee754_sqrt+0x62>
 8007e9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ea2:	4330      	orrs	r0, r6
 8007ea4:	d0f2      	beq.n	8007e8c <__ieee754_sqrt+0x30>
 8007ea6:	b155      	cbz	r5, 8007ebe <__ieee754_sqrt+0x62>
 8007ea8:	ee10 2a10 	vmov	r2, s0
 8007eac:	4620      	mov	r0, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 f98e 	bl	80001d0 <__aeabi_dsub>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	f7f8 fc6c 	bl	8000794 <__aeabi_ddiv>
 8007ebc:	e7e4      	b.n	8007e88 <__ieee754_sqrt+0x2c>
 8007ebe:	151b      	asrs	r3, r3, #20
 8007ec0:	d073      	beq.n	8007faa <__ieee754_sqrt+0x14e>
 8007ec2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ec6:	07dd      	lsls	r5, r3, #31
 8007ec8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007ecc:	bf48      	it	mi
 8007ece:	0fc8      	lsrmi	r0, r1, #31
 8007ed0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007ed4:	bf44      	itt	mi
 8007ed6:	0049      	lslmi	r1, r1, #1
 8007ed8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007edc:	2500      	movs	r5, #0
 8007ede:	1058      	asrs	r0, r3, #1
 8007ee0:	0fcb      	lsrs	r3, r1, #31
 8007ee2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007ee6:	0049      	lsls	r1, r1, #1
 8007ee8:	2316      	movs	r3, #22
 8007eea:	462c      	mov	r4, r5
 8007eec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007ef0:	19a7      	adds	r7, r4, r6
 8007ef2:	4297      	cmp	r7, r2
 8007ef4:	bfde      	ittt	le
 8007ef6:	19bc      	addle	r4, r7, r6
 8007ef8:	1bd2      	suble	r2, r2, r7
 8007efa:	19ad      	addle	r5, r5, r6
 8007efc:	0fcf      	lsrs	r7, r1, #31
 8007efe:	3b01      	subs	r3, #1
 8007f00:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007f04:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007f08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007f0c:	d1f0      	bne.n	8007ef0 <__ieee754_sqrt+0x94>
 8007f0e:	f04f 0c20 	mov.w	ip, #32
 8007f12:	469e      	mov	lr, r3
 8007f14:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007f18:	42a2      	cmp	r2, r4
 8007f1a:	eb06 070e 	add.w	r7, r6, lr
 8007f1e:	dc02      	bgt.n	8007f26 <__ieee754_sqrt+0xca>
 8007f20:	d112      	bne.n	8007f48 <__ieee754_sqrt+0xec>
 8007f22:	428f      	cmp	r7, r1
 8007f24:	d810      	bhi.n	8007f48 <__ieee754_sqrt+0xec>
 8007f26:	2f00      	cmp	r7, #0
 8007f28:	eb07 0e06 	add.w	lr, r7, r6
 8007f2c:	da42      	bge.n	8007fb4 <__ieee754_sqrt+0x158>
 8007f2e:	f1be 0f00 	cmp.w	lr, #0
 8007f32:	db3f      	blt.n	8007fb4 <__ieee754_sqrt+0x158>
 8007f34:	f104 0801 	add.w	r8, r4, #1
 8007f38:	1b12      	subs	r2, r2, r4
 8007f3a:	428f      	cmp	r7, r1
 8007f3c:	bf88      	it	hi
 8007f3e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007f42:	1bc9      	subs	r1, r1, r7
 8007f44:	4433      	add	r3, r6
 8007f46:	4644      	mov	r4, r8
 8007f48:	0052      	lsls	r2, r2, #1
 8007f4a:	f1bc 0c01 	subs.w	ip, ip, #1
 8007f4e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007f52:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007f56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007f5a:	d1dd      	bne.n	8007f18 <__ieee754_sqrt+0xbc>
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	d006      	beq.n	8007f6e <__ieee754_sqrt+0x112>
 8007f60:	1c5c      	adds	r4, r3, #1
 8007f62:	bf13      	iteet	ne
 8007f64:	3301      	addne	r3, #1
 8007f66:	3501      	addeq	r5, #1
 8007f68:	4663      	moveq	r3, ip
 8007f6a:	f023 0301 	bicne.w	r3, r3, #1
 8007f6e:	106a      	asrs	r2, r5, #1
 8007f70:	085b      	lsrs	r3, r3, #1
 8007f72:	07e9      	lsls	r1, r5, #31
 8007f74:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007f78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007f7c:	bf48      	it	mi
 8007f7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007f82:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007f86:	461c      	mov	r4, r3
 8007f88:	e780      	b.n	8007e8c <__ieee754_sqrt+0x30>
 8007f8a:	0aca      	lsrs	r2, r1, #11
 8007f8c:	3815      	subs	r0, #21
 8007f8e:	0549      	lsls	r1, r1, #21
 8007f90:	2a00      	cmp	r2, #0
 8007f92:	d0fa      	beq.n	8007f8a <__ieee754_sqrt+0x12e>
 8007f94:	02d6      	lsls	r6, r2, #11
 8007f96:	d50a      	bpl.n	8007fae <__ieee754_sqrt+0x152>
 8007f98:	f1c3 0420 	rsb	r4, r3, #32
 8007f9c:	fa21 f404 	lsr.w	r4, r1, r4
 8007fa0:	1e5d      	subs	r5, r3, #1
 8007fa2:	4099      	lsls	r1, r3
 8007fa4:	4322      	orrs	r2, r4
 8007fa6:	1b43      	subs	r3, r0, r5
 8007fa8:	e78b      	b.n	8007ec2 <__ieee754_sqrt+0x66>
 8007faa:	4618      	mov	r0, r3
 8007fac:	e7f0      	b.n	8007f90 <__ieee754_sqrt+0x134>
 8007fae:	0052      	lsls	r2, r2, #1
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	e7ef      	b.n	8007f94 <__ieee754_sqrt+0x138>
 8007fb4:	46a0      	mov	r8, r4
 8007fb6:	e7bf      	b.n	8007f38 <__ieee754_sqrt+0xdc>
 8007fb8:	7ff00000 	.word	0x7ff00000

08007fbc <__ieee754_asinf>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	ee10 5a10 	vmov	r5, s0
 8007fc2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007fc6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007fca:	ed2d 8b04 	vpush	{d8-d9}
 8007fce:	d10c      	bne.n	8007fea <__ieee754_asinf+0x2e>
 8007fd0:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800814c <__ieee754_asinf+0x190>
 8007fd4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8008150 <__ieee754_asinf+0x194>
 8007fd8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007fdc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8007fe4:	ecbd 8b04 	vpop	{d8-d9}
 8007fe8:	bd38      	pop	{r3, r4, r5, pc}
 8007fea:	dd04      	ble.n	8007ff6 <__ieee754_asinf+0x3a>
 8007fec:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007ff0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007ff4:	e7f6      	b.n	8007fe4 <__ieee754_asinf+0x28>
 8007ff6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007ffa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8007ffe:	da0b      	bge.n	8008018 <__ieee754_asinf+0x5c>
 8008000:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8008004:	da52      	bge.n	80080ac <__ieee754_asinf+0xf0>
 8008006:	eddf 7a53 	vldr	s15, [pc, #332]	; 8008154 <__ieee754_asinf+0x198>
 800800a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800800e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008016:	dce5      	bgt.n	8007fe4 <__ieee754_asinf+0x28>
 8008018:	f000 fd0a 	bl	8008a30 <fabsf>
 800801c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8008020:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008024:	ee20 8a08 	vmul.f32	s16, s0, s16
 8008028:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8008158 <__ieee754_asinf+0x19c>
 800802c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800815c <__ieee754_asinf+0x1a0>
 8008030:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8008160 <__ieee754_asinf+0x1a4>
 8008034:	eea8 7a27 	vfma.f32	s14, s16, s15
 8008038:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8008164 <__ieee754_asinf+0x1a8>
 800803c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008040:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008168 <__ieee754_asinf+0x1ac>
 8008044:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008048:	eddf 7a48 	vldr	s15, [pc, #288]	; 800816c <__ieee754_asinf+0x1b0>
 800804c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008050:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008170 <__ieee754_asinf+0x1b4>
 8008054:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008058:	eddf 7a46 	vldr	s15, [pc, #280]	; 8008174 <__ieee754_asinf+0x1b8>
 800805c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8008060:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8008178 <__ieee754_asinf+0x1bc>
 8008064:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008068:	eddf 7a44 	vldr	s15, [pc, #272]	; 800817c <__ieee754_asinf+0x1c0>
 800806c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008070:	eeb0 0a48 	vmov.f32	s0, s16
 8008074:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008078:	f000 fbf6 	bl	8008868 <__ieee754_sqrtf>
 800807c:	4b40      	ldr	r3, [pc, #256]	; (8008180 <__ieee754_asinf+0x1c4>)
 800807e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8008082:	429c      	cmp	r4, r3
 8008084:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008088:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800808c:	dd3d      	ble.n	800810a <__ieee754_asinf+0x14e>
 800808e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8008092:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8008184 <__ieee754_asinf+0x1c8>
 8008096:	eee0 7a07 	vfma.f32	s15, s0, s14
 800809a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8008150 <__ieee754_asinf+0x194>
 800809e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80080a2:	2d00      	cmp	r5, #0
 80080a4:	bfd8      	it	le
 80080a6:	eeb1 0a40 	vnegle.f32	s0, s0
 80080aa:	e79b      	b.n	8007fe4 <__ieee754_asinf+0x28>
 80080ac:	ee60 7a00 	vmul.f32	s15, s0, s0
 80080b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008158 <__ieee754_asinf+0x19c>
 80080b4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800815c <__ieee754_asinf+0x1a0>
 80080b8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8008170 <__ieee754_asinf+0x1b4>
 80080bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80080c0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8008164 <__ieee754_asinf+0x1a8>
 80080c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80080c8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8008168 <__ieee754_asinf+0x1ac>
 80080cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080d0:	eddf 6a26 	vldr	s13, [pc, #152]	; 800816c <__ieee754_asinf+0x1b0>
 80080d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80080d8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008160 <__ieee754_asinf+0x1a4>
 80080dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080e0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008174 <__ieee754_asinf+0x1b8>
 80080e4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80080e8:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8008178 <__ieee754_asinf+0x1bc>
 80080ec:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80080f0:	eddf 6a22 	vldr	s13, [pc, #136]	; 800817c <__ieee754_asinf+0x1c0>
 80080f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80080f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080fc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8008100:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8008104:	eea0 0a27 	vfma.f32	s0, s0, s15
 8008108:	e76c      	b.n	8007fe4 <__ieee754_asinf+0x28>
 800810a:	ee10 3a10 	vmov	r3, s0
 800810e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008112:	f023 030f 	bic.w	r3, r3, #15
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef1 6a67 	vneg.f32	s13, s15
 800811e:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8008122:	ee70 5a00 	vadd.f32	s11, s0, s0
 8008126:	ee37 0a80 	vadd.f32	s0, s15, s0
 800812a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800814c <__ieee754_asinf+0x190>
 800812e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8008132:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8008188 <__ieee754_asinf+0x1cc>
 8008136:	eee5 7a47 	vfms.f32	s15, s10, s14
 800813a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800813e:	eeb0 6a40 	vmov.f32	s12, s0
 8008142:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008146:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800814a:	e7a8      	b.n	800809e <__ieee754_asinf+0xe2>
 800814c:	b33bbd2e 	.word	0xb33bbd2e
 8008150:	3fc90fdb 	.word	0x3fc90fdb
 8008154:	7149f2ca 	.word	0x7149f2ca
 8008158:	3811ef08 	.word	0x3811ef08
 800815c:	3a4f7f04 	.word	0x3a4f7f04
 8008160:	3e2aaaab 	.word	0x3e2aaaab
 8008164:	bd241146 	.word	0xbd241146
 8008168:	3e4e0aa8 	.word	0x3e4e0aa8
 800816c:	bea6b090 	.word	0xbea6b090
 8008170:	3d9dc62e 	.word	0x3d9dc62e
 8008174:	bf303361 	.word	0xbf303361
 8008178:	4001572d 	.word	0x4001572d
 800817c:	c019d139 	.word	0xc019d139
 8008180:	3f799999 	.word	0x3f799999
 8008184:	333bbd2e 	.word	0x333bbd2e
 8008188:	3f490fdb 	.word	0x3f490fdb

0800818c <__ieee754_atan2f>:
 800818c:	ee10 2a90 	vmov	r2, s1
 8008190:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008194:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008198:	b510      	push	{r4, lr}
 800819a:	eef0 7a40 	vmov.f32	s15, s0
 800819e:	dc06      	bgt.n	80081ae <__ieee754_atan2f+0x22>
 80081a0:	ee10 0a10 	vmov	r0, s0
 80081a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80081a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80081ac:	dd04      	ble.n	80081b8 <__ieee754_atan2f+0x2c>
 80081ae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80081b2:	eeb0 0a67 	vmov.f32	s0, s15
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80081bc:	d103      	bne.n	80081c6 <__ieee754_atan2f+0x3a>
 80081be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c2:	f000 bb61 	b.w	8008888 <atanf>
 80081c6:	1794      	asrs	r4, r2, #30
 80081c8:	f004 0402 	and.w	r4, r4, #2
 80081cc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80081d0:	b943      	cbnz	r3, 80081e4 <__ieee754_atan2f+0x58>
 80081d2:	2c02      	cmp	r4, #2
 80081d4:	d06e      	beq.n	80082b4 <__ieee754_atan2f+0x128>
 80081d6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80082bc <__ieee754_atan2f+0x130>
 80081da:	2c03      	cmp	r4, #3
 80081dc:	bf08      	it	eq
 80081de:	eef0 7a47 	vmoveq.f32	s15, s14
 80081e2:	e7e6      	b.n	80081b2 <__ieee754_atan2f+0x26>
 80081e4:	b941      	cbnz	r1, 80081f8 <__ieee754_atan2f+0x6c>
 80081e6:	eddf 7a36 	vldr	s15, [pc, #216]	; 80082c0 <__ieee754_atan2f+0x134>
 80081ea:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80082c4 <__ieee754_atan2f+0x138>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	bfb8      	it	lt
 80081f2:	eef0 7a47 	vmovlt.f32	s15, s14
 80081f6:	e7dc      	b.n	80081b2 <__ieee754_atan2f+0x26>
 80081f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80081fc:	d122      	bne.n	8008244 <__ieee754_atan2f+0xb8>
 80081fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008202:	d112      	bne.n	800822a <__ieee754_atan2f+0x9e>
 8008204:	2c02      	cmp	r4, #2
 8008206:	d00a      	beq.n	800821e <__ieee754_atan2f+0x92>
 8008208:	2c03      	cmp	r4, #3
 800820a:	d00b      	beq.n	8008224 <__ieee754_atan2f+0x98>
 800820c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80082c8 <__ieee754_atan2f+0x13c>
 8008210:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80082cc <__ieee754_atan2f+0x140>
 8008214:	2c01      	cmp	r4, #1
 8008216:	bf18      	it	ne
 8008218:	eef0 7a47 	vmovne.f32	s15, s14
 800821c:	e7c9      	b.n	80081b2 <__ieee754_atan2f+0x26>
 800821e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80082d0 <__ieee754_atan2f+0x144>
 8008222:	e7c6      	b.n	80081b2 <__ieee754_atan2f+0x26>
 8008224:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80082d4 <__ieee754_atan2f+0x148>
 8008228:	e7c3      	b.n	80081b2 <__ieee754_atan2f+0x26>
 800822a:	2c02      	cmp	r4, #2
 800822c:	d042      	beq.n	80082b4 <__ieee754_atan2f+0x128>
 800822e:	2c03      	cmp	r4, #3
 8008230:	d005      	beq.n	800823e <__ieee754_atan2f+0xb2>
 8008232:	2c01      	cmp	r4, #1
 8008234:	eddf 7a28 	vldr	s15, [pc, #160]	; 80082d8 <__ieee754_atan2f+0x14c>
 8008238:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80082dc <__ieee754_atan2f+0x150>
 800823c:	e7eb      	b.n	8008216 <__ieee754_atan2f+0x8a>
 800823e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80082bc <__ieee754_atan2f+0x130>
 8008242:	e7b6      	b.n	80081b2 <__ieee754_atan2f+0x26>
 8008244:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008248:	d0cd      	beq.n	80081e6 <__ieee754_atan2f+0x5a>
 800824a:	1a5b      	subs	r3, r3, r1
 800824c:	15db      	asrs	r3, r3, #23
 800824e:	2b3c      	cmp	r3, #60	; 0x3c
 8008250:	dc1a      	bgt.n	8008288 <__ieee754_atan2f+0xfc>
 8008252:	2a00      	cmp	r2, #0
 8008254:	da01      	bge.n	800825a <__ieee754_atan2f+0xce>
 8008256:	333c      	adds	r3, #60	; 0x3c
 8008258:	db19      	blt.n	800828e <__ieee754_atan2f+0x102>
 800825a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800825e:	f000 fbe7 	bl	8008a30 <fabsf>
 8008262:	f000 fb11 	bl	8008888 <atanf>
 8008266:	eef0 7a40 	vmov.f32	s15, s0
 800826a:	2c01      	cmp	r4, #1
 800826c:	d012      	beq.n	8008294 <__ieee754_atan2f+0x108>
 800826e:	2c02      	cmp	r4, #2
 8008270:	d017      	beq.n	80082a2 <__ieee754_atan2f+0x116>
 8008272:	2c00      	cmp	r4, #0
 8008274:	d09d      	beq.n	80081b2 <__ieee754_atan2f+0x26>
 8008276:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80082e0 <__ieee754_atan2f+0x154>
 800827a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800827e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80082e4 <__ieee754_atan2f+0x158>
 8008282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008286:	e794      	b.n	80081b2 <__ieee754_atan2f+0x26>
 8008288:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80082c0 <__ieee754_atan2f+0x134>
 800828c:	e7ed      	b.n	800826a <__ieee754_atan2f+0xde>
 800828e:	eddf 7a13 	vldr	s15, [pc, #76]	; 80082dc <__ieee754_atan2f+0x150>
 8008292:	e7ea      	b.n	800826a <__ieee754_atan2f+0xde>
 8008294:	ee17 3a90 	vmov	r3, s15
 8008298:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800829c:	ee07 3a90 	vmov	s15, r3
 80082a0:	e787      	b.n	80081b2 <__ieee754_atan2f+0x26>
 80082a2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80082e0 <__ieee754_atan2f+0x154>
 80082a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80082e4 <__ieee754_atan2f+0x158>
 80082ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082b2:	e77e      	b.n	80081b2 <__ieee754_atan2f+0x26>
 80082b4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80082e4 <__ieee754_atan2f+0x158>
 80082b8:	e77b      	b.n	80081b2 <__ieee754_atan2f+0x26>
 80082ba:	bf00      	nop
 80082bc:	c0490fdb 	.word	0xc0490fdb
 80082c0:	3fc90fdb 	.word	0x3fc90fdb
 80082c4:	bfc90fdb 	.word	0xbfc90fdb
 80082c8:	bf490fdb 	.word	0xbf490fdb
 80082cc:	3f490fdb 	.word	0x3f490fdb
 80082d0:	4016cbe4 	.word	0x4016cbe4
 80082d4:	c016cbe4 	.word	0xc016cbe4
 80082d8:	80000000 	.word	0x80000000
 80082dc:	00000000 	.word	0x00000000
 80082e0:	33bbbd2e 	.word	0x33bbbd2e
 80082e4:	40490fdb 	.word	0x40490fdb

080082e8 <__ieee754_powf>:
 80082e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ec:	ee10 5a90 	vmov	r5, s1
 80082f0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80082f4:	ed2d 8b02 	vpush	{d8}
 80082f8:	eeb0 8a40 	vmov.f32	s16, s0
 80082fc:	eef0 8a60 	vmov.f32	s17, s1
 8008300:	f000 8293 	beq.w	800882a <__ieee754_powf+0x542>
 8008304:	ee10 8a10 	vmov	r8, s0
 8008308:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800830c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008310:	dc06      	bgt.n	8008320 <__ieee754_powf+0x38>
 8008312:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8008316:	dd0a      	ble.n	800832e <__ieee754_powf+0x46>
 8008318:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800831c:	f000 8285 	beq.w	800882a <__ieee754_powf+0x542>
 8008320:	ecbd 8b02 	vpop	{d8}
 8008324:	48d9      	ldr	r0, [pc, #868]	; (800868c <__ieee754_powf+0x3a4>)
 8008326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800832a:	f000 bb93 	b.w	8008a54 <nanf>
 800832e:	f1b8 0f00 	cmp.w	r8, #0
 8008332:	da1d      	bge.n	8008370 <__ieee754_powf+0x88>
 8008334:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8008338:	da2c      	bge.n	8008394 <__ieee754_powf+0xac>
 800833a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800833e:	db30      	blt.n	80083a2 <__ieee754_powf+0xba>
 8008340:	15fb      	asrs	r3, r7, #23
 8008342:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008346:	fa47 f603 	asr.w	r6, r7, r3
 800834a:	fa06 f303 	lsl.w	r3, r6, r3
 800834e:	42bb      	cmp	r3, r7
 8008350:	d127      	bne.n	80083a2 <__ieee754_powf+0xba>
 8008352:	f006 0601 	and.w	r6, r6, #1
 8008356:	f1c6 0602 	rsb	r6, r6, #2
 800835a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800835e:	d122      	bne.n	80083a6 <__ieee754_powf+0xbe>
 8008360:	2d00      	cmp	r5, #0
 8008362:	f280 8268 	bge.w	8008836 <__ieee754_powf+0x54e>
 8008366:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800836a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800836e:	e00d      	b.n	800838c <__ieee754_powf+0xa4>
 8008370:	2600      	movs	r6, #0
 8008372:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8008376:	d1f0      	bne.n	800835a <__ieee754_powf+0x72>
 8008378:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800837c:	f000 8255 	beq.w	800882a <__ieee754_powf+0x542>
 8008380:	dd0a      	ble.n	8008398 <__ieee754_powf+0xb0>
 8008382:	2d00      	cmp	r5, #0
 8008384:	f280 8254 	bge.w	8008830 <__ieee754_powf+0x548>
 8008388:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8008690 <__ieee754_powf+0x3a8>
 800838c:	ecbd 8b02 	vpop	{d8}
 8008390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008394:	2602      	movs	r6, #2
 8008396:	e7ec      	b.n	8008372 <__ieee754_powf+0x8a>
 8008398:	2d00      	cmp	r5, #0
 800839a:	daf5      	bge.n	8008388 <__ieee754_powf+0xa0>
 800839c:	eeb1 0a68 	vneg.f32	s0, s17
 80083a0:	e7f4      	b.n	800838c <__ieee754_powf+0xa4>
 80083a2:	2600      	movs	r6, #0
 80083a4:	e7d9      	b.n	800835a <__ieee754_powf+0x72>
 80083a6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80083aa:	d102      	bne.n	80083b2 <__ieee754_powf+0xca>
 80083ac:	ee28 0a08 	vmul.f32	s0, s16, s16
 80083b0:	e7ec      	b.n	800838c <__ieee754_powf+0xa4>
 80083b2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80083b6:	eeb0 0a48 	vmov.f32	s0, s16
 80083ba:	d108      	bne.n	80083ce <__ieee754_powf+0xe6>
 80083bc:	f1b8 0f00 	cmp.w	r8, #0
 80083c0:	db05      	blt.n	80083ce <__ieee754_powf+0xe6>
 80083c2:	ecbd 8b02 	vpop	{d8}
 80083c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ca:	f000 ba4d 	b.w	8008868 <__ieee754_sqrtf>
 80083ce:	f000 fb2f 	bl	8008a30 <fabsf>
 80083d2:	b124      	cbz	r4, 80083de <__ieee754_powf+0xf6>
 80083d4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80083d8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80083dc:	d117      	bne.n	800840e <__ieee754_powf+0x126>
 80083de:	2d00      	cmp	r5, #0
 80083e0:	bfbc      	itt	lt
 80083e2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80083e6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80083ea:	f1b8 0f00 	cmp.w	r8, #0
 80083ee:	dacd      	bge.n	800838c <__ieee754_powf+0xa4>
 80083f0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80083f4:	ea54 0306 	orrs.w	r3, r4, r6
 80083f8:	d104      	bne.n	8008404 <__ieee754_powf+0x11c>
 80083fa:	ee70 7a40 	vsub.f32	s15, s0, s0
 80083fe:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008402:	e7c3      	b.n	800838c <__ieee754_powf+0xa4>
 8008404:	2e01      	cmp	r6, #1
 8008406:	d1c1      	bne.n	800838c <__ieee754_powf+0xa4>
 8008408:	eeb1 0a40 	vneg.f32	s0, s0
 800840c:	e7be      	b.n	800838c <__ieee754_powf+0xa4>
 800840e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8008412:	3801      	subs	r0, #1
 8008414:	ea56 0300 	orrs.w	r3, r6, r0
 8008418:	d104      	bne.n	8008424 <__ieee754_powf+0x13c>
 800841a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800841e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008422:	e7b3      	b.n	800838c <__ieee754_powf+0xa4>
 8008424:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8008428:	dd6d      	ble.n	8008506 <__ieee754_powf+0x21e>
 800842a:	4b9a      	ldr	r3, [pc, #616]	; (8008694 <__ieee754_powf+0x3ac>)
 800842c:	429c      	cmp	r4, r3
 800842e:	dc06      	bgt.n	800843e <__ieee754_powf+0x156>
 8008430:	2d00      	cmp	r5, #0
 8008432:	daa9      	bge.n	8008388 <__ieee754_powf+0xa0>
 8008434:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8008698 <__ieee754_powf+0x3b0>
 8008438:	ee20 0a00 	vmul.f32	s0, s0, s0
 800843c:	e7a6      	b.n	800838c <__ieee754_powf+0xa4>
 800843e:	4b97      	ldr	r3, [pc, #604]	; (800869c <__ieee754_powf+0x3b4>)
 8008440:	429c      	cmp	r4, r3
 8008442:	dd02      	ble.n	800844a <__ieee754_powf+0x162>
 8008444:	2d00      	cmp	r5, #0
 8008446:	dcf5      	bgt.n	8008434 <__ieee754_powf+0x14c>
 8008448:	e79e      	b.n	8008388 <__ieee754_powf+0xa0>
 800844a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800844e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008452:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80086a0 <__ieee754_powf+0x3b8>
 8008456:	eef1 6a40 	vneg.f32	s13, s0
 800845a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800845e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008462:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008466:	eee7 7a40 	vfms.f32	s15, s14, s0
 800846a:	ee60 0a00 	vmul.f32	s1, s0, s0
 800846e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80086a4 <__ieee754_powf+0x3bc>
 8008472:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8008476:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80086a8 <__ieee754_powf+0x3c0>
 800847a:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800847e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008482:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80086ac <__ieee754_powf+0x3c4>
 8008486:	eeb0 6a67 	vmov.f32	s12, s15
 800848a:	eea0 6a07 	vfma.f32	s12, s0, s14
 800848e:	ee16 3a10 	vmov	r3, s12
 8008492:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008496:	f023 030f 	bic.w	r3, r3, #15
 800849a:	ee00 3a90 	vmov	s1, r3
 800849e:	eee6 0a87 	vfma.f32	s1, s13, s14
 80084a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80084a6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80084aa:	f025 050f 	bic.w	r5, r5, #15
 80084ae:	ee07 5a10 	vmov	s14, r5
 80084b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80084b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eee7 0a27 	vfma.f32	s1, s14, s15
 80084c2:	3e01      	subs	r6, #1
 80084c4:	ea56 0200 	orrs.w	r2, r6, r0
 80084c8:	ee07 5a10 	vmov	s14, r5
 80084cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084d0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80084d4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80084d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80084dc:	ee17 4a10 	vmov	r4, s14
 80084e0:	bf08      	it	eq
 80084e2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80084e6:	2c00      	cmp	r4, #0
 80084e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80084ec:	f340 8184 	ble.w	80087f8 <__ieee754_powf+0x510>
 80084f0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80084f4:	f340 80fc 	ble.w	80086f0 <__ieee754_powf+0x408>
 80084f8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8008698 <__ieee754_powf+0x3b0>
 80084fc:	ee28 0a27 	vmul.f32	s0, s16, s15
 8008500:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008504:	e742      	b.n	800838c <__ieee754_powf+0xa4>
 8008506:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800850a:	bfbf      	itttt	lt
 800850c:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80086b0 <__ieee754_powf+0x3c8>
 8008510:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8008514:	f06f 0217 	mvnlt.w	r2, #23
 8008518:	ee17 4a90 	vmovlt	r4, s15
 800851c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8008520:	bfa8      	it	ge
 8008522:	2200      	movge	r2, #0
 8008524:	3b7f      	subs	r3, #127	; 0x7f
 8008526:	4413      	add	r3, r2
 8008528:	4a62      	ldr	r2, [pc, #392]	; (80086b4 <__ieee754_powf+0x3cc>)
 800852a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800852e:	4294      	cmp	r4, r2
 8008530:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8008534:	dd06      	ble.n	8008544 <__ieee754_powf+0x25c>
 8008536:	4a60      	ldr	r2, [pc, #384]	; (80086b8 <__ieee754_powf+0x3d0>)
 8008538:	4294      	cmp	r4, r2
 800853a:	f340 80a5 	ble.w	8008688 <__ieee754_powf+0x3a0>
 800853e:	3301      	adds	r3, #1
 8008540:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8008544:	2400      	movs	r4, #0
 8008546:	4a5d      	ldr	r2, [pc, #372]	; (80086bc <__ieee754_powf+0x3d4>)
 8008548:	00a7      	lsls	r7, r4, #2
 800854a:	443a      	add	r2, r7
 800854c:	ee07 1a90 	vmov	s15, r1
 8008550:	ed92 7a00 	vldr	s14, [r2]
 8008554:	4a5a      	ldr	r2, [pc, #360]	; (80086c0 <__ieee754_powf+0x3d8>)
 8008556:	ee37 6a27 	vadd.f32	s12, s14, s15
 800855a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800855e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8008562:	1049      	asrs	r1, r1, #1
 8008564:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8008568:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800856c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8008570:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8008574:	ee06 1a10 	vmov	s12, r1
 8008578:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800857c:	ee14 ca90 	vmov	ip, s9
 8008580:	ea02 0c0c 	and.w	ip, r2, ip
 8008584:	ee05 ca10 	vmov	s10, ip
 8008588:	eeb1 4a45 	vneg.f32	s8, s10
 800858c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8008590:	ee36 6a47 	vsub.f32	s12, s12, s14
 8008594:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80086c4 <__ieee754_powf+0x3dc>
 8008598:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800859c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80085a0:	eee4 5a06 	vfma.f32	s11, s8, s12
 80085a4:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80085a8:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80085ac:	eddf 5a46 	vldr	s11, [pc, #280]	; 80086c8 <__ieee754_powf+0x3e0>
 80085b0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80085b4:	eddf 5a45 	vldr	s11, [pc, #276]	; 80086cc <__ieee754_powf+0x3e4>
 80085b8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80085bc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80086a0 <__ieee754_powf+0x3b8>
 80085c0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80085c4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80086d0 <__ieee754_powf+0x3e8>
 80085c8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80085cc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80086d4 <__ieee754_powf+0x3ec>
 80085d0:	ee75 6a24 	vadd.f32	s13, s10, s9
 80085d4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80085d8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80085dc:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80085e0:	eef0 7a65 	vmov.f32	s15, s11
 80085e4:	eee3 6a87 	vfma.f32	s13, s7, s14
 80085e8:	eee5 7a05 	vfma.f32	s15, s10, s10
 80085ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f0:	ee17 1a90 	vmov	r1, s15
 80085f4:	4011      	ands	r1, r2
 80085f6:	ee07 1a90 	vmov	s15, r1
 80085fa:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80085fe:	eddf 5a36 	vldr	s11, [pc, #216]	; 80086d8 <__ieee754_powf+0x3f0>
 8008602:	eea4 7a05 	vfma.f32	s14, s8, s10
 8008606:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800860a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800860e:	eea7 7a86 	vfma.f32	s14, s15, s12
 8008612:	eeb0 6a47 	vmov.f32	s12, s14
 8008616:	eea5 6a27 	vfma.f32	s12, s10, s15
 800861a:	ee16 1a10 	vmov	r1, s12
 800861e:	4011      	ands	r1, r2
 8008620:	ee06 1a90 	vmov	s13, r1
 8008624:	eee4 6a27 	vfma.f32	s13, s8, s15
 8008628:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80086dc <__ieee754_powf+0x3f4>
 800862c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008630:	ee06 1a10 	vmov	s12, r1
 8008634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008638:	eddf 7a29 	vldr	s15, [pc, #164]	; 80086e0 <__ieee754_powf+0x3f8>
 800863c:	4929      	ldr	r1, [pc, #164]	; (80086e4 <__ieee754_powf+0x3fc>)
 800863e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008642:	4439      	add	r1, r7
 8008644:	edd1 7a00 	vldr	s15, [r1]
 8008648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800864c:	ee07 3a90 	vmov	s15, r3
 8008650:	eef0 0a47 	vmov.f32	s1, s14
 8008654:	4b24      	ldr	r3, [pc, #144]	; (80086e8 <__ieee754_powf+0x400>)
 8008656:	eee6 0a25 	vfma.f32	s1, s12, s11
 800865a:	443b      	add	r3, r7
 800865c:	ed93 5a00 	vldr	s10, [r3]
 8008660:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008664:	ee70 0a85 	vadd.f32	s1, s1, s10
 8008668:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800866c:	ee17 3a90 	vmov	r3, s15
 8008670:	4013      	ands	r3, r2
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800867a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800867e:	eee6 7a65 	vfms.f32	s15, s12, s11
 8008682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008686:	e70e      	b.n	80084a6 <__ieee754_powf+0x1be>
 8008688:	2401      	movs	r4, #1
 800868a:	e75c      	b.n	8008546 <__ieee754_powf+0x25e>
 800868c:	08008d2e 	.word	0x08008d2e
 8008690:	00000000 	.word	0x00000000
 8008694:	3f7ffff7 	.word	0x3f7ffff7
 8008698:	7149f2ca 	.word	0x7149f2ca
 800869c:	3f800007 	.word	0x3f800007
 80086a0:	3eaaaaab 	.word	0x3eaaaaab
 80086a4:	36eca570 	.word	0x36eca570
 80086a8:	3fb8aa3b 	.word	0x3fb8aa3b
 80086ac:	3fb8aa00 	.word	0x3fb8aa00
 80086b0:	4b800000 	.word	0x4b800000
 80086b4:	001cc471 	.word	0x001cc471
 80086b8:	005db3d6 	.word	0x005db3d6
 80086bc:	08008d34 	.word	0x08008d34
 80086c0:	fffff000 	.word	0xfffff000
 80086c4:	3e6c3255 	.word	0x3e6c3255
 80086c8:	3e53f142 	.word	0x3e53f142
 80086cc:	3e8ba305 	.word	0x3e8ba305
 80086d0:	3edb6db7 	.word	0x3edb6db7
 80086d4:	3f19999a 	.word	0x3f19999a
 80086d8:	3f763800 	.word	0x3f763800
 80086dc:	3f76384f 	.word	0x3f76384f
 80086e0:	369dc3a0 	.word	0x369dc3a0
 80086e4:	08008d44 	.word	0x08008d44
 80086e8:	08008d3c 	.word	0x08008d3c
 80086ec:	3338aa3c 	.word	0x3338aa3c
 80086f0:	f040 8092 	bne.w	8008818 <__ieee754_powf+0x530>
 80086f4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80086ec <__ieee754_powf+0x404>
 80086f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80086fc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008700:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008708:	f73f aef6 	bgt.w	80084f8 <__ieee754_powf+0x210>
 800870c:	15db      	asrs	r3, r3, #23
 800870e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8008712:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008716:	4103      	asrs	r3, r0
 8008718:	4423      	add	r3, r4
 800871a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800871e:	4947      	ldr	r1, [pc, #284]	; (800883c <__ieee754_powf+0x554>)
 8008720:	3a7f      	subs	r2, #127	; 0x7f
 8008722:	4111      	asrs	r1, r2
 8008724:	ea23 0101 	bic.w	r1, r3, r1
 8008728:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800872c:	ee07 1a10 	vmov	s14, r1
 8008730:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008734:	f1c2 0217 	rsb	r2, r2, #23
 8008738:	4110      	asrs	r0, r2
 800873a:	2c00      	cmp	r4, #0
 800873c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008740:	bfb8      	it	lt
 8008742:	4240      	neglt	r0, r0
 8008744:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008748:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008840 <__ieee754_powf+0x558>
 800874c:	ee17 3a10 	vmov	r3, s14
 8008750:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008754:	f023 030f 	bic.w	r3, r3, #15
 8008758:	ee07 3a10 	vmov	s14, r3
 800875c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008760:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008764:	eddf 7a37 	vldr	s15, [pc, #220]	; 8008844 <__ieee754_powf+0x55c>
 8008768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8008770:	eddf 6a35 	vldr	s13, [pc, #212]	; 8008848 <__ieee754_powf+0x560>
 8008774:	eeb0 0a67 	vmov.f32	s0, s15
 8008778:	eea7 0a26 	vfma.f32	s0, s14, s13
 800877c:	eeb0 6a40 	vmov.f32	s12, s0
 8008780:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008784:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008788:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800878c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800884c <__ieee754_powf+0x564>
 8008790:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8008850 <__ieee754_powf+0x568>
 8008794:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008798:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8008854 <__ieee754_powf+0x56c>
 800879c:	eee6 6a07 	vfma.f32	s13, s12, s14
 80087a0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8008858 <__ieee754_powf+0x570>
 80087a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80087a8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800885c <__ieee754_powf+0x574>
 80087ac:	eee6 6a07 	vfma.f32	s13, s12, s14
 80087b0:	eeb0 6a40 	vmov.f32	s12, s0
 80087b4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80087b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80087bc:	eeb0 7a46 	vmov.f32	s14, s12
 80087c0:	ee77 6a66 	vsub.f32	s13, s14, s13
 80087c4:	ee20 6a06 	vmul.f32	s12, s0, s12
 80087c8:	eee0 7a27 	vfma.f32	s15, s0, s15
 80087cc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80087d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80087d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80087dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80087e0:	ee10 3a10 	vmov	r3, s0
 80087e4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80087e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087ec:	da1a      	bge.n	8008824 <__ieee754_powf+0x53c>
 80087ee:	f000 f991 	bl	8008b14 <scalbnf>
 80087f2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80087f6:	e5c9      	b.n	800838c <__ieee754_powf+0xa4>
 80087f8:	4a19      	ldr	r2, [pc, #100]	; (8008860 <__ieee754_powf+0x578>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	dd02      	ble.n	8008804 <__ieee754_powf+0x51c>
 80087fe:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008864 <__ieee754_powf+0x57c>
 8008802:	e67b      	b.n	80084fc <__ieee754_powf+0x214>
 8008804:	d108      	bne.n	8008818 <__ieee754_powf+0x530>
 8008806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800880a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008812:	f6ff af7b 	blt.w	800870c <__ieee754_powf+0x424>
 8008816:	e7f2      	b.n	80087fe <__ieee754_powf+0x516>
 8008818:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800881c:	f73f af76 	bgt.w	800870c <__ieee754_powf+0x424>
 8008820:	2000      	movs	r0, #0
 8008822:	e78f      	b.n	8008744 <__ieee754_powf+0x45c>
 8008824:	ee00 3a10 	vmov	s0, r3
 8008828:	e7e3      	b.n	80087f2 <__ieee754_powf+0x50a>
 800882a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800882e:	e5ad      	b.n	800838c <__ieee754_powf+0xa4>
 8008830:	eeb0 0a68 	vmov.f32	s0, s17
 8008834:	e5aa      	b.n	800838c <__ieee754_powf+0xa4>
 8008836:	eeb0 0a48 	vmov.f32	s0, s16
 800883a:	e5a7      	b.n	800838c <__ieee754_powf+0xa4>
 800883c:	007fffff 	.word	0x007fffff
 8008840:	3f317218 	.word	0x3f317218
 8008844:	35bfbe8c 	.word	0x35bfbe8c
 8008848:	3f317200 	.word	0x3f317200
 800884c:	3331bb4c 	.word	0x3331bb4c
 8008850:	b5ddea0e 	.word	0xb5ddea0e
 8008854:	388ab355 	.word	0x388ab355
 8008858:	bb360b61 	.word	0xbb360b61
 800885c:	3e2aaaab 	.word	0x3e2aaaab
 8008860:	43160000 	.word	0x43160000
 8008864:	0da24260 	.word	0x0da24260

08008868 <__ieee754_sqrtf>:
 8008868:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800886c:	4770      	bx	lr

0800886e <matherr>:
 800886e:	2000      	movs	r0, #0
 8008870:	4770      	bx	lr
 8008872:	0000      	movs	r0, r0
 8008874:	0000      	movs	r0, r0
	...

08008878 <nan>:
 8008878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008880 <nan+0x8>
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	00000000 	.word	0x00000000
 8008884:	7ff80000 	.word	0x7ff80000

08008888 <atanf>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	ee10 5a10 	vmov	r5, s0
 800888e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008892:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008896:	eef0 7a40 	vmov.f32	s15, s0
 800889a:	db10      	blt.n	80088be <atanf+0x36>
 800889c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80088a0:	dd04      	ble.n	80088ac <atanf+0x24>
 80088a2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80088a6:	eeb0 0a67 	vmov.f32	s0, s15
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80089e4 <atanf+0x15c>
 80088b0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80089e8 <atanf+0x160>
 80088b4:	2d00      	cmp	r5, #0
 80088b6:	bfd8      	it	le
 80088b8:	eef0 7a47 	vmovle.f32	s15, s14
 80088bc:	e7f3      	b.n	80088a6 <atanf+0x1e>
 80088be:	4b4b      	ldr	r3, [pc, #300]	; (80089ec <atanf+0x164>)
 80088c0:	429c      	cmp	r4, r3
 80088c2:	dc10      	bgt.n	80088e6 <atanf+0x5e>
 80088c4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80088c8:	da0a      	bge.n	80088e0 <atanf+0x58>
 80088ca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80089f0 <atanf+0x168>
 80088ce:	ee30 7a07 	vadd.f32	s14, s0, s14
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80088da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088de:	dce2      	bgt.n	80088a6 <atanf+0x1e>
 80088e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088e4:	e013      	b.n	800890e <atanf+0x86>
 80088e6:	f000 f8a3 	bl	8008a30 <fabsf>
 80088ea:	4b42      	ldr	r3, [pc, #264]	; (80089f4 <atanf+0x16c>)
 80088ec:	429c      	cmp	r4, r3
 80088ee:	dc4f      	bgt.n	8008990 <atanf+0x108>
 80088f0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80088f4:	429c      	cmp	r4, r3
 80088f6:	dc41      	bgt.n	800897c <atanf+0xf4>
 80088f8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80088fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008900:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008904:	2300      	movs	r3, #0
 8008906:	ee30 0a27 	vadd.f32	s0, s0, s15
 800890a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008914:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80089f8 <atanf+0x170>
 8008918:	eddf 5a38 	vldr	s11, [pc, #224]	; 80089fc <atanf+0x174>
 800891c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008a00 <atanf+0x178>
 8008920:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008924:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008928:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008a04 <atanf+0x17c>
 800892c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008930:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008a08 <atanf+0x180>
 8008934:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008938:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008a0c <atanf+0x184>
 800893c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008940:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a10 <atanf+0x188>
 8008944:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008948:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008a14 <atanf+0x18c>
 800894c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008950:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008a18 <atanf+0x190>
 8008954:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008958:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8008a1c <atanf+0x194>
 800895c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008960:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008a20 <atanf+0x198>
 8008964:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008968:	ee27 7a26 	vmul.f32	s14, s14, s13
 800896c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008974:	d121      	bne.n	80089ba <atanf+0x132>
 8008976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800897a:	e794      	b.n	80088a6 <atanf+0x1e>
 800897c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008980:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008984:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008988:	2301      	movs	r3, #1
 800898a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800898e:	e7be      	b.n	800890e <atanf+0x86>
 8008990:	4b24      	ldr	r3, [pc, #144]	; (8008a24 <atanf+0x19c>)
 8008992:	429c      	cmp	r4, r3
 8008994:	dc0b      	bgt.n	80089ae <atanf+0x126>
 8008996:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800899a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800899e:	eea0 7a27 	vfma.f32	s14, s0, s15
 80089a2:	2302      	movs	r3, #2
 80089a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80089a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ac:	e7af      	b.n	800890e <atanf+0x86>
 80089ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80089b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80089b6:	2303      	movs	r3, #3
 80089b8:	e7a9      	b.n	800890e <atanf+0x86>
 80089ba:	4a1b      	ldr	r2, [pc, #108]	; (8008a28 <atanf+0x1a0>)
 80089bc:	491b      	ldr	r1, [pc, #108]	; (8008a2c <atanf+0x1a4>)
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	441a      	add	r2, r3
 80089c2:	440b      	add	r3, r1
 80089c4:	edd3 6a00 	vldr	s13, [r3]
 80089c8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80089cc:	2d00      	cmp	r5, #0
 80089ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089d2:	ed92 7a00 	vldr	s14, [r2]
 80089d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089da:	bfb8      	it	lt
 80089dc:	eef1 7a67 	vneglt.f32	s15, s15
 80089e0:	e761      	b.n	80088a6 <atanf+0x1e>
 80089e2:	bf00      	nop
 80089e4:	bfc90fdb 	.word	0xbfc90fdb
 80089e8:	3fc90fdb 	.word	0x3fc90fdb
 80089ec:	3edfffff 	.word	0x3edfffff
 80089f0:	7149f2ca 	.word	0x7149f2ca
 80089f4:	3f97ffff 	.word	0x3f97ffff
 80089f8:	3c8569d7 	.word	0x3c8569d7
 80089fc:	3d4bda59 	.word	0x3d4bda59
 8008a00:	bd6ef16b 	.word	0xbd6ef16b
 8008a04:	3d886b35 	.word	0x3d886b35
 8008a08:	3dba2e6e 	.word	0x3dba2e6e
 8008a0c:	3e124925 	.word	0x3e124925
 8008a10:	3eaaaaab 	.word	0x3eaaaaab
 8008a14:	bd15a221 	.word	0xbd15a221
 8008a18:	bd9d8795 	.word	0xbd9d8795
 8008a1c:	bde38e38 	.word	0xbde38e38
 8008a20:	be4ccccd 	.word	0xbe4ccccd
 8008a24:	401bffff 	.word	0x401bffff
 8008a28:	08008d4c 	.word	0x08008d4c
 8008a2c:	08008d5c 	.word	0x08008d5c

08008a30 <fabsf>:
 8008a30:	ee10 3a10 	vmov	r3, s0
 8008a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a38:	ee00 3a10 	vmov	s0, r3
 8008a3c:	4770      	bx	lr

08008a3e <finitef>:
 8008a3e:	ee10 3a10 	vmov	r3, s0
 8008a42:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8008a46:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008a4a:	bfac      	ite	ge
 8008a4c:	2000      	movge	r0, #0
 8008a4e:	2001      	movlt	r0, #1
 8008a50:	4770      	bx	lr
	...

08008a54 <nanf>:
 8008a54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008a5c <nanf+0x8>
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	7fc00000 	.word	0x7fc00000

08008a60 <rintf>:
 8008a60:	b513      	push	{r0, r1, r4, lr}
 8008a62:	ee10 1a10 	vmov	r1, s0
 8008a66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a6a:	0ddc      	lsrs	r4, r3, #23
 8008a6c:	3c7f      	subs	r4, #127	; 0x7f
 8008a6e:	2c16      	cmp	r4, #22
 8008a70:	dc46      	bgt.n	8008b00 <rintf+0xa0>
 8008a72:	b32b      	cbz	r3, 8008ac0 <rintf+0x60>
 8008a74:	2c00      	cmp	r4, #0
 8008a76:	ee10 2a10 	vmov	r2, s0
 8008a7a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8008a7e:	da21      	bge.n	8008ac4 <rintf+0x64>
 8008a80:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8008a84:	425b      	negs	r3, r3
 8008a86:	4a21      	ldr	r2, [pc, #132]	; (8008b0c <rintf+0xac>)
 8008a88:	0a5b      	lsrs	r3, r3, #9
 8008a8a:	0d09      	lsrs	r1, r1, #20
 8008a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a90:	0509      	lsls	r1, r1, #20
 8008a92:	430b      	orrs	r3, r1
 8008a94:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8008a98:	ee07 3a90 	vmov	s15, r3
 8008a9c:	edd2 6a00 	vldr	s13, [r2]
 8008aa0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8008aa4:	ed8d 7a01 	vstr	s14, [sp, #4]
 8008aa8:	eddd 7a01 	vldr	s15, [sp, #4]
 8008aac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ab0:	ee17 3a90 	vmov	r3, s15
 8008ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ab8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8008abc:	ee00 3a10 	vmov	s0, r3
 8008ac0:	b002      	add	sp, #8
 8008ac2:	bd10      	pop	{r4, pc}
 8008ac4:	4b12      	ldr	r3, [pc, #72]	; (8008b10 <rintf+0xb0>)
 8008ac6:	4123      	asrs	r3, r4
 8008ac8:	4219      	tst	r1, r3
 8008aca:	d0f9      	beq.n	8008ac0 <rintf+0x60>
 8008acc:	085b      	lsrs	r3, r3, #1
 8008ace:	4219      	tst	r1, r3
 8008ad0:	d006      	beq.n	8008ae0 <rintf+0x80>
 8008ad2:	ea21 0203 	bic.w	r2, r1, r3
 8008ad6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ada:	fa43 f404 	asr.w	r4, r3, r4
 8008ade:	4322      	orrs	r2, r4
 8008ae0:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <rintf+0xac>)
 8008ae2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ae6:	ed90 7a00 	vldr	s14, [r0]
 8008aea:	ee07 2a90 	vmov	s15, r2
 8008aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008af2:	edcd 7a01 	vstr	s15, [sp, #4]
 8008af6:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008afa:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008afe:	e7df      	b.n	8008ac0 <rintf+0x60>
 8008b00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008b04:	d3dc      	bcc.n	8008ac0 <rintf+0x60>
 8008b06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008b0a:	e7d9      	b.n	8008ac0 <rintf+0x60>
 8008b0c:	08008d6c 	.word	0x08008d6c
 8008b10:	007fffff 	.word	0x007fffff

08008b14 <scalbnf>:
 8008b14:	b508      	push	{r3, lr}
 8008b16:	ee10 2a10 	vmov	r2, s0
 8008b1a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008b1e:	ed2d 8b02 	vpush	{d8}
 8008b22:	eef0 0a40 	vmov.f32	s1, s0
 8008b26:	d004      	beq.n	8008b32 <scalbnf+0x1e>
 8008b28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008b2c:	d306      	bcc.n	8008b3c <scalbnf+0x28>
 8008b2e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008b32:	ecbd 8b02 	vpop	{d8}
 8008b36:	eeb0 0a60 	vmov.f32	s0, s1
 8008b3a:	bd08      	pop	{r3, pc}
 8008b3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b40:	d21c      	bcs.n	8008b7c <scalbnf+0x68>
 8008b42:	4b1f      	ldr	r3, [pc, #124]	; (8008bc0 <scalbnf+0xac>)
 8008b44:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008bc4 <scalbnf+0xb0>
 8008b48:	4298      	cmp	r0, r3
 8008b4a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008b4e:	db10      	blt.n	8008b72 <scalbnf+0x5e>
 8008b50:	ee10 2a90 	vmov	r2, s1
 8008b54:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008b58:	3b19      	subs	r3, #25
 8008b5a:	4403      	add	r3, r0
 8008b5c:	2bfe      	cmp	r3, #254	; 0xfe
 8008b5e:	dd0f      	ble.n	8008b80 <scalbnf+0x6c>
 8008b60:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008bc8 <scalbnf+0xb4>
 8008b64:	eeb0 0a48 	vmov.f32	s0, s16
 8008b68:	f000 f834 	bl	8008bd4 <copysignf>
 8008b6c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008b70:	e7df      	b.n	8008b32 <scalbnf+0x1e>
 8008b72:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008bcc <scalbnf+0xb8>
 8008b76:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008b7a:	e7da      	b.n	8008b32 <scalbnf+0x1e>
 8008b7c:	0ddb      	lsrs	r3, r3, #23
 8008b7e:	e7ec      	b.n	8008b5a <scalbnf+0x46>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	dd06      	ble.n	8008b92 <scalbnf+0x7e>
 8008b84:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008b88:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008b8c:	ee00 3a90 	vmov	s1, r3
 8008b90:	e7cf      	b.n	8008b32 <scalbnf+0x1e>
 8008b92:	f113 0f16 	cmn.w	r3, #22
 8008b96:	da06      	bge.n	8008ba6 <scalbnf+0x92>
 8008b98:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b9c:	4298      	cmp	r0, r3
 8008b9e:	dcdf      	bgt.n	8008b60 <scalbnf+0x4c>
 8008ba0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008bcc <scalbnf+0xb8>
 8008ba4:	e7de      	b.n	8008b64 <scalbnf+0x50>
 8008ba6:	3319      	adds	r3, #25
 8008ba8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008bac:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008bb0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008bd0 <scalbnf+0xbc>
 8008bb4:	ee07 3a10 	vmov	s14, r3
 8008bb8:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008bbc:	e7b9      	b.n	8008b32 <scalbnf+0x1e>
 8008bbe:	bf00      	nop
 8008bc0:	ffff3cb0 	.word	0xffff3cb0
 8008bc4:	4c000000 	.word	0x4c000000
 8008bc8:	7149f2ca 	.word	0x7149f2ca
 8008bcc:	0da24260 	.word	0x0da24260
 8008bd0:	33000000 	.word	0x33000000

08008bd4 <copysignf>:
 8008bd4:	ee10 3a10 	vmov	r3, s0
 8008bd8:	ee10 2a90 	vmov	r2, s1
 8008bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008be0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008be4:	4313      	orrs	r3, r2
 8008be6:	ee00 3a10 	vmov	s0, r3
 8008bea:	4770      	bx	lr

08008bec <_init>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	bf00      	nop
 8008bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf2:	bc08      	pop	{r3}
 8008bf4:	469e      	mov	lr, r3
 8008bf6:	4770      	bx	lr

08008bf8 <_fini>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr
